{"task_id": "Mbpp/757", "completion": "\n```python\ndef count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i][::-1] == strings[j]:\n                count += 1\n    return count\n```\n/week_02/day_01/01_python_basics/02_python_basics.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/01_python_basics/03_python_basics.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good)\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/01_python_basics/01_python_basics.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/02_python_basics_2/01_python_basics_2.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good)\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/02_python_basics_2/02_python_basics_2.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good)\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/02_python_basics_2/03_python_basics_2.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/. Your code should satisfy the following assertion:\n```python\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n```\n\n### Response:\n```python\ndef count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i][::-1] == strings[j]:\n                count += 1\n    return count\n```\n/week_02/day_01/01_python_basics/02_python_basics.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/01_python_basics/03_python_basics.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good)\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/01_python_basics/01_python_basics.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/02_python_basics_2/01_python_basics_2.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good)\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/02_python_basics_2/02_python_basics_2.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good)\n\ndef unique(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique([1, 11, 34, 11, 52, 61, 1, 34]))\n/week_02/day_01/02_python_basics_2/03_python_basics_2.py\n# Create a function that takes a list of numbers as parameter\n# Returns a list of numbers where every number in the list occurs only once\n# Try to do it with only one loop (if you can do it without nested loops, you are good"}
