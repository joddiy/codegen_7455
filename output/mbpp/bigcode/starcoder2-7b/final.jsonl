{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return [element for element in list1 if element in list2]\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return True\n        else:\n            return False\n    else:\n        return True"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(text):\n    if text.islower() and \"_\" in text:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "completion": "def check_type(tuple):\n    return all(type(x) == type(tuple[0]) for x in tuple)"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, element):\n    return arr.count(element) > n/2"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(num):\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(string):\n    return string[::2]"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    # create two lists\n    negatives = []\n    positives = []\n    # iterate through the array\n    for i in arr:\n        # if the number is negative, append it to the negatives list\n        if i < 0:\n            negatives.append(i)\n        # if the number is positive, append it to the positives list\n        else:\n            positives.append(i)\n    # combine the two lists\n    return negatives + positives"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, char):\n    return string.replace(\" \", char)\n\nassert replace_blank(\"hello people\", \"@\") == \"hello@people\""}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return side_length*4"}
{"task_id": "Mbpp/233", "completion": "import math\ndef lateralsurface_cylinder(r,h):\n    return 2*math.pi*r*h\n\nassert math.isclose(lateralsurface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length**3\n\nassert volume_cube(3)==27"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(number):\n    return number | 0b10101010101010101010101010101010"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(list_of_tuples):\n    dict_of_tuples = {}\n    for tuple in list_of_tuples:\n        if tuple in dict_of_tuples:\n            dict_of_tuples[tuple] += 1\n        else:\n            dict_of_tuples[tuple] = 1\n    return dict_of_tuples"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(string):\n    return len(string) * (len(string) + 1) / 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-len(list2):] = list2\n    return list1\n\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)\n\nassert count_charac(\"python programming\")==18"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(num):\n    # Your code here\n    return num + 1"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum(arr):\n    # Create a list to store the maximum sum of a bitonic subsequence\n    max_sum = []\n    # Loop through the array\n    for i in range(len(arr)):\n        # Create a list to store the maximum sum of a bitonic subsequence\n        max_sum.append(0)\n        # Create a list to store the maximum sum of a bitonic subsequence\n        max_sum_dec = []\n        # Loop through the array\n        for j in range(len(arr)):\n            # Create a list to store the maximum sum of a bitonic subsequence\n            max_sum_dec.append(0)\n            # Create a list to store the maximum sum of a bitonic subsequence\n            max_sum_inc = []\n            # Loop through the array\n            for k in range(len(arr)):\n                # Create a list to store the maximum sum of a bitonic subsequence\n                max_sum_inc.append(0)\n                # Create a list to store the maximum sum of a bitonic subsequence\n                max_sum_dec_temp = []\n                # Loop through the array\n                for l in range(len(arr)):\n                    # Create a list to store the maximum sum of a bitonic subsequence\n                    max_sum_dec_temp.append(0)\n                    # Create a list to store the maximum sum of a bitonic subsequence\n                    max_sum_inc_temp = []\n                    # Loop through the array\n                    for m in range(len(arr)):\n                        # Create a list to store the maximum sum of a bitonic subsequence\n                        max_sum_inc_temp.append(0)\n                        # Create a list to store the maximum sum of a bitonic subsequence\n                        max_sum_dec_temp_temp = []\n                        # Loop through the array\n                        for n in range(len(arr)):\n                            # Create a list to store the maximum sum of a bitonic subsequence\n                            max_sum_dec_temp_temp.append(0)\n                            # Create a list to store the maximum sum of a bitonic subsequence\n                            max_sum_inc_temp_temp = []\n                            # Loop through the array\n                            for o in range(len(arr)):\n                                # Create a list to store the maximum sum of a bitonic subsequence\n                                max_sum_inc_temp_temp.append(0)\n                                # Create a list to store the maximum sum of a bitonic subsequence\n                                max_sum_dec_temp_temp_temp = []\n                                # Loop through the array\n                                for p in range(len(arr)):\n                                    # Create a list to store the maximum sum of a bitonic subsequence\n                                    max_sum_dec_temp_temp_temp.append(0)\n                                    # Create a list to store the maximum sum of a bitonic subsequence\n                                    max_sum_inc_temp_temp_temp = []\n                                    # Loop through the array\n                                    for q in range(len(arr)):\n                                        # Create a list to store the maximum sum of a bitonic subsequence\n                                        max_sum_inc_temp_temp_temp.append(0)\n                                        # Create a list to store the maximum sum of a bitonic subsequence\n                                        max_sum_dec_temp_temp_temp_temp = []\n                                        # Loop through the array\n                                        for r in range(len(arr)):\n                                            # Create a list to store the maximum sum of a bitonic subsequence\n                                            max_sum_dec_temp_temp_temp_temp.append(0)\n                                            # Create a list to store the maximum sum of a bitonic subsequence\n                                            max_sum_inc_temp_temp_temp_temp = []\n                                            # Loop through the array\n                                            for s in range(len(arr)):\n                                                # Create a list to store the maximum sum of a bitonic subsequence\n                                                max_sum_inc_temp_temp_temp_temp.append(0)\n                                                # Create a list to store the maximum sum of a bitonic subsequence\n                                                max_sum_dec_temp_temp_temp_temp_temp = []\n                                                # Loop through the array\n                                                for t in range(len(arr)):\n                                                    # Create a list to store the maximum sum of a bitonic sub"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(string1, string2):\n    return ''.join(list(filter(lambda x: x not in string2, string1)))"}
{"task_id": "Mbpp/247", "completion": "def lps(string):\n    # Create a list of all possible subsequences\n    subsequences = []\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            subsequences.append(string[i:j+1])\n\n    # Check each subsequence to see if it is a palindrome\n    longest_palindrome = \"\"\n    for subsequence in subsequences:\n        if subsequence == subsequence[::-1] and len(subsequence) > len(longest_palindrome):\n            longest_palindrome = subsequence\n\n    return len(longest_palindrome)"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(array1, array2):\n    return list(set(array1).intersection(set(array2)))"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst"}
{"task_id": "Mbpp/252", "completion": "def convert(complex_number):\n    return (abs(complex_number), complex_number.imag)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(list):\n    count = 0\n    for i in list:\n        if type(i) == int:\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "completion": "def combinations_colors(list, n):\n    return list(itertools.combinations_with_replacement(list, n))\n\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [2]\n    for i in range(3, n+1):\n        for j in primes:\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes)"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a,b):\n    return (b,a)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(t1, t2):\n    return tuple(max(x, y) for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(array):\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if array[i]==array[j]:\n                return True\n    return False"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return newman_prime(n-1) + 2*newman_prime(n-2) + 1"}
{"task_id": "Mbpp/261", "completion": "def division_elements(tuple1, tuple2):\n    return tuple(tuple1[i] / tuple2[i] for i in range(len(tuple1)))\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst,L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(age):\n    return age * 7"}
{"task_id": "Mbpp/265", "completion": "def list_split(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 6*side_length**2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    return sum(i**2 for i in range(1, n*2, 2))"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return n * 11"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        sum += lst[i]\n    return sum"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(list_of_tuples):\n    return [x[-1] for x in list_of_tuples]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += (n+1) * (n+1) * (n+1) * (n+1)\n    return sum"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tuple_):\n    count = 0\n    for element in tuple_:\n        if type(element) == tuple:\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (10 + 3) / 2"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    rev_num = int(rev_num_str)\n    if (num - rev_num) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [i-j for i,j in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(num):\n    num_str = str(num)\n    for i in num_str:\n        if num_str.count(i) > int(i):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(list, element):\n    for i in list:\n        if i!= element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(text):\n    if text.count('a') == 1 and text.count('b') == 2 or text.count('b') == 3:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(k):\n            sum += arr[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    return sum(i**2 for i in range(2, n+1, 2))"}
{"task_id": "Mbpp/290", "completion": "def max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return max_length, max_list"}
{"task_id": "Mbpp/292", "completion": "def find(a,b):\n    return a//b"}
{"task_id": "Mbpp/293", "completion": "def otherside_rightangle(a,b):\n    return (a**2+b**2)**0.5"}
{"task_id": "Mbpp/294", "completion": "def max_val(list):\n    max = list[0]\n    for i in list:\n        if i > max:\n            max = i\n    return max"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    return int(''.join(sorted(digits, reverse=True)))"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(list_of_tuples):\n    max_name = ''\n    max_score = 0\n    for name, score in list_of_tuples:\n        if score > max_score:\n            max_name = name\n            max_score = score\n    return max_name, max_score"}
{"task_id": "Mbpp/300", "completion": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    return 2 * count_binary_seq(n - 1)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    return [word for word in words if word[0] == 'p']"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, i, k, j):\n    if i == len(arr) or j == len(arr):\n        return 0\n    if i == j:\n        return arr[i]\n    if i == k:\n        return arr[i] + max_sum_increasing_subseq(arr, i+1, k, j)\n    return max(arr[i] + max_sum_increasing_subseq(arr, i+1, k, j), max_sum_increasing_subseq(arr, i+1, k, j))"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    list1.reverse()\n    list2.reverse()\n    list3 = []\n    for i in range(n):\n        list3.append(list1[i]*list2[i])\n    return list3"}
{"task_id": "Mbpp/309", "completion": "def maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(x,y):\n    if x * y < 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(string):\n    return tuple(string)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(num):\n    return num | (num + 1)"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    return 2 ** (n.bit_length() - 1)"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst,string):\n    return [string.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(list1, list2, list3):\n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[list1[i]] = {list2[i]: list3[i]}\n    return dict1\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the characters and their counts\n    char_counts = {}\n\n    # Iterate over the characters in the string\n    for char in string:\n        # If the character is already in the dictionary, increment its count\n        if char in char_counts:\n            char_counts[char] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            char_counts[char] = 1\n\n    # Iterate over the characters in the string again\n    for char in string:\n        # If the character's count is 1, return it\n        if char_counts[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return (n * (3 * n - 2)) / 2"}
{"task_id": "Mbpp/396", "completion": "def check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a,b,c):\n    if a>b:\n        if a>c:\n            if b>c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    else:\n        if b>c:\n            if a>c:\n                return a\n            else:\n                return c\n        else:\n            return b"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n\nassert sum_of_digits([10,2,56])==14"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    return len(set(lst))"}
{"task_id": "Mbpp/404", "completion": "def minimum(x,y):\n    if x < y:\n        return x\n    else:\n        return y"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, x):\n    for ele in tuplex:\n        if ele == x:\n            return True\n    return False"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(num):\n    num_list = list(str(num))\n    for i in range(len(num_list)-1):\n        if num_list[i] < num_list[i+1]:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n            return int(''.join(num_list))\n    return -1"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    min_product = 1\n    for i in lst:\n        min_product *= min(i)\n    return min_product\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "completion": "def min_val(list):\n    min_val = list[0]\n    for i in list:\n        if i < min_val:\n            min_val = i\n    return min_val"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(map(int, string[i:j+1])) == len(string[i:j+1]):\n                count += 1\n    return count"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(list):\n    return [x for x in list if x % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(list_of_tuples, n):\n    return [i[n] for i in list_of_tuples]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for i in seq1:\n        for j in seq2:\n            if i == j:\n                return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    max_product = 0\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = [arr[i], arr[j]]\n    return max_pair"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(list_of_lists):\n    max_len = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(lst):\n    total = 0\n    for i in lst:\n        total += round(i)\n    return total * len(lst)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tuple, delimiter):\n    return delimiter.join(str(x) for x in tuple)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), \"-\") == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [tup[i][-1] for i in range(len(tup))]\n\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r','s']"}
{"task_id": "Mbpp/4", "completion": "def heap_queue_largest(list, n):\n    heapq.heapify(list)\n    return heapq.nlargest(n, list)"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(list):\n    smallest = list[0]\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(list, element):\n    count = 0\n    for i in list:\n        if element in i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(lst):\n    return [x for x in lst if x%2==0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    return date[8:] + \"-\" + date[5:7] + \"-\" + date[:4]"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(tup1, tup2):\n    return tuple(map(lambda x, y: x & y, tup1, tup2))\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a,b,c):\n    return -4*a*c"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a,b,c):\n    return (a+b+c)/2"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/63", "completion": "def max_difference(list_of_tuples):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(i + 1, len(list_of_tuples)):\n            if list_of_tuples[j][0] - list_of_tuples[i][1] > max_diff:\n                max_diff = list_of_tuples[j][0] - list_of_tuples[i][1]\n    return max_diff"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(list):\n    return [x for x in list if x < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(string):\n    return string[::2]"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(list_of_tuples):\n    count = 0\n    for i in list_of_tuples:\n        if i[::-1] in list_of_tuples:\n            count += 1\n    return count"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(list_of_integers):\n    return int(''.join(str(i) for i in list_of_integers))"}
{"task_id": "Mbpp/440", "completion": "\ndef find_adverb_position(sentence):\n    adverbs = ['clearly','very','really', 'extremely', 'quite','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6*size**2"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    positive_count = 0\n    for i in arr:\n        if i > 0:\n            positive_count += 1\n    return positive_count / len(arr)"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(t1, t2):\n    return tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), t1, t2))\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tuple, list):\n    count = 0\n    for i in list:\n        for j in tuple:\n            if i == j:\n                count += 1\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num**3 for num in nums]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [i for i in lst if len(i) == size]\n\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8) == ['practice','solution']"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    if month_number == 1 or month_number == 3 or month_number == 5 or month_number == 7 or month_number == 8 or month_number == 10 or month_number == 12:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(list_of_strings):\n    reversed_list = []\n    for string in list_of_strings:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(list_of_lists):\n    min_length = len(list_of_lists[0])\n    min_list = list_of_lists[0]\n    for i in list_of_lists:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_list = i\n    return min_list"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10,20)==200"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(string):\n    return ''.join(i for i in string if i.islower())"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(list_of_lists):\n    if len(list_of_lists) == 0:\n        return 0\n    if type(list_of_lists[0]) == list:\n        return recursive_list_sum(list_of_lists[0]) + recursive_list_sum(list_of_lists[1:])\n    else:\n        return list_of_lists[0] + recursive_list_sum(list_of_lists[1:])\n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(list):\n    return [list[i][0] for i in range(len(list))]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        return [lst[0:1]] + combinations_list(lst[1:])\n\nassert combinations_list(['orange','red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green','red'], ['green','red', 'orange'], ['blue'], ['blue', 'orange'], ['blue','red'], ['blue','red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green','red'], ['blue', 'green','red', 'orange']]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(dict):\n    for key in dict:\n        if dict[key] == None:\n            dict.pop(key)\n    return dict"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i]+1!= lst[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list):\n    result = set()\n    for tup in tuple_list:\n        result.update(tup)\n    return result"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/474", "completion": "def replace_char(string,old,new):\n    new_string = \"\"\n    for i in string:\n        if i == old:\n            new_string += new\n        else:\n            new_string += i\n    return new_string"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(string):\n    return string.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(string):\n    return ''.join(char for char in string if char.isupper())"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/554", "completion": "def Split(list):\n    return [x for x in list if x % 2 == 1]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = 0\n    sum_of_n = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_n += i\n    return sum_of_cubes - sum_of_n"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) == xor:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(string):\n    return string.swapcase()"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i-1) for i in range(n))"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    num1 = str(num1)\n    num2 = str(num2)\n    num1 = list(num1)\n    num2 = list(num2)\n    num1.reverse()\n    num2.reverse()\n    num1 = int(''.join(num1))\n    num2 = int(''.join(num2))\n    return abs(num1 - num2)"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(nums, k):\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"}
{"task_id": "Mbpp/560", "completion": "def union_elements(tuple1, tuple2):\n    return sorted(set(tuple1 + tuple2))\n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(list):\n    max_length = 0\n    for sublist in list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(string):\n    return [string[i:j] for i, j in zip(string.find('\"') + 1, string.rfind('\"'))]"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"}
{"task_id": "Mbpp/567", "completion": "def issort_list(list):\n    for i in range(len(list)-1):\n        if list[i] > list[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for i in range(n)]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    else:\n        if arr[0] <= arr[1]:\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    return False\n            return True\n        else:\n            for i in range(len(arr)-1):\n                if arr[i] < arr[i+1]:\n                    return False\n            return True"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(list):\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product"}
{"task_id": "Mbpp/574", "completion": "def surfacearea_cylinder(radius,height):\n    return 2*3.14*radius*height+2*3.14*radius**2"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(list1, list2):\n    if len(list1) < len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list2[0]:\n                if list1[i:i+len(list2)] == list2:\n                    return True\n        return False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    return tuple(i for i in t1 if i not in t2) + tuple(i for i in t2 if i not in t1)"}
{"task_id": "Mbpp/580", "completion": "def extract_even(nested_tuple):\n    \"\"\"\n    >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n    (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    if type(nested_tuple) == tuple:\n        return tuple(extract_even(item) for item in nested_tuple if type(item) == int or extract_even(item))\n    else:\n        return nested_tuple"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base, height):\n    return (base**2 + base*height)"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(list1, list2):\n    if list1 == list2:\n        return True\n    elif list1 == []:\n        return True\n    elif list2 == []:\n        return False\n    elif list1[0] == list2[0]:\n        return is_sublist(list1[1:], list2[1:])\n    else:\n        return is_sublist(list1[1:], list2)"}
{"task_id": "Mbpp/582", "completion": "def is_empty(my_dict):\n    if len(my_dict) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([catalan_number(i) * catalan_number(n - i - 1) for i in range(n)])"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(list):\n    return tuple(list)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(list):\n    return max(list) - min(list)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "completion": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i + 1)\n    return sum"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    return len(set(map(len, tuples))) == 1"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    return '.'.join([str(int(x)) for x in ip.split('.') if int(x)!= 0])"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even_index = 0\n    odd_index = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_index = i\n            break\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_index = i\n            break\n    return lst[even_index] - lst[odd_index]"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(s1,s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/596", "completion": "def tuple_size(tuple):\n    return sys.getsizeof(tuple)"}
{"task_id": "Mbpp/597", "completion": "def find_kth(a, b, k):\n    if len(a) > len(b):\n        a, b = b, a\n    if len(a) == 0:\n        return b[k-1]\n    if k == 1:\n        return min(a[0], b[0])\n    pa = min(k//2, len(a))\n    pb = k - pa\n    if a[pa-1] < b[pb-1]:\n        return find_kth(a[pa:], b, k-pa)\n    else:\n        return find_kth(a, b[pb:], k-pb)"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return num == sum"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n\nassert sum_average(10)==(55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        s (str): The string to search.\n\n    Returns:\n        str: The first repeated character in the string.\n    \"\"\"\n    # Create a set to store the characters.\n    chars = set()\n\n    # Iterate over the characters in the string.\n    for char in s:\n        # If the character is already in the set, return it.\n        if char in chars:\n            return char\n        # Otherwise, add it to the set.\n        else:\n            chars.add(char)\n\n    # If no repeated character is found, return None.\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_lucid(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(list):\n    gap = len(list)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(list) - gap):\n            if list[i] > list[i + gap]:\n                list[i], list[i + gap] = list[i + gap], list[i]\n                swapped = True\n    return list"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(string):\n    return \" \".join(string.split()[::-1])"}
{"task_id": "Mbpp/605", "completion": "def prime_num(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": "Mbpp/606", "completion": "def radian_degree(degree):\n    return degree*(3.14/180)"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    return match.group(), match.start(), match.end()\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + (n-1)*bell_Number(n-1)"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst,k):\n    return lst[:k]+lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(list_of_lists):\n    return [[list_of_lists[i][0], list_of_lists[i][1]] for i in range(len(list_of_lists))]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    sum = 0\n    for tup in tuple_list:\n        for num in tup:\n            sum += num\n    return sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tup):\n    return [sum(x)/len(x) for x in tup]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(num):\n    for i in range(num):\n        for j in range(num):\n            if i**2 + j**2 == num:\n                return True\n    return False"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(a, b):\n    return tuple(map(lambda x, y: x % y, a, b))"}
{"task_id": "Mbpp/618", "completion": "def div_list(a,b):\n    return [i/j for i,j in zip(a,b)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(string):\n    return ''.join(sorted(string, key=lambda x: x.isdigit()))"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(lst):\n    lst.sort()\n    largest = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[j] % lst[i] == 0:\n                largest = max(largest, j-i+1)\n    return largest"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    if n % 2 == 0:\n        return (list1[n//2] + list2[n//2])/2\n    else:\n        return list1[n//2]"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num**n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(string):\n    return string.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius**2 * math.sqrt(3)) / 4"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "completion": "def Split(list):\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(string):\n    return string.replace(' ', '_')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    return lst[:-len(lst) + lst.count(0)] + [0]*lst.count(0)"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, n):\n    xor_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            xor_sum += lst[i] ^ lst[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(lst):\n    \"\"\"\n    Sorts a list using the heap sort algorithm.\n    \"\"\"\n    # Create a max heap from the list\n    heapq.heapify(lst)\n    # Pop the root of the heap and append it to the sorted list\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(buy,sell):\n    if buy>sell:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(wind_velocity, temperature):\n    return round((35.74 + 0.6215*temperature - 35.75*(wind_velocity**0.16) + 0.4275*temperature*(wind_velocity**0.16)))"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    sum = 0\n    for name in names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum\n\nassert sample_nam(['sally', 'Dylan','rebecca', 'Diana', 'Joanne', 'keith'])==16"}
{"task_id": "Mbpp/640", "completion": "def remove_parenthesis(string):\n    return string[0:string.find('(')]"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n * (3 * n - 1) / 2"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples, k):\n    return [tuple(i for i in tup if i % k == 0) for tup in tuples]"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    if text.startswith('z') and text.endswith('z'):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(array, k):\n    return array[k::-1] + array[k+1:]\n\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dict):\n    tup = tup + (dict,)\n    return tup"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    # Create a list to store the averages of each path\n    averages = []\n    # Iterate over the rows of the matrix\n    for i in range(len(matrix)):\n        # Create a list to store the current path\n        current_path = []\n        # Iterate over the columns of the matrix\n        for j in range(len(matrix[i])):\n            # Add the current cell to the current path\n            current_path.append(matrix[i][j])\n            # Calculate the average of the current path\n            average = sum(current_path) / len(current_path)\n            # Add the average to the list of averages\n            averages.append(average)\n    # Return the maximum average of all paths\n    return max(averages)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(data, min_height, min_weight):\n    filtered_data = {}\n    for key, value in data.items():\n        if value[0] > min_height and value[1] > min_weight:\n            filtered_data[key] = value\n    return filtered_data"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base = base // 10\n        power -= 1\n    return sum"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(string):\n    return [string[i:j] for i, j in zip(string.find('\"') + 1, string.rfind('\"'))]"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "completion": "def sum_list(a,b):\n    return [a[i]+b[i] for i in range(len(a))]\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(num):\n    return num % 11 == 0"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    return [lst[0]] + [lst[i] for i in range(1, len(lst)) if lst[i]!= lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "completion": "def lateralsurface_cone(r,h):\n    return 3.14*r*(r+((h**2)+(r**2))**0.5)"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(string):\n    return string.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(array, number):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of the number in the array.\n    first_index = 0\n    last_index = len(array) - 1\n    while first_index < last_index:\n        mid_index = (first_index + last_index) // 2\n        if array[mid_index] < number:\n            first_index = mid_index + 1\n        else:\n            last_index = mid_index\n    # Check if the number is in the array.\n    if array[first_index] == number:\n        return first_index\n    else:\n        return None"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(list):\n    sum = 0\n    for i in range(len(list)):\n        for j in range(i,len(list)):\n            sum += list[i]*list[j]\n    return sum"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(num):\n    return num ^ (num >> 1)"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        elif arr[mid] > val:\n            right = mid - 1\n        else:\n            return mid\n    return left"}
{"task_id": "Mbpp/737", "completion": "def check_str(str):\n    return re.match(r'[aeiouAEIOU]', str)"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2 + find_Index(n - 1)"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(len(tup)-1)}\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(string):\n    if len(string) == 1:\n        return True\n    if string[0] == string[1]:\n        return all_Characters_Same(string[1:])\n    else:\n        return False"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(side):\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n\nassert area_tetrahedron(3)==15.588457268119894"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(list, n):\n    return list[n:] + list[:n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(digit in str(num) for digit in str(num))]\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/746", "completion": "def sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return radius**2 * angle / 360\n\nassert sector_area(4,45)==6.283185307179586"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(string):\n    return''.join(word for word in string.split() if word[0].isupper())"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(list_of_strings):\n    return sorted(list_of_strings, key=lambda x: int(x))\n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(list, tuple):\n    return list + tuple"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[i*2+1] or arr[i] > arr[i*2+2]:\n            return False\n    return True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "completion": "def min_k(list, k):\n    return sorted(list, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(list):\n    list.sort()\n    return list[1]"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i][::-1] == strings[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    \"\"\"\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    d = {}\n    for i in lst:\n        d[tuple(i)] = lst.count(i)\n    return d"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(string):\n    if '.' in string:\n        if string.count('.') == 1:\n            if string.split('.')[1].isdigit():\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(list):\n    if len(list) == len(set(list)):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(string):\n    return len(string)"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    return n * (n + 1) + 1"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i],lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return [i for i in li1 if i not in li2]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    return sum([i**4 for i in range(1, n*2, 2)])"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in [\"(\", \"[\", \"{\"]:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            last_open = stack.pop()\n            if last_open == \"(\":\n                if char!= \")\":\n                    return False\n            elif last_open == \"[\":\n                if char!= \"]\":\n                    return False\n            elif last_open == \"{\":\n                if char!= \"}\":\n                    return False\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "completion": "def remove_length(string, k):\n    words = string.split()\n    new_words = []\n    for word in words:\n        if len(word)!= k:\n            new_words.append(word)\n    return''.join(new_words)"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            return substring, i, i+len(substring)\n    return None\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(string):\n    sum = 0\n    for i in string:\n        sum += ord(i)\n    return chr(sum % 26 + 97)"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_lst.append([lst[i]])\n        elif lst[i] == lst[i-1]:\n            new_lst[-1].append(lst[i])\n        else:\n            new_lst.append([lst[i]])\n    return new_lst"}
{"task_id": "Mbpp/780", "completion": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds the combinations of sums with tuples in the given tuple list.\n\n    :param tuple_list: A list of tuples.\n    :return: A list of tuples that are the combinations of sums.\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum += arr[j]\n    return sum"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(l):\n    even = 1\n    odd = 1\n    for i in l:\n        if i%2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even*odd"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str.strip(\"()\").split(\",\")))"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, val):\n    if val < arr[0]:\n        return 0\n    if val > arr[-1]:\n        return len(arr)\n    for i in range(len(arr)):\n        if arr[i] > val:\n            return i"}
{"task_id": "Mbpp/787", "completion": "def text_match_three(text):\n    return text.find(\"abbb\")!= -1"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(string_list, string):\n    return tuple(string_list + [string])"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    return tup[0:3] + tup[4:]"}
{"task_id": "Mbpp/792", "completion": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(text):\n    return re.search(r\"a.*b$\", text)"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(range(l, r + 1, 2))"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    return ((n << d) | (n >> (32 - d)))\n\nassert left_rotate(16,2) == 64"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")\n\nassert remove_all_spaces('python  program')==('pythonprogram')"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a,b,c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root ** 2 == num"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(list):\n    product = 1\n    for i in list:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(list_of_lists):\n    max_sum = 0\n    max_list = []\n    for list in list_of_lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n    return max_list"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(string):\n    max_run = 0\n    current_run = 0\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(list_of_numbers):\n    for num in list_of_numbers:\n        if num % 2!= 0:\n            return num"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    if k in tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(tuple1, tuple2):\n    if len(tuple1)!= len(tuple2):\n        return False\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(string):\n    return [word for word in string.split() if len(word) >= 4]"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n**2 + n"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    for i in range(n):\n        if i < n:\n            return i"}
{"task_id": "Mbpp/90", "completion": "def len_log(list):\n    max_len = 0\n    for i in list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"}
{"task_id": "Mbpp/91", "completion": "def find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(num):\n    num = str(num)\n    for i in range(len(num)-1):\n        if num[i] == num[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "completion": "def power(a,b):\n    return a**b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(list_of_tuples):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Initialize the minimum value to the first value in the list\n    min_value = list_of_tuples[0][1]\n    # Initialize the minimum index to the first index in the list\n    min_index = 0\n    # Iterate through the list\n    for i in range(1, len(list_of_tuples)):\n        # If the second value of the tuple at index i is less than the current minimum value,\n        # update the minimum value and the minimum index\n        if list_of_tuples[i][1] < min_value:\n            min_value = list_of_tuples[i][1]\n            min_index = i\n    # Return the first value of the tuple at the minimum index\n    return list_of_tuples[min_index][0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(list_of_lists):\n    min_length = len(list_of_lists[0])\n    for i in range(len(list_of_lists)):\n        if len(list_of_lists[i]) < min_length:\n            min_length = len(list_of_lists[i])\n    return min_length"}
{"task_id": "Mbpp/8", "completion": "def square_nums(list):\n    return [x**2 for x in list]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(list_of_lists):\n    \"\"\"\n    Takes a list of lists and returns a dictionary with the frequency of each element in the flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list_of_lists:\n        flattened_list += sublist\n    return dict(Counter(flattened_list))"}
{"task_id": "Mbpp/98", "completion": "def multiply_num(num_list):\n    return sum(num_list) / len(num_list)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Reverse the string\n    n_rev = n_str[::-1]\n\n    # Check if the string is a palindrome\n    if n_str == n_rev:\n        # If the string is a palindrome, increment the integer by 1 and return it\n        return n + 1\n\n    # If the string is not a palindrome, find the next smallest palindrome\n    else:\n        # Increment the integer by 1\n        n += 1\n\n        # Convert the integer to a string\n        n_str = str(n)\n\n        # Reverse the string\n        n_rev = n_str[::-1]\n\n        # Check if the string is a palindrome\n        while n_str!= n_rev:\n            # If the string is not a palindrome, increment the integer by 1\n            n += 1\n\n            # Convert the integer to a string\n            n_str = str(n)\n\n            # Reverse the string\n            n_rev = n_str[::-1]\n\n        # Return the next smallest palindrome\n        return n"}
{"task_id": "Mbpp/101", "completion": "def kth_element(array, k):\n    return array[k-1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    camel_str = ''\n    for i in range(len(snake_str)):\n        if snake_str[i] == '_':\n            camel_str += snake_str[i+1].upper()\n        else:\n            camel_str += snake_str[i]\n    return camel_str\n\nassert snake_to_camel('python_program')=='PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(lst)"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(string):\n    if len(string) == 1:\n        return 0\n    else:\n        return len(string) - len(set(string))"}
{"task_id": "Mbpp/106", "completion": "def add_lists(list_a, tuple_b):\n    return tuple_b + tuple(list_a)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary, rotations):\n    binary = binary * 2\n    binary = binary[:rotations]\n    return binary.count('1')"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    common_elements = []\n    for element in nested_lists[0]:\n        if element in nested_lists[1]:\n            common_elements.append(element)\n    return common_elements"}
{"task_id": "Mbpp/113", "completion": "def check_integer(string):\n    try:\n        int(string)\n        return True\n    except:\n        return False"}
{"task_id": "Mbpp/115", "completion": "def empty_dit(list_of_dicts):\n    for i in list_of_dicts:\n        if i:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    return int(\"\".join(map(str,tup)))"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(list_of_lists):\n    return [tuple(float(x) for x in sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(string):\n    return string.split()"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    return string.replace(char, '', 1)"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(list_of_tuples):\n    max_product = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(len(list_of_tuples)):\n            if i!= j:\n                product = list_of_tuples[i][0] * list_of_tuples[j][1]\n                if product > max_product:\n                    max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def amicable_numbers_sum(n):\n    amicable_numbers = []\n    for i in range(1, n):\n        if i == sum(divisors(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nassert amicable_numbers_sum(999)==504"}
{"task_id": "Mbpp/124", "completion": "import math\n\ndef angle_complex(a, b):\n    return math.atan2(b.imag, a.real)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    :param binary_string: A binary string.\n    :return: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize the maximum difference to 0.\n    max_difference = 0\n\n    # Initialize the number of 0s and number of 1s to 0.\n    num_0s = 0\n    num_1s = 0\n\n    # Iterate over the binary string.\n    for i in range(len(binary_string)):\n        # If the current character is a 0, increment the number of 0s.\n        if binary_string[i] == \"0\":\n            num_0s += 1\n        # If the current character is a 1, increment the number of 1s.\n        else:\n            num_1s += 1\n\n        # Calculate the difference between the number of 0s and number of 1s.\n        difference = abs(num_0s - num_1s)\n\n        # If the difference is greater than the maximum difference, update the maximum difference.\n        if difference > max_difference:\n            max_difference = difference\n\n    return max_difference"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(a,b):\n    common_divisors = []\n    for i in range(1,a+1):\n        if a%i == 0:\n            common_divisors.append(i)\n    for j in range(1,b+1):\n        if b%j == 0:\n            common_divisors.append(j)\n    return sum(common_divisors)\n\nassert sum_common_divisors(10,15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a,b):\n    return a*b"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]\n\nassert long_words(3,\"python is a programming language\")==['python','programming','language']"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # Your code here\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Parameters\n    ----------\n    lst : list\n        A list of integers.\n\n    Returns\n    -------\n    int\n        The item with maximum frequency in the list.\n\n    \"\"\"\n    # Create a dictionary to store the frequency of each item.\n    frequency = {}\n    for item in lst:\n        if item not in frequency:\n            frequency[item] = 1\n        else:\n            frequency[item] += 1\n\n    # Find the item with maximum frequency.\n    max_frequency = max(frequency.values())\n    max_items = [item for item, freq in frequency.items() if freq == max_frequency]\n\n    # Return the item with maximum frequency.\n    return max_items[0]"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(string):\n    vowels = \"aeiou\"\n    vowels_list = []\n    for char in string:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list.reverse()\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += vowels_list.pop()\n        else:\n            new_string += char\n    return new_string"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return \"\".join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))==(\"exercises\")"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(list):\n    sum = 0\n    for i in list:\n        if i < 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "completion": "def zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count / len(arr)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1:\n            return False\n        n >>= 1\n    return True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(list_of_lists):\n    return set(sum(list_of_lists, []))"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    for i in range(len(lst)):\n        max_index = lst.index(max(lst[i:]))\n        if max_index!= i:\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n            lst = lst[::-1]\n    return lst"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "completion": "def find_lists(tup):\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    return base * height * length / 3"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return x, y\n    return None"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    sum = 0\n    for i in range(0, n//2 + 1):\n        sum += n - 2*i\n    return sum"}
{"task_id": "Mbpp/164", "completion": "def are_equivalent(a, b):\n    sum_a = 0\n    sum_b = 0\n    for i in range(1, a):\n        if a % i == 0:\n            sum_a += i\n    for i in range(1, b):\n        if b % i == 0:\n            sum_b += i\n    if sum_a == b and sum_b == a:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i].lower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(list, number):\n    count = 0\n    for i in list:\n        if i == number:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(list, start, end):\n    return sum(list[start:end])"}
