{"task_id": "Mbpp/590", "completion": "\n```python\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n/week_03/day_01/02_list_comprehension.py\n# Write a Python program to create a list by concatenating a given list which range goes from 1 to n.\n# Sample list : ['p', 'q']\n# Expected output : ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1',", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to convert polar coordinates to rectangular coordinates. Your code should satisfy the following assertion:\n```python\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\n### Response:\n```python\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n/week_03/day_01/02_list_comprehension.py\n# Write a Python program to create a list by concatenating a given list which range goes from 1 to n.\n# Sample list : ['p', 'q']\n# Expected output : ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1', 'q1', 'p2', 'q2', 'p3', 'q3']\n\n# list = ['p', 'q']\n# n = 3\n# output = ['p1',"}
