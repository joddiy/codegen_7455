{"task_id": "Mbpp/12", "completion": "\n```python\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A list of lists representing the matrix.\n\n    Returns:\n        list: A list of lists representing the sorted matrix.\n    \"\"\"\n    # Get the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the rows in the matrix according to their sums\n    sorted_rows = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_rows\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy the following assertion:\n```python\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n### Response:\n```python\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A list of lists representing the matrix.\n\n    Returns:\n        list: A list of lists representing the sorted matrix.\n    \"\"\"\n    # Get the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the rows in the matrix according to their sums\n    sorted_rows = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_rows\n```\n"}
