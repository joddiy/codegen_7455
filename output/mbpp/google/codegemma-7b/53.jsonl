{"task_id": "Mbpp/99", "completion": "\n```python\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n```\n\nThis function takes a decimal number as input and returns its binary equivalent as a string. It uses a while loop to repeatedly divide the decimal number by 2 and append the remainder to the binary string. The function returns the binary string without any leading zeros.\n\nYou can test the function by calling it with different decimal numbers. For example, calling `decimal_to_binary(8)` will return '1000', which is the binary representation of 8.\n\nNote that this function only works for positive integers. If you need to handle negative numbers or floating-point numbers, you may need to modify the code accordingly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros. Your code should satisfy the following assertion:\n```python\nassert decimal_to_binary(8) == '1000'\n```\n\n### Response:\n```python\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n```\n\nThis function takes a decimal number as input and returns its binary equivalent as a string. It uses a while loop to repeatedly divide the decimal number by 2 and append the remainder to the binary string. The function returns the binary string without any leading zeros.\n\nYou can test the function by calling it with different decimal numbers. For example, calling `decimal_to_binary(8)` will return '1000', which is the binary representation of 8.\n\nNote that this function only works for positive integers. If you need to handle negative numbers or floating-point numbers, you may need to modify the code accordingly.\n"}
