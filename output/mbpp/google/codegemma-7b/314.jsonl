{"task_id": "Mbpp/635", "completion": "\n```python\ndef heap_sort(arr):\n    # Build a max heap\n    for i in range(len(arr)//2 - 1, -1, -1):\n        heapify(arr, len(arr), i)\n    # Extract elements from the heap one by one\n    for i in range(len(arr)-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort the given list. Your code should satisfy the following assertion:\n```python\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Response:\n```python\ndef heap_sort(arr):\n    # Build a max heap\n    for i in range(len(arr)//2 - 1, -1, -1):\n        heapify(arr, len(arr), i)\n    # Extract elements from the heap one by one\n    for i in range(len(arr)-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n```\n"}
