{"task_id": "Mbpp/721", "completion": "\n```python\ndef maxAverageOfPath(matrix):\n    # Get the size of the matrix\n    N = len(matrix)\n\n    # Create a 2D array to store the maximum average of a path that ends at each cell\n    max_average = [[0] * N for _ in range(N)]\n\n    # Initialize the first row and first column of the 2D array\n    max_average[0][0] = matrix[0][0]\n    for i in range(1, N):\n        max_average[i][0] = max_average[i-1][0] + matrix[i][0]\n        max_average[0][i] = max_average[0][i-1] + matrix[0][i]\n\n    # Fill in the remaining cells of the 2D array\n    for i in range(1, N):\n        for j in range(1, N):\n            max_average[i][j] = max(max_average[i-1][j], max_average[i][j-1]) + matrix[i][j]\n\n    # Find the maximum average of a path that ends at each cell\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            avg = max_average[i][j] / (i+j+1)\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path. Your code should satisfy the following assertion:\n```python\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\n### Response:\n```python\ndef maxAverageOfPath(matrix):\n    # Get the size of the matrix\n    N = len(matrix)\n\n    # Create a 2D array to store the maximum average of a path that ends at each cell\n    max_average = [[0] * N for _ in range(N)]\n\n    # Initialize the first row and first column of the 2D array\n    max_average[0][0] = matrix[0][0]\n    for i in range(1, N):\n        max_average[i][0] = max_average[i-1][0] + matrix[i][0]\n        max_average[0][i] = max_average[0][i-1] + matrix[0][i]\n\n    # Fill in the remaining cells of the 2D array\n    for i in range(1, N):\n        for j in range(1, N):\n            max_average[i][j] = max(max_average[i-1][j], max_average[i][j-1]) + matrix[i][j]\n\n    # Find the maximum average of a path that ends at each cell\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            avg = max_average[i][j] / (i+j+1)\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n"}
