{"date": "2024-04-15 15:05", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(input_string):\n    count = 0\n    for i in range(len(input_string) - 2):\n        if input_string[i:i+3] == \"std\":\n            count += 1\n    return count\n\nassert count_occurance(\"letstdlenstdporstd\") == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\ndef text_lowercase_underscore(s):\n    if s.islower() and '_' in s:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["_abc"]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\nimport math\n\ndef perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    - side_length (float): Length of each side of the pentagon.\n\n    Returns:\n    - float: Perimeter of the pentagon.\n    \"\"\"\n    return 5 * side_length\n\nassert perimeter_pentagon(5) == 25", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(t):\n    return all(type(t[0]) == type(x) for x in t)\n\nassert check_type((5, 6, 7, 3, 5, 6) ) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4 * side\nassert square_perimeter(10) == 40", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side_length):\n    return side_length**3\n\nassert volume_cube(3)==27", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, c):\n    return s.replace(\" \", c)\n\nassert replace_blank(\"hello people\", '@') == \"hello@people\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\ndef similar_elements(list1, list2):\n    return list(set(list1) & set(list2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["DRwvS", "ITntCqEvPi", "SmJpP", "DRwvS"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"]]]}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the number of sequences to 0\n    num_sequences = 0\n    # Iterate through all possible sequences of length n\n    for seq in range(1, m+1):\n        # Check if the sequence is valid\n        if seq >= 2*m**(n-1):\n            # If the sequence is valid, add it to the number of sequences\n            num_sequences += 1\n    # Return the number of sequences\n    return num_sequences", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[50, 5]]}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple_X, element_X):\n    count = 0\n    for item in tuple_X:\n        if item == element_X:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nassert count_charac(\"python programming\") == 18\n\nprint(\"The total number of characters in the string is\", count_charac(\"python programming\"))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    for char in s2:\n        if char in s1:\n            s1 = s1.replace(char, '')\n    return s1\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Create two new arrays to hold the negative and positive elements\n    neg_arr = []\n    pos_arr = []\n\n    # Loop through the first n elements of the given array\n    for i in range(n):\n        # If the element is negative, add it to the negative array\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        # If the element is positive, add it to the positive array\n        else:\n            pos_arr.append(arr[i])\n\n    # Combine the negative and positive arrays into a single array\n    return neg_arr + pos_arr\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    return n | (n >> 1)\n\nassert even_bit_set_number(10) == 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\ndef lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a list to store the length of the longest palindromic subsequence\n    # for each substring of the given string\n    l = [0] * len(s)\n    # Iterate over the substrings of the given string\n    for i in range(len(s)):\n        # Iterate over the substrings of the given string that end at the current substring\n        for j in range(i, len(s)):\n            # If the current substring is a palindrome\n            if s[i:j+1] == s[i:j+1][::-1]:\n                # If the length of the longest palindromic subsequence for the current substring is greater than the length of the longest palindromic subsequence for the previous substring\n                if l[i] > l[j-1]:\n                    # Set the length of the longest palindromic subsequence for the current substring to the length of the longest palindromic subsequence for the previous substring\n                    l[j] = l[i]\n                # Otherwise\n                else:\n                    # Set the length of the longest palindromic subsequence for the current substring to the length of the longest palindromic subsequence for the previous substring plus 1\n                    l[j] = l[j-1] + 1\n    # Return the length of the longest palindromic subsequence for the entire given string\n    return l[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_perfect_square(n):\n    \"\"\"\n    Returns the next perfect square greater than n.\n    \"\"\"\n    # Find the next perfect square greater than n.\n    next_perfect_square = n + 1\n    while True:\n        if next_perfect_square ** 0.5 == int(next_perfect_square ** 0.5):\n            break\n        next_perfect_square += 1\n    return next_perfect_square\n\nassert next_perfect_square(35) == 36", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(lst):\n    dict = {}\n    for tup in lst:\n        if tup in dict:\n            dict[tup] += 1\n        else:\n            dict[tup] = 1\n    return dict\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\ndef larg_nnum(lst, n):\n    lst.sort()\n    return lst[-n:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nassert min_of_three(10,20,0)==0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1.5, 1.5, 1.7539550971097109]]}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n\nprint(odd_values_string('abcdef'))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\ndef insert_element(lst, elem):\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport math\n\ndef convert(complex_number):\n    real_part = complex_number.real\n    imaginary_part = complex_number.imag\n    magnitude = math.sqrt(real_part**2 + imaginary_part**2)\n    angle = math.atan2(imaginary_part, real_part)\n    return (magnitude, angle)\n\nassert convert(1) == (1.0, 0.0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\ndef max_sum(arr):\n    n = len(arr)\n    left_sum = [0] * n\n    right_sum = [0] * n\n    max_sum = 0\n\n    # Calculate the maximum sum from left to right\n    for i in range(n):\n        left_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                left_sum[i] = max(left_sum[i], left_sum[j] + arr[i])\n\n    # Calculate the maximum sum from right to left\n    for i in range(n - 1, -1, -1):\n        right_sum[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                right_sum[i] = max(right_sum[i], right_sum[j] + arr[i])\n\n    # Find the maximum sum of a bitonic subsequence\n    for i in range(n):\n        max_sum = max(max_sum, left_sum[i] + right_sum[i] - arr[i])\n\n    return max_sum\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nprint(\"Test passed!\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    # Create a set from the first array\n    set1 = set(arr1)\n    # Create a set from the second array\n    set2 = set(arr2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n    # Return the intersection list\n    return intersection_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["", "zm", null, "QkDxdG", "Xe", "ertYo", 14, "gv"], ["zm", "guWZdvsBGL", "QUGweiSK", "l", "QkDxdG", "xsQS", "ertYo", "Fvp", ""]]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    # Initialize the number of substrings to 0\n    num_substrings = 0\n\n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # Iterate over each character starting from the current character\n        for j in range(i, len(string)):\n            # Increment the number of substrings by 1\n            num_substrings += 1\n\n    # Return the number of substrings\n    return num_substrings\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6\nprint(\"Assertion passed!\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    return age*7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n\nassert swap_numbers(10,20)==(20,10)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n\nassert test_duplicate(([1,2,3,4,5]))==False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side_length):\n    return 4 * side_length**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum\nassert square_Sum(2) == 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    # Sort the tuples in descending order based on the second element\n    sorted_tuples = sorted(zip(tuple1, tuple2), key=lambda x: x[1][1], reverse=True)\n    # Create a new list to store the maximized tuples\n    maximized_tuples = []\n    # Iterate through the sorted tuples and append the maximized elements to the new list\n    for i in range(len(sorted_tuples)):\n        maximized_tuples.append((sorted_tuples[i][0][0], sorted_tuples[i][1][1]))\n    return tuple(maximized_tuples)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[23]], "plus_fail_tests": [[9]]}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\ndef count_binary_seq(n):\n    if n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) * 2 + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L.\n    Returns the resulting lists in a tuple.\n    \"\"\"\n    return lst[:L], lst[L:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    Find the n'th lucas number.\n    \"\"\"\n    # Initialize the first two lucas numbers.\n    l1 = 2\n    l2 = 1\n    # Loop through the lucas numbers.\n    for i in range(n):\n        # Calculate the next lucas number.\n        ln = l1 + l2\n        # Update the first lucas number.\n        l1 = l2\n        # Update the second lucas number.\n        l2 = ln\n    # Return the n'th lucas number.\n    return l2\n\n# Test the function.\nassert find_lucas(9) == 76", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(count_Primes_nums(5))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    return n * (3 * n - 2)\n\nassert is_num_decagonal(3) == 27", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1, side2):\n    return (side1 ** 2 + side2 ** 2) ** 0.5\nassert otherside_rightangle(7,8)==10.63014581273465", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A')==65", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a//b\n\nassert find(10,3) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\nassert get_Inv_Count([1,20,6,4,5]) == 5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\ndef find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the digits to a string and return the result\n    return int(''.join(map(str, digits)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    result = []\n    for word in words:\n        if word.startswith('p') or word.startswith('P'):\n            result.append(word)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum and the current sum\n    max_sum = 0\n    curr_sum = 0\n\n    # Iterate from the i-th element to the k-th element\n    for j in range(i, k):\n        # Add the current element to the current sum\n        curr_sum += arr[j]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Return the maximum sum\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nassert square_Sum(2) == 20", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return max(map(dict_depth, d.values())) + 1\n    else:\n        return 1\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, fmt):\n    return [fmt.format(x) for x in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 3\n        while True:\n            if is_prime(i) and is_newman_prime(i):\n                n -= 1\n                if n == 0:\n                    return i\n            i += 2\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_newman_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 2 * find_star_num(n-1) + find_star_num(n-2)\n\nassert find_star_num(3) == 37", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\ndef sum_even_and_even_index(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    max_val = None\n    for val in lst:\n        if isinstance(val, int) and (max_val is None or val > max_val):\n            max_val = val\n    return max_val", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\ndef text_match_two_three(s):\n    return s.find(\"ab\") != -1 or s.find(\"abb\") != -1 or s.find(\"abbb\") != -1\n\nassert text_match_two_three(\"ac\") == (False)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(s):\n    if len(s) < 2:\n        return \"Invalid\"\n    elif s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\nassert check_char(\"abba\") == \"Valid\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    # Convert the array to a string\n    arr_str = ''.join(map(str, arr))\n    # Repeat the array k times\n    arr_str = arr_str * k\n    # Convert the string back to an array\n    arr_str = [int(x) for x in arr_str]\n    # Find the maximum sum of a contiguous array of length n\n    max_sum = float('-inf')\n    for i in range(len(arr_str) - n + 1):\n        curr_sum = sum(arr_str[i:i+n])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nprint(\"All test cases passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\nassert maximum(5,10) == 10", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    # Find the leftmost unset bit\n    left_most_unset_bit = 1\n    while left_most_unset_bit & n != 0:\n        left_most_unset_bit <<= 1\n\n    # Set the leftmost unset bit\n    return n | left_most_unset_bit\n\nassert set_left_most_unset_bit(10) == 14", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    \"\"\"\n    Function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the aggregate for each name\n    aggregate = {}\n    # Loop through the tuples and add the second value to the aggregate for the first value\n    for name, value in tuples:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    # Find the maximum aggregate\n    max_agg = max(aggregate.values())\n    # Find the name with the maximum aggregate\n    max_name = [name for name, value in aggregate.items() if value == max_agg][0]\n    # Return the tuple with the maximum aggregate\n    return (max_name, max_agg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_len, max_list\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    for index, value in enumerate(array):\n        if value == element:\n            return (True, index)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must have the same length\")\n    return [a - b for a, b in zip(list1, list2)]\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** int(math.log(n, 2))\n\nassert highest_Power_of_2(10) == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    # convert the integer to a string\n    num_str = str(num)\n    # get the length of the string\n    num_len = len(num_str)\n    # loop through each character in the string\n    for char in num_str:\n        # convert the character to an integer\n        char_int = int(char)\n        # check if the frequency of the character is less than or equal to the digit itself\n        if num_str.count(char) > char_int:\n            return False\n    # if all the characters pass the check, return True\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nassert get_max_sum(60) == 106", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(t):\n    count = 0\n    for i in t:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    # create a dictionary to store the count of each character\n    count = {}\n    for char in string:\n        count[char] = count.get(char, 0) + 1\n    \n    # iterate through the string and return the first character with a count of 1\n    for char in string:\n        if count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return n * (3 * n - 2)\n\nassert is_octagonal(5) == 65", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(t):\n    return len(t) == len(set(t))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    if num % 5 == 0:\n        return False\n    if num % 7 == 0:\n        return False\n    if num % 11 == 0:\n        return False\n    if num % 13 == 0:\n        return False\n    if num % 17 == 0:\n        return False\n    if num % 19 == 0:\n        return False\n    if num % 23 == 0:\n        return False\n    if num % 29 == 0:\n        return False\n    if num % 31 == 0:\n        return False\n    if num % 37 == 0:\n        return False\n    if num % 41 == 0:\n        return False\n    if num % 43 == 0:\n        return False\n    if num % 47 == 0:\n        return False\n    if num % 53 == 0:\n        return False\n    if num % 59 == 0:\n        return False\n    if num % 61 == 0:\n        return False\n    if num % 67 == 0:\n        return False\n    if num % 71 == 0:\n        return False\n    if num % 73 == 0:\n        return False\n    if num % 79 == 0:\n        return False\n    if num % 83 == 0:\n        return False\n    if num % 89 == 0:\n        return False\n    if num % 97 == 0:\n        return False\n    if num % 101 == 0:\n        return False\n    if num % 103 == 0:\n        return False\n    if num % 107 == 0:\n        return False\n    if num % 109 == 0:\n        return False\n    if num % 113 == 0:\n        return False\n    if num % 127 == 0:\n        return False\n    if num % 131 == 0:\n        return False\n    if num % 137 == 0:\n        return False\n    if num % 139 == 0:\n        return False\n    if num % 149 == 0:\n        return False\n    if num % 151 == 0:\n        return False\n    if num % 157 == 0:\n        return False\n    if num % 163 == 0:\n        return False\n    if num % 167 == 0:\n        return False\n    if num % 173 == 0:\n        return False\n    if num % 179 == 0:\n        return False\n    if num % 181 == 0:\n        return False\n    if num % 191 == 0:\n        return False\n    if num % 193 == 0:\n        return False\n    if num % 197 == 0:\n        return False\n    if num % 199 == 0:\n        return False\n    if num % 211 == 0:\n        return False\n    if num % 223 == 0:\n        return False\n    if num % 227 == 0:\n        return False\n    if num % 229 == 0:\n        return False\n    if num % 233 == 0:\n        return False\n    if num % 239 == 0:\n        return False\n    if num % 241 == 0:\n        return False\n    if num % 251 == 0:\n        return False\n    if num % 257 == 0:\n        return False\n    if num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    unique_tuples = set()\n    for tup in lst:\n        unique_tuples.add(tup)\n    return len(unique_tuples)\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(tuples):\n    return [tuple[-1] for tuple in tuples]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all the even index binomial coefficients\n    for i in range(0, n, 2):\n        # Calculate the binomial coefficient\n        coeff = (n-i) // i\n        # Add the coefficient to the sum\n        sum += coeff\n    # Return the sum\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n    # Return the middle number\n    return numbers[1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    return math.pi * radius**2 * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    products = []\n    for i in range(n):\n        max1 = max(list1)\n        max2 = max(list2)\n        products.append(max1 * max2)\n        list1.remove(max1)\n        list2.remove(max2)\n    return products", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], 1]]}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    return min(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in the list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The sum of digits of all numbers in the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        for digit in str(number):\n            total += int(digit)\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n    if a*b < 0:\n        return True\n    else:\n        return False\n\nassert opposite_Signs(1,-2) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    # convert the number to a string\n    n = str(n)\n    # create a list of the digits\n    digits = list(n)\n    # sort the list in descending order\n    digits.sort(reverse=True)\n    # create a new string from the sorted list\n    new_number = ''.join(digits)\n    # convert the string back to an integer\n    new_number = int(new_number)\n    return new_number", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cone(r, h):\n    return math.pi * r**2 * h / 3\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\nprint(\"The volume of the cone is: \", volume_cone(5,12))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0]*tuples[j][0] + tuples[i][1]*tuples[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return [x[n] for x in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, lst):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrence of each element in the list\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Count the occurrence of each element in the tuple\n    for elem in tup:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Return the count of each element\n    return count_dict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n % 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    return \"-\".join(map(str, tuple))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the two largest numbers in the array\n    num1 = arr[0]\n    num2 = arr[1]\n\n    # Return the pair with the highest product\n    return (num1, num2)\n\n# Test the function\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(lst):\n    return sum([round(x) for x in lst]) * len(lst)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    return [s[-1] for s in tup]\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return -((4*a*c)/(b**2))\n\nassert parabola_directrix(5,3,2)==-198", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l, element):\n    count = 0\n    for sublist in l:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef find_max_length_element(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_month_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\ndef heap_queue_largest(nums,n):\n    # Create a heap queue\n    heap_queue = []\n    # Loop through the numbers\n    for num in nums:\n        # Add the number to the heap queue\n        heapq.heappush(heap_queue, num)\n        # If the heap queue is larger than n, pop the smallest number\n        if len(heap_queue) > n:\n            heapq.heappop(heap_queue)\n    # Return the n largest numbers in descending order\n    return heapq.nlargest(n, heap_queue)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    \"\"\"\n    Sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    positive = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n    return positive / len(arr)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nassert remove_odd(\"python\") == \"yhn\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n\nprint(cal_sum(9))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\ndef text_match_wordz(text):\n    import re\n    pattern = 'w+z'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i] < tuple2[i]:\n            result.append(0)\n        else:\n            result.append(1)\n    return tuple(result)\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return ''.join(c for c in s if c.islower())\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    # Find the first adverb\n    adverb = None\n    for i, word in enumerate(words):\n        if word.lower() in ['clearly', 'quickly', 'slowly']:\n            adverb = word\n            break\n    # Find the position of the adverb\n    if adverb:\n        position = words.index(adverb)\n    else:\n        position = None\n    # Return the adverb and its position\n    return position, words.index(adverb), adverb", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(numbers):\n    cubes = []\n    for num in numbers:\n        cubes.append(num ** 3)\n    return cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_average_of_cube(n):\n    \"\"\"\n    Finds the average of the cubes of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the cubes\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the average\n    average = sum_of_cubes / n\n\n    return average", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    result = ''\n    for num in lst:\n        result += str(num)\n    return int(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    result = []\n    for item in lst:\n        if len(item) == size:\n            result.append(item)\n    return result\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n    return tuple(result)\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return [x for x in lst if x%2!=0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum\n\nassert cube_Sum(2) == 72", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return ''.join(s.split())\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples containing two integers each.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10,20) == 200", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count\n\nassert upper_ctr('PYthon') == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\ndef neg_nos(lst):\n    \"\"\"\n    This function returns a list of negative numbers from a given list.\n    \n    Args:\n        lst (list): A list of numbers.\n    \n    Returns:\n        list: A list of negative numbers from the given list.\n    \"\"\"\n    # Create an empty list to store the negative numbers.\n    neg_lst = []\n    \n    # Iterate over the list and check if the number is negative.\n    for num in lst:\n        if num < 0:\n            # If the number is negative, add it to the negative list.\n            neg_lst.append(num)\n    \n    # Return the negative list.\n    return neg_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    \"\"\"\n    This function extracts the first element of each sublist in a list and returns a new list.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks_list):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(marks_list, key=lambda x: x[1])\n    return sorted_marks\n\n# Test the function\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(lst):\n    \"\"\"\n    Reverse each string in a given list of string values.\n    \"\"\"\n    return [s[::-1] for s in lst]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\ndef max_product(nums):\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[i]:\n                product = nums[i] * nums[j]\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,h):\n    return (a+b)/2*h", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Initialize the maximum product to the first element of the array\n    max_product = arr[0]\n    # Initialize the current product to the first element of the array\n    current_product = arr[0]\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is 0, reset the current product to 1\n        if arr[i] == 0:\n            current_product = 1\n        # If the current product is negative, multiply it by the current element and take the absolute value\n        elif current_product < 0:\n            current_product = abs(current_product * arr[i])\n        # Otherwise, multiply the current product by the current element\n        else:\n            current_product *= arr[i]\n        # If the current product is greater than the maximum product, update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n    # Return the maximum product\n    return max_product\n\n# Test the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-2, 4, -6, 8, 10, -12, 14, -16]]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\ndef find_remainder(arr, n):\n    # Initialize product to 1\n    product = 1\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Multiply the product by the current element\n        product = (product * arr[i]) % n\n    # Return the remainder of the product modulo n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(t):\n    \"\"\"\n    Returns a tuple of the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return tuple(a + b for a, b in zip(t, t[1:]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\ndef count_bidirectional(tuples):\n    \"\"\"\n    Counts the number of bidirectional tuples in a list of tuples.\n\n    Args:\n        tuples: A list of tuples.\n\n    Returns:\n        The number of bidirectional tuples.\n    \"\"\"\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1]]]]}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\nimport math\ndef surfacearea_cube(size):\n    return 6*(size**2)\nassert surfacearea_cube(5)==150", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    elif isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n    else:\n        return lst[0] + recursive_list_sum(lst[1:])\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        return [lst[0] + x for x in combinations_list(lst[1:])] + combinations_list(lst[1:])\n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    \"\"\"\n    Checks if the given list contains consecutive numbers.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()\n\nassert is_lower(\"InValid\") == \"invalid\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list1, tuple_list2):\n    # Convert the tuples to sets\n    set1 = set(map(tuple, tuple_list1))\n    set2 = set(map(tuple, tuple_list2))\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a list of tuples\n    intersection_list = list(intersection)\n\n    # Sort the tuples in the list\n    intersection_list.sort()\n\n    return intersection_list\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    if not arr:\n        return 0\n    min_val = min(arr)\n    max_val = max(arr)\n    return min_val + max_val", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old_char, new_char):\n    new_string = \"\"\n    for char in string:\n        if char == old_char:\n            new_string += new_char\n        else:\n            new_string += char\n    return new_string\n\nassert replace_char(\"polygon\", \"y\", \"l\") == \"pollgon\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\nassert pos_count([1,-2,3,-4]) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    \"\"\"\n    Removes all lowercase letters from a string.\n    \"\"\"\n    # Create an empty list to hold the uppercase letters.\n    uppercase_letters = []\n    # Loop through each character in the string.\n    for c in s:\n        # If the character is uppercase, add it to the list.\n        if c.isupper():\n            uppercase_letters.append(c)\n    # Return the string of uppercase letters.\n    return \"\".join(uppercase_letters)\n\n# Test the function with the given example.\nassert remove_lowercase(\"PYTHon\") == \"PYTH\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return int(str(num)[0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\ndef Split(lst):\n    odd_lst = []\n    for i in lst:\n        if i % 2 != 0:\n            odd_lst.append(i)\n    return odd_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\ndef digit_distance_nums(num1, num2):\n    \"\"\"Find the sum of the per-digit difference between two integers.\"\"\"\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n    # Find the length of the shorter string\n    min_len = min(len(num1_str), len(num2_str))\n    # Initialize the sum\n    sum_diff = 0\n    # Loop through the digits of the shorter string\n    for i in range(min_len):\n        # Add the difference between the digits to the sum\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n    # If the strings are different lengths, add the difference between the remaining digits to the sum\n    if len(num1_str) > len(num2_str):\n        sum_diff += abs(int(num1_str[min_len:]) - int(num2_str[min_len:]))\n    elif len(num2_str) > len(num1_str):\n        sum_diff += abs(int(num2_str[min_len:]) - int(num1_str[min_len:]))\n    # Return the sum of the differences\n    return sum_diff", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\ndef find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]^arr[j]%2 != 0:\n                count+=1\n    return count\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\nassert count_Pairs([1,2,1],3) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\ndef max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            max_sum = max(max_sum, sum(arr[i:j+1]))\n    return max_sum\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\ndef difference(n):\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_numbers = sum([x for x in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\ndef empty_list(N):\n    return [{} for _ in range(N)]\n\nassert empty_list(5) == [{}, {}, {}, {}, {}]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\ndef union_elements(tuple1, tuple2):\n    \"\"\"Find the union of the elements of two given tuples and output them in sorted order\"\"\"\n    # Convert the tuples to sets\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    # Find the union of the sets\n    set_union = set1.union(set2)\n    # Convert the set to a tuple\n    tuple_union = tuple(set_union)\n    # Sort the tuple\n    tuple_union = tuple(sorted(tuple_union))\n    return tuple_union", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves three lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # Interleave the lists\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\ndef two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\ndef toggle_string(s):\n    return \"\".join([c.upper() if c.islower() else c.lower() for c in s])\n\nassert toggle_string(\"Python\")==(\"pYTHON\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst, sublist):\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst)):\n        if lst[i] == sublist[0]:\n            for j in range(len(sublist)):\n                if lst[i+j] != sublist[j]:\n                    break\n            else:\n                return True\n    return False\n\nassert is_sublist([2,4,3,5,7],[3,7])==False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\ndef last_Digit_Factorial(n):\n    if n < 0:\n        return \"Error: Negative input\"\n    elif n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial % 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.5]]}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\nimport math\n\ndef surfacearea_cylinder(r,h):\n    return 2*math.pi*r*h+2*math.pi*r**2\n\nassert surfacearea_cylinder(10,5)==942.45", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\ndef is_Sub_Array(list1, list2):\n    if len(list1) < len(list2):\n        return False\n    for i in range(len(list1) - len(list2) + 1):\n        if list1[i:i+len(list2)] == list2:\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\ndef list_tuple(lst):\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\nimport math\n\ndef surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Args:\n        base_edge (float): The length of the base edge of the square pyramid.\n        height (float): The height of the square pyramid.\n\n    Returns:\n        float: The surface area of the square pyramid.\n    \"\"\"\n    # Calculate the slant height of the pyramid\n    slant_height = math.sqrt(base_edge**2 + height**2)\n\n    # Calculate the surface area of the base\n    base_area = base_edge**2\n\n    # Calculate the area of each side of the pyramid\n    side_area = base_edge * slant_height\n\n    # Calculate the total surface area of the pyramid\n    surface_area = base_area + 4 * side_area\n\n    return surface_area\n\n# Test the function with the given assertion\nassert surface_area(3, 4) == 33", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\ndef unique_product(lst):\n    product = 1\n    for num in set(lst):\n        product *= num\n    return product\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\ndef extract_values(s):\n    values = []\n    start = s.find('\"')\n    while start != -1:\n        end = s.find('\"', start+1)\n        if end != -1:\n            values.append(s[start+1:end])\n            start = s.find('\"', end+1)\n        else:\n            break\n    return values\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\ndef tuple_size(tuple):\n    return sys.getsizeof(tuple)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\ndef issort_list(lst):\n    return sorted(lst) == lst\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\ndef find_dissimilar(tuple1, tuple2):\n    dissimilar_elements = []\n    for element1 in tuple1:\n        if element1 not in tuple2:\n            dissimilar_elements.append(element1)\n    for element2 in tuple2:\n        if element2 not in tuple1:\n            dissimilar_elements.append(element2)\n    return tuple(dissimilar_elements)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[21, 11, 25, 26], [26, 34, 21, 36]]], "plus_fail_tests": [[[21, 11, 25, 26, 30, 35, 40], [26, 34, 21, 36, 40, 45, 50]]]}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\ndef sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string.\n    s = str(n)\n    # Initialize the sum to 0.\n    sum = 0\n    # Loop through the string, adding the digits to the sum.\n    for i in range(len(s)):\n        sum += int(s[i])\n    # Return the sum.\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1)):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\ndef split_Arr(arr, n):\n    if n >= len(arr):\n        return arr\n    else:\n        first_part = arr[:n]\n        second_part = arr[n:]\n        return second_part + first_part\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\ndef perfect_squares(start, end):\n    squares = []\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef my_dict(d):\n  return not d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\ndef split(string):\n    return list(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\ndef get_equal(tuples):\n    length = len(tuples[0])\n    for i in tuples:\n        if len(i) != length:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\ndef sum_Of_product(n):\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the binomial coefficients\n    for i in range(n):\n        # Calculate the binomial coefficient\n        coeff = 1\n        for j in range(i+1):\n            coeff *= (i-j) / (j+1)\n        # Add the product of the binomial coefficient and its index to the sum\n        sum += coeff * (i+1)\n\n    # Return the sum\n    return sum\n\nassert sum_Of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\ndef extract_even(nested_tuple):\n    \"\"\"\n    Function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_tuple = ()\n    for element in nested_tuple:\n        if type(element) is tuple:\n            even_tuple += (extract_even(element),)\n        elif element % 2 == 0:\n            even_tuple += (element,)\n    return even_tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(lst):\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    return even_num - odd_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\ndef big_diff(lst):\n    return max(lst) - min(lst)\n\nassert big_diff([1,2,3,4]) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n# Test the function\nnewList = [12, 35, 9, 56, 24]\nprint(swap_List(newList))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Make sure arr1 is the shorter array\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n\n    # Base case: if either array is empty, return the kth element from the other array\n    if n1 == 0:\n        return arr2[k-1]\n\n    # Find the midpoints of both arrays\n    mid1 = n1 // 2\n    mid2 = k - mid1 - 1\n\n    # If the kth element is in the middle of both arrays\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n\n    # If the kth element is in the first half of arr1\n    elif arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1+1:], arr2[:mid2], k-mid1-1)\n\n    # If the kth element is in the second half of arr2\n    else:\n        return find_kth(arr1[:mid1], arr2[mid2:], k-mid2-1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 1], [], 3]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip_address):\n    parts = ip_address.split(\".\")\n    for i in range(len(parts)):\n        if parts[i].startswith(\"0\"):\n            parts[i] = parts[i].lstrip(\"0\")\n    return \".\".join(parts)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\nimport operator\n\ndef expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries containing the items and their prices.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries containing the n most expensive items.\n    \"\"\"\n    # Sort the dataset by price in descending order\n    sorted_dataset = sorted(dataset, key=operator.itemgetter('price'), reverse=True)\n\n    # Return the n most expensive items\n    return sorted_dataset[:n]\n\n# Test the function with the given assertion\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\ndef min_Swaps(s1, s2):\n    # initialize the counter\n    count = 0\n    # iterate over the string\n    for i in range(len(s1)):\n        # if the characters are not equal\n        if s1[i] != s2[i]:\n            # increment the counter\n            count += 1\n    # return the counter\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["1010101010101010101010101010101010101010101010101010101010101010", "0101010101010101010101010101010101010101010101010101010101010101"]]}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\ndef reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return ' '.join(reversed_words)\n\nassert reverse_words(\"python program\") == \"program python\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\ndef armstrong_number(n):\n    # Convert the number to a string\n    n = str(n)\n\n    # Initialize the sum\n    sum = 0\n\n    # Loop through each digit in the number\n    for digit in n:\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Calculate the cube of the digit\n        cube = digit**3\n\n        # Add the cube to the sum\n        sum += cube\n\n    # Check if the sum is equal to the original number\n    if sum == int(n):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[3]]}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\ndef get_ludic(n):\n    ludic_numbers = [1]\n    current_number = 1\n    while ludic_numbers[-1] <= n:\n        current_number += 1\n        if all(current_number % i != 0 for i in range(2, current_number)):\n            ludic_numbers.append(current_number)\n    return ludic_numbers\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\ndef is_even(number):\n    return number % 2 == 0\n\nassert is_even(1) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\ndef first_repeated_char(string):\n    # Create a set to store the characters that we have seen so far\n    seen = set()\n\n    # Iterate through the string\n    for char in string:\n        # If the character is already in the set, return it\n        if char in seen:\n            return char\n\n        # Otherwise, add the character to the set\n        seen.add(char)\n\n    # If we get to this point, there are no repeated characters\n    return None\n\nassert first_repeated_char(\"abcabc\") == \"a\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\ndef remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        raise ValueError(\"k is out of range\")\n    return lst[:k] + lst[k+1:]\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [f for f in factors if f % 2 == 0]\n    return sum(even_factors)\nassert sumofFactors(18) == 26", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000003]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    gap = len(lst)\n    swaps = True\n\n    while gap > 1 or swaps:\n        gap = max(1, int(gap / 1.3))\n        swaps = False\n\n        for i in range(len(lst) - gap):\n            j = i + gap\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n                swaps = True\n\n    return lst\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\ndef merge(lst):\n    return [[i[0] for i in lst], [i[1] for i in lst]]\n\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\ndef cummulative_sum(tuples_list):\n    total = 0\n    for tuple in tuples_list:\n        total += sum(tuple)\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\nimport math\n\ndef radian_degree(angle):\n    return angle * (math.pi / 180)\n\nassert radian_degree(90)==1.5707963267948966", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\ndef max_of_nth(matrix, n):\n    return max([row[n] for row in matrix])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    for i in range(1, n):\n        if (n - i) ** 2 == i ** 2:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\ndef differ_At_One_Bit_Pos(num1, num2):\n    count = 0\n    while num1 > 0 or num2 > 0:\n        bit1 = num1 & 1\n        bit2 = num2 & 1\n        if bit1 != bit2:\n            count += 1\n        num1 >>= 1\n        num2 >>= 1\n    return count == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1, -987654320]]}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\ndef div_list(list1, list2):\n    # check if both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # create a new list to store the results\n    result = []\n    \n    # iterate over the elements of the lists and perform the division\n    for i in range(len(list1)):\n        result.append(list1[i] / list2[i])\n    \n    # return the result list\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\ndef tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    return tuple(map(lambda x, y: x % y, tuple1, tuple2))\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for k in range(n):\n            result += bell_Number(k) * bell_Number(n-k-1)\n        return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\ndef replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in a string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\ndef is_samepatterns(patterns1, patterns2):\n    if len(patterns1) != len(patterns2):\n        return False\n    for i in range(len(patterns1)):\n        if patterns1[i] != patterns2[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\ndef is_upper(string):\n    return string.upper()\n\nassert is_upper(\"person\") ==\"PERSON\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\nimport re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\ndef average_tuple(tup):\n    avg_list = []\n    for t in tup:\n        avg_list.append(sum(t) / len(t))\n    return avg_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\nimport math\n\ndef triangle_area(radius):\nif radius < 0:\nreturn None\nelse:\narea = math.pi * radius ** 2\nreturn area\n\nassert triangle_area(-1) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef nth_nums(lst, n):\n    return [i**n for i in lst]\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\ndef largest_subset(lst):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a list of all the numbers in the list\n    numbers = lst\n\n    # Find the size of the largest subset of the list\n    size = len(numbers)\n\n    # Find the size of the largest subset of the list that is divisible by every number in the list\n    size_divisible = len(numbers)\n\n    # Return the size of the largest subset\n    return size_divisible", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\ndef count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substring = string[i:j+1]\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["12233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799"]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\ndef move_num(s):\n    nums = [c for c in s if c.isdigit()]\n    return ''.join([c for c in s if not c.isdigit()]) + ''.join(nums)\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\ndef Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nassert Split([1,2,3,4,5]) == [2,4]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\ndef get_median(list1, list2, n):\n    # Sort the lists\n    list1.sort()\n    list2.sort()\n\n    # Find the middle element(s)\n    if n % 2 == 0:\n        mid1 = list1[n//2 - 1]\n        mid2 = list2[n//2 - 1]\n    else:\n        mid1 = list1[n//2]\n        mid2 = list2[n//2]\n\n    # Calculate the median\n    median = (mid1 + mid2) / 2\n\n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6]], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for k in range(n):\n            result += bell_number(k) * bell_number(n-k-1)\n        return result\n\nassert bell_number(2)==2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\ndef remove_parenthesis(string):\n    \"\"\"\n    This function removes the parenthesis and what is in between them from a string.\n    \"\"\"\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    return string\n\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\ndef wind_chill(v,t):\n    if v < 4.8 or v > 60:\n        return None\n    elif t < -50 or t > 35:\n        return None\n    else:\n        return round((13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16))\n\nassert wind_chill(120,35)==40", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\nimport re\n\ndef check_str(string):\n    if re.match(r'^[aeiou]', string):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Else"]], "plus_fail_tests": [["Anna18"]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\ndef add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nassert prime_num(13) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[999999999989]]}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\ndef reverse_Array_Upto_K(array, k):\n    for i in range(k // 2):\n        array[i], array[k-i-1] = array[k-i-1], array[i]\n    return array", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\nimport math\ndef lateralsurface_cone(r,h):\n    return math.pi*r*math.sqrt(r**2+h**2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\ndef noprofit_noloss(cost, selling_price):\n    if cost > selling_price:\n        return False\n    elif selling_price > cost:\n        return False\n    else:\n        return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\ndef find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\ndef is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    return n*(3*n-1)//2\n\nassert is_nonagonal(10) == 325", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\ndef is_decimal(s):\n    if s.isdigit():\n        return False\n    elif s.count('.')==1 and s.count(',')==0:\n        if len(s.split('.')[1])==2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nassert is_decimal('123.11')==True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["e666.86"]], "plus_fail_tests": [["1.1$"]]}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\ndef pair_xor_Sum(numbers, k):\n    \"\"\"\n    Find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # Create a list to store the xor of each pair\n    xor_list = []\n    # Iterate through the list and find the xor of each pair\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            # Find the xor of the two numbers\n            xor = numbers[i] ^ numbers[j]\n            # Add the xor to the list\n            xor_list.append(xor)\n    # Return the sum of the xor of all pairs\n    return sum(xor_list)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 11]]}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\nassert tetrahedral_number(5) == 35", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\ndef unique_Element(lst):\n    return len(set(lst)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\ndef maxAverageOfPath(matrix):\n    # Get the size of the matrix\n    N = len(matrix)\n\n    # Create a 2D array to store the maximum average of a path that ends at each cell\n    max_average = [[0] * N for _ in range(N)]\n\n    # Initialize the first row and first column of the 2D array\n    max_average[0][0] = matrix[0][0]\n    for i in range(1, N):\n        max_average[i][0] = max_average[i-1][0] + matrix[i][0]\n        max_average[0][i] = max_average[0][i-1] + matrix[0][i]\n\n    # Fill in the remaining cells of the 2D array\n    for i in range(1, N):\n        for j in range(1, N):\n            max_average[i][j] = max(max_average[i-1][j], max_average[i][j-1]) + matrix[i][j]\n\n    # Find the maximum average of a path that ends at each cell\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            avg = max_average[i][j] / (i+j+1)\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(word):\n    if word[1:-1].count(\"z\") == 1:\n        return True\n    else:\n        return False\n\nassert text_match_wordz_middle(\"pythonzabc.\") == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\ndef replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["  Jumanji The Jungle  "]]}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common.append(l1[i])\n    return common\n\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\ndef extract_quotation(s):\n    \"\"\"\n    Extracts values between quotation marks \" \" from the given string.\n    \"\"\"\n    values = []\n    start = 0\n    while True:\n        start = s.find('\"', start)\n        if start == -1:\n            break\n        end = s.find('\"', start+1)\n        if end == -1:\n            break\n        values.append(s[start+1:end])\n        start = end + 1\n    return values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef heap_sort(arr):\n    # Build a max heap\n    for i in range(len(arr)//2 - 1, -1, -1):\n        heapify(arr, len(arr), i)\n    # Extract elements from the heap one by one\n    for i in range(len(arr)-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\ndef sort_numeric_strings(strings):\n    # Convert the strings to integers\n    nums = [int(string) for string in strings]\n    # Sort the integers\n    nums.sort()\n    # Convert the integers back to strings\n    strings = [str(num) for num in nums]\n    return strings\n\n# Test the function\nstrings = ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']\nsorted_strings = sort_numeric_strings(strings)\nprint(sorted_strings)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \"\"\"\n    volume = (4/3) * math.pi * radius**3\n    return volume\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\ndef all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    else:\n        return all(c == s[0] for c in s)\n\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"abc\") == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\ndef number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\nassert number_ctr('program2bedone') == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) - jacobsthal_num(n-2)\n\nassert jacobsthal_num(5) == 11", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\ndef consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Initialize an empty list to store the non-consecutive duplicates\n    non_consecutive_duplicates = []\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # If the current element is not equal to the previous element or the element before the previous element\n        if i == 0 or lst[i] != lst[i-1] or lst[i] != lst[i-2]:\n            # Add the element to the non-consecutive duplicates list\n            non_consecutive_duplicates.append(lst[i])\n    \n    # Return the non-consecutive duplicates list\n    return non_consecutive_duplicates\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\ndef sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]\n\nassert sum_list([10,20,30], [15,25,35]) == [25,45,65]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\ndef min_k(lst, k):\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    return sorted_lst[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\ndef find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left < len(arr) and arr[left] == target:\n        return left\n    else:\n        return -1\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\ndef replace_specialchar(string):\n    # Replace spaces with a colon\n    string = string.replace(\" \", \":\")\n    # Replace commas with a colon\n    string = string.replace(\",\", \":\")\n    # Replace dots with a colon\n    string = string.replace(\".\", \":\")\n    return string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\nimport math\n\ndef area_tetrahedron(side_length):\n    # Calculate the area of the base triangle\n    base_area = (math.sqrt(3) / 4) * side_length**2\n\n    # Calculate the height of the tetrahedron\n    height = (math.sqrt(6) / 3) * side_length\n\n    # Calculate the area of the tetrahedron\n    area = 4 * base_area * height\n\n    return area\n\n# Test the function with the given input\nassert area_tetrahedron(3)==15.588457268119894", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\ndef unique_sublists(lst):\n    # create a dictionary to store the count of each sublist\n    sublist_count = {}\n    # iterate through each sublist in the input list\n    for sublist in lst:\n        # convert the sublist to a tuple, which is immutable\n        sublist_tuple = tuple(sublist)\n        # check if the sublist has already been counted\n        if sublist_tuple in sublist_count:\n            # if it has, increment the count by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # if it hasn't, add it to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n    # return the dictionary\n    return sublist_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\ndef check_none(tuple):\n    for item in tuple:\n        if item is None:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\ndef move_zero(lst):\n    zero_count = 0\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            zero_count += 1\n    for i in range(len(lst)):\n        if lst[i] != 0:\n            lst[i-zero_count] = lst[i]\n            lst[i] = 0\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, 4, 0, 0, 7, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\ndef count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\ndef filter_data(data, min_height, min_weight):\n    filtered_data = {}\n    for name, (height, weight) in data.items():\n        if height > min_height and weight > min_weight:\n            filtered_data[name] = (height, weight)\n    return filtered_data\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\ndef sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\ndef capital_words_spaces(s):\n    \"\"\"\n    This function puts spaces between words starting with capital letters in a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if i == 0 or s[i-1].islower() and s[i].isupper():\n            result += \" \"\n        result += s[i]\n    return result.strip()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\ndef toggle_middle_bits(n):\n    # Get the number of bits in the integer\n    num_bits = len(bin(n)) - 2\n\n    # Check if the number of bits is less than 3\n    if num_bits < 3:\n        raise ValueError(\"The number must have at least 3 bits.\")\n\n    # Get the mask for the bits to be toggled\n    mask = 2 ** (num_bits - 2) - 1\n\n    # Toggle the middle bits\n    n ^= mask\n\n    # Return the result\n    return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\ndef add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\ndef is_polite(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_polite(n-1) + is_polite(n-2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(word_len(\"Hadoop\"))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\nimport math\n\ndef find_min_diff(arr, n):\n    min_diff = math.inf\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\ndef second_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    # Check if the list has at least two elements\n    if len(sorted_lst) < 2:\n        return None\n    # Return the second smallest element\n    return sorted_lst[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, -0.5, 0, 2, -2, -2]]], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\ndef sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The list to calculate the sum of products for.\n\n    Returns:\n        int: The sum of products of all possible sublists of the given list.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_of_prod = 0\n\n    # Iterate over all possible sublists of the list\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            # Calculate the product of the current sublist\n            prod = 1\n            for k in range(i, j+1):\n                prod *= lst[k]\n            # Add the product to the sum\n            sum_of_prod += prod\n\n    # Return the sum of products\n    return sum_of_prod\n\n# Test the function with the given list\nprint(sum_Of_Subarray_Prod([1,2,3]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\ndef tuple_to_dict(t):\n    return dict(zip(t[::2], t[1::2]))\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\ndef left_insertion(arr, value):\n    # Set the start and end indices of the search range\n    start = 0\n    end = len(arr) - 1\n\n    # Perform a binary search to find the insertion point\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] < value:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # Return the index of the left insertion point\n    return start\n\n# Test the function with the given example\nassert left_insertion([1,2,4,5],6)==4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\ndef multiply_elements(t):\n    n = len(t)\n    result = []\n    for i in range(n-1):\n        result.append(t[i] * t[i+1])\n    return tuple(result)\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\ndef get_pairs_count(numbers, sum):\n    pairs = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                pairs += 1\n    return pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\ndef pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\nimport math\n\ndef sector_area(r, angle):\n    if angle > 360:\n        return None\n    else:\n        area = (angle/360) * math.pi * r**2\n        return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_month_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\ndef catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(n):\n            catalan += catalan_number(i) * catalan_number(n-i-1)\n        return catalan\n\nassert catalan_number(10) == 16796", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[13]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(number):\n    if number % 11 == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\ndef odd_length_sum(arr):\n    n = len(arr)\n    if n % 2 == 0:\n        return 0\n    else:\n        return sum(arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\ndef occurance_substring(string, substring):\n    if substring in string:\n        return (substring, string.index(substring), string.index(substring) + len(substring))\n    else:\n        return None\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\ndef last(arr, x):\n    n = len(arr)\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\nassert last([1,2,3],1) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\ndef Diff(list1, list2):\n    return list(set(list1) - set(list2))\n\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\ndef remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\ndef remove_length(string, k):\n    \"\"\"\n    Removes all the words with k length in the given string.\n\n    Parameters:\n    string (str): The input string.\n    k (int): The length of the words to be removed.\n\n    Returns:\n    str: The modified string with all the words of length k removed.\n    \"\"\"\n    words = string.split()\n    modified_words = [word for word in words if len(word) != k]\n    modified_string = ' '.join(modified_words)\n    return modified_string\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nprint(\"All words of length 3 are removed from the string.\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert count_divisors(10)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    res = 0\n    for i in s:\n        res = res + ord(i)\n    return chr(res % 26 + ord('a'))\n\nassert get_Char(\"abc\") == \"f\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_product *= lst[i]\n        else:\n            odd_product *= lst[i]\n    return even_product * odd_product\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and char != ')') or (top == '[' and char != ']') or (top == '{' and char != '}'):\n                return False\n    return not stack\n\nassert check_expression(\"{()}[{}]\") == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\ndef right_insertion(arr, val):\n    \"\"\"\n    Returns the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the value is not found, return the right insertion point\n    return right + 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\ndef find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\ndef new_tuple(lst, string):\n    new_tuple = tuple(lst) + (string,)\n    return new_tuple\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\ndef first_odd(lst):\n    for i in lst:\n        if i % 2 != 0:\n            return i\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\ndef pack_consecutive_duplicates(lst):\n    packed_list = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if current_sublist and lst[i] != current_sublist[-1]:\n            packed_list.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n    packed_list.append(current_sublist)\n    return packed_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\ndef freq_count(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\ndef is_product_even(lst):\n    product = 1\n    for i in lst:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n\nassert is_product_even([1,2,3])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\ndef check_K(t, k):\n    return k in t\n\nassert check_K((10, 4, 5, 6, 8), 6) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\ndef tuple_str_int(t):\n    return tuple(int(x) for x in t[1:-1].split(\", \"))\n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\ndef return_sum(d):\n    sum = 0\n    for key in d:\n        sum = sum + d[key]\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\ndef count_list(lists):\n    return len(lists)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base, power):\n    # Calculate the sum of all digits of the base to the specified power\n    result = 0\n    for i in range(power):\n        result += base ** i\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\ndef text_starta_endb(text):\n    return text.startswith('a') and text.endswith('b')", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\nimport re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function calculates the surface area of a sphere given the radius.\n    \"\"\"\n    return 4*math.pi*r**2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef newman_conway(n):\n    \"\"\"\n    This function returns the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence\n    seq = [1, 1]\n    # Loop until the length of the sequence is n\n    while len(seq) < n:\n        # Add the sum of the last two numbers in the sequence to the sequence\n        seq.append(seq[-1] + seq[-2])\n    # Return the nth number in the sequence\n    return seq[n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\ndef find_sum(lst):\n    # Create an empty set to store the non-repeated elements\n    non_repeated = set()\n    # Iterate through the list and add non-repeated elements to the set\n    for num in lst:\n        if lst.count(num) == 1:\n            non_repeated.add(num)\n    # Return the sum of the non-repeated elements\n    return sum(non_repeated)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(string):\n    return string.replace(\" \", \"\")\n\nassert remove_all_spaces('python  program')==('pythonprogram')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\ndef max_run_uppercase(s):\n    max_run = 0\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n            count = 0\n    if count > max_run:\n        max_run = count\n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\ndef left_rotate(num, d):\n    # Convert the number to a string of bits\n    bits = bin(num)[2:].zfill(32)\n    # Rotate the bits to the left by d bits\n    rotated_bits = bits[d:] + bits[:d]\n    # Convert the rotated bits back to an integer\n    rotated_num = int(rotated_bits, 2)\n    return rotated_num\n\nassert left_rotate(16,2) == 64", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\ndef is_undulating(number):\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Check if the number is undulating\n    for i in range(len(number_str) - 1):\n        if abs(int(number_str[i]) - int(number_str[i+1])) != 1:\n            return False\n\n    return True\n\n# Test the function\nassert is_undulating(1212121) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212123]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\ndef find_Index(n):\n    triangular_number = 1\n    index = 1\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index\n    return index", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(lst, substring):\n    \"\"\"\n    Returns True if the substring is present as a substring in any of the strings in the list.\n    \"\"\"\n    for s in lst:\n        if substring in s:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(num1, num2, num3):\n    if num1 == num2 == num3:\n        return 3\n    else:\n        return 0\n\nprint(test_three_equal(1,1,1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lists):\n    min_length = len(lists[0])\n    for list in lists:\n        if len(list) < min_length:\n            min_length = len(list)\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create a new dictionary\n    merged_dict = {}\n    # Merge the first two dictionaries\n    merged_dict = {**dict1, **dict2}\n    # Merge the third dictionary\n    merged_dict = {**merged_dict, **dict3}\n    # Return the merged dictionary\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_value = None\n    min_index = None\n    for i, (key, value) in enumerate(tuples):\n        if min_value is None or value < min_value:\n            min_value = value\n            min_index = i\n    return tuples[min_index][0]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]]]}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\nassert centered_hexagonal_number(10) == 271", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\ndef check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The tuples must have the same length.\")\n    for i in range(len(tuple1)):\n        if tuple1[i] <= tuple2[i]:\n            return False\n    return True\n\n# Test the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (1, 2, 3)) == True\nassert check_smaller((1, 2, 3), (1, 2, 2)) == False\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return n - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color.\n    \"\"\"\n    # Calculate the hue, saturation, and value of the color.\n    h, s, v = 0, 0, 0\n    # Calculate the hue.\n    if r == g == b:\n        h = 0\n    elif r == max(r, g, b):\n        h = (g - b) / (r - g + b - r)\n    elif g == max(r, g, b):\n        h = 2 + (b - r) / (g - r + b - g)\n    elif b == max(r, g, b):\n        h = 4 + (r - g) / (b - g + r - b)\n    # Calculate the saturation.\n    if r == g == b:\n        s = 0\n    elif r == max(r, g, b):\n        s = (r - g) / (r + g + b)\n    elif g == max(r, g, b):\n        s = (g - b) / (r + g + b)\n    elif b == max(r, g, b):\n        s = (b - r) / (r + g + b)\n    # Calculate the value.\n    v = max(r, g, b)\n    # Return the hue, saturation, and value of the color.\n    return h, s, v", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 0, 1]]}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\ndef _sum(arr):\n    total = 0\n    for i in arr:\n        total += i\n    return total\n\nassert _sum([1, 2, 3]) == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef square_nums(lst):\n    return [i**2 for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\ndef multiply_num(lst):\n    product = 1\n    for i in lst:\n        product *= i\n    return product / len(lst)\n\nimport math\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\ndef find_char_long(string):\n    # Split the string into words\n    words = string.split()\n    # Filter the words that are at least 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    return arr[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\ndef max_sum_list(lst):\n    max_sum = 0\n    max_list = []\n    for sublist in lst:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-10, -20, -30], [-40, -50, -60], [-70, -80, -90], [-100, -110, -120]]]]}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m).\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    # Recursive case\n    else:\n        return eulerian_num(n - 1, m - 1) + eulerian_num(n, m - 1)\n\nassert eulerian_num(3, 1) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    # Convert the input number to a string\n    num_str = str(num)\n    # Find the length of the string\n    num_len = len(num_str)\n    # Check if the length of the string is odd\n    if num_len % 2 == 1:\n        # Find the middle index of the string\n        mid_index = num_len // 2\n        # Find the middle digit of the string\n        mid_digit = int(num_str[mid_index])\n        # Increment the middle digit by 1\n        mid_digit += 1\n        # Check if the middle digit is greater than 9\n        if mid_digit > 9:\n            # Set the middle digit to 0\n            mid_digit = 0\n            # Check if the length of the string is greater than 1\n            if num_len > 1:\n                # Set the last digit to 0\n                last_digit = 0\n                # Check if the last digit is greater than 9\n                if last_digit > 9:\n                    # Set the last digit to 0\n                    last_digit = 0\n                    # Check if the length of the string is greater than 2\n                    if num_len > 2:\n                        # Set the second last digit to 0\n                        second_last_digit = 0\n                        # Check if the second last digit is greater than 9\n                        if second_last_digit > 9:\n                            # Set the second last digit to 0\n                            second_last_digit = 0\n                            # Check if the length of the string is greater than 3\n                            if num_len > 3:\n                                # Set the third last digit to 0\n                                third_last_digit = 0\n                                # Check if the third last digit is greater than 9\n                                if third_last_digit > 9:\n                                    # Set the third last digit to 0\n                                    third_last_digit = 0\n                                    # Check if the length of the string is greater than 4\n                                    if num_len > 4:\n                                        # Set the fourth last digit to 0\n                                        fourth_last_digit = 0\n                                        # Check if the fourth last digit is greater than 9\n                                        if fourth_last_digit > 9:\n                                            # Set the fourth last digit to 0\n                                            fourth_last_digit = 0\n                                            # Check if the length of the string is greater than 5\n                                            if num_len > 5:\n                                                # Set the fifth last digit to 0\n                                                fifth_last_digit = 0\n                                                # Check if the fifth last digit is greater than 9\n                                                if fifth_last_digit > 9:\n                                                    # Set the fifth last digit to 0\n                                                    fifth_last_digit = 0\n                                                    # Check if the length of the string is greater than 6\n                                                    if num_len > 6:\n                                                        # Set the sixth last digit to 0\n                                                        sixth_last_digit = 0\n                                                        # Check if the sixth last digit is greater than 9\n                                                        if sixth_last_digit > 9:\n                                                            # Set the sixth last digit to 0\n                                                            sixth_last_digit = 0\n                                                            # Check if the length of the string is greater than 7\n                                                            if num_len > 7:\n                                                                # Set the seventh last digit to 0\n                                                                seventh_last_digit = 0\n                                                                # Check if the seventh last digit is greater than 9\n                                                                if seventh_last_digit > 9:\n                                                                    # Set the seventh last digit to 0\n                                                                    seventh_last_digit = 0\n                                                                    # Check if the length of the string is greater than 8\n                                                                    if num_len > 8:\n                                                                        # Set the eighth last digit to 0\n                                                                        eighth_last_digit = 0\n                                                                        # Check if the eighth last digit is greater than 9", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_case):\n    camel_case = ''\n    for i, char in enumerate(snake_case):\n        if char == '_':\n            camel_case += snake_case[i+1].upper()\n        else:\n            camel_case += char\n    return camel_case\n\nassert snake_to_camel('python_program') == 'PythonProgram'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i])\n    return lst\n\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list, tuple):\n    return tuple + tuple(list)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\nassert count([True, False, True]) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return int(''.join(map(str,tup)))\nassert tuple_to_int((1,2,3))==123", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\ndef find_Rotations(string):\n    min_rotations = len(string)\n    for i in range(1, len(string)):\n        rotated_string = string[i:] + string[:i]\n        if rotated_string == string:\n            min_rotations = i\n            break\n    return min_rotations\n\nassert find_Rotations(\"aaaa\") == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\ndef find_length(string):\n    max_diff = 0\n    count = 0\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        if count > max_diff:\n            max_diff = count\n    return max_diff\n\nassert find_length(\"11000010001\") == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n\nassert string_to_list(\"python programming\")==['python','programming']", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A list of lists representing the matrix.\n\n    Returns:\n        list: A list of lists representing the sorted matrix.\n    \"\"\"\n    # Get the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the rows in the matrix according to their sums\n    sorted_rows = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_rows", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x, y):\n    return x * y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(d):\n    for i in d:\n        if i:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2], [], []]]], "plus_fail_tests": [[[[], [], [], ["", "e", "ML", "EnIODji", "not", "a", "gA"], [], [], [], [], [], [], [], []]]]}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    string = \"\"\n    for i in tup:\n        string += i\n    return string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(my_tuple):\n    count = 0\n    for item in my_tuple:\n        if isinstance(item, list):\n            count += 1\n    return count\n\nprint(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    n = len(matrix)\n    sum_diag = 0\n    sum_diag2 = 0\n    for i in range(n):\n        sum_diag += matrix[i][i]\n        sum_diag2 += matrix[i][n-i-1]\n    if sum_diag != sum_diag2:\n        return False\n    sum_col = [0] * n\n    for row in matrix:\n        sum_row = sum(row)\n        for i in range(n):\n            sum_col[i] += row[i]\n        if sum_row != sum_diag:\n            return False\n    if any(sum_col[i] != sum_diag for i in range(n)):\n        return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[4, 19, -3], [12, 7, 1], [-16, 9, -16], [12, 7, 1]]]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n*(2*n-1)\n\nassert hexagonal_num(10) == 190", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    sum_negative = 0\n    for number in numbers:\n        if number < 0:\n            sum_negative += number\n    return sum_negative\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(a, b):\n    # Find all common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Return the sum of the common divisors\n    return sum(divisors)\n\n# Test the function\nassert sum_of_common_divisors(10, 15) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\ndef search(arr):\n    # Find the element that appears only once in a sorted array\n    # Return the element\n    # If the array is empty, return None\n    if len(arr) == 0:\n        return None\n    # If the array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    # If the array has more than one element, find the element that appears only once\n    # Start with the first element\n    # If the first element is not equal to the second element, return the first element\n    # If the first element is equal to the second element, return the third element\n    # If the first element is equal to the second element, return the fourth element\n    # If the first element is equal to the second element, return the fifth element\n    # If the first element is equal to the second element, return the sixth element\n    # If the first element is equal to the second element, return the seventh element\n    # If the first element is equal to the second element, return the eighth element\n    # If the first element is equal to the second element, return the ninth element\n    # If the first element is equal to the second element, return the tenth element\n    # If the first element is equal to the second element, return the eleventh element\n    # If the first element is equal to the second element, return the twelfth element\n    # If the first element is equal to the second element, return the thirteenth element\n    # If the first element is equal to the second element, return the fourteenth element\n    # If the first element is equal to the second element, return the fifteenth element\n    # If the first element is equal to the second element, return the sixteenth element\n    # If the first element is equal to the second element, return the seventeenth element\n    # If the first element is equal to the second element, return the eighteenth element\n    # If the first element is equal to the second element, return the nineteenth element\n    # If the first element is equal to the second element, return the twentieth element\n    # If the first element is equal to the second element, return the twenty-first element\n    # If the first element is equal to the second element, return the twenty-second element\n    # If the first element is equal to the second element, return the twenty-third element\n    # If the first element is equal to the second element, return the twenty-fourth element\n    # If the first element is equal to the second element, return the twenty-fifth element\n    # If the first element is equal to the second element, return the twenty-sixth element\n    # If the first element is equal to the second element, return the twenty-seventh element\n    # If the first element is equal to the second element, return the twenty-eighth element\n    # If the first element is equal to the second element, return the twenty-ninth element\n    # If the first element is equal to the second element, return the thirtieth element\n    # If the first element is equal to the second element, return the thirty-first element\n    # If the first element is equal to the second element, return the thirty-second element\n    # If the first element is equal to the second element, return the thirty-third element\n    # If the first element is equal to the second element, return the thirty-fourth element\n    # If the first element is equal to the second element, return the thirty-fifth element\n    # If the first element is equal to the second element, return the thirty-sixth element\n    # If the first element is equal to the second element, return the thirty-seventh element\n    # If the first element is equal to the second element, return the thirty-eighth element\n    # If the first element is equal to the second element, return the thirty-ninth element\n    # If the first element is equal to the second element, return the fortieth element\n    # If the first element is equal to the second element, return the fortieth element\n    # If the first element is equal to the second element, return the fortieth element\n    # If the first element is equal to the second element, return the fortieth element\n    # If the first element is equal to the second element, return the fortieth element\n    # If the first element is equal", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\nassert long_words(3,\"python is a programming language\")==['python','programming','language']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, depth):\n    volume = base * height * depth\n    return volume\nassert find_Volume(10,8,6) == 240", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\ndef list_to_float(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            try:\n                lst[i][j] = float(lst[i][j])\n            except:\n                pass\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,c):\n    s=s.replace(c,\"\",1)\n    s=s[:-1]\n    return s\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\ndef find_solution(a, b, n):\n    # Find a solution to ax + by = n\n    x = 0\n    y = 0\n    while x <= n:\n        if a * x + b * y == n:\n            return (x, y)\n        x += 1\n        y += 1\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\ndef extract_singly(lst):\n    flattened = []\n    for item in lst:\n        if isinstance(item, tuple):\n            flattened.extend(item)\n        else:\n            flattened.append(item)\n    return flattened\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\nimport numpy as np\n\ndef remove_elements(list1, list2):\n    \"\"\"\n    Removes all elements from list1 present in list2.\n\n    Args:\n        list1: The first list.\n        list2: The second list.\n\n    Returns:\n        The modified list1.\n    \"\"\"\n    list1 = np.array(list1)\n    list2 = np.array(list2)\n    return list1[~np.isin(list1, list2)].tolist()\n\nif __name__ == '__main__':\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, "abc"], ["abc", 4.5, "xyz"]]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef zero_count(arr):\n    \"\"\"\n    Find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        arr (list): An array of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    num_zeroes = sum(1 for x in arr if x == 0)\n    num_non_zeroes = len(arr) - num_zeroes\n    return num_zeroes / num_non_zeroes\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): A list of numbers.\n        start (int): The start index of the range.\n        end (int): The end index of the range.\n\n    Returns:\n        int: The sum of numbers in the specified range.\n    \"\"\"\n    # Check if the start and end indices are valid.\n    if start < 0 or start >= len(lst) or end < 0 or end >= len(lst) or start > end:\n        raise ValueError(\"Invalid indices\")\n\n    # Calculate the sum of numbers in the specified range.\n    sum = 0\n    for i in range(start, end+1):\n        sum += lst[i]\n\n    return sum\n\n# Test the function with the given assertion.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5]]}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n.bit_length())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    common_elements = []\n    for element in nested_lists[0]:\n        if element in nested_lists[1] and element in nested_lists[2]:\n            common_elements.append(element)\n    return common_elements", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]]]}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    # Create a dictionary to store the count of characters at each position\n    char_count = {}\n    # Iterate through the string\n    for i in range(len(string)):\n        # Get the character at the current position\n        char = string[i].lower()\n        # Check if the character is a letter\n        if char.isalpha():\n            # Check if the character is in the alphabet\n            if char in \"abcdefghijklmnopqrstuvwxyz\":\n                # Check if the position is in the dictionary\n                if i in char_count:\n                    # If the position is in the dictionary, increment the count\n                    char_count[i] += 1\n                else:\n                    # If the position is not in the dictionary, add it with a count of 1\n                    char_count[i] = 1\n    # Return the sum of the counts of characters at each position\n    return sum(char_count.values())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\ndef max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n    \"\"\"\n    # Count the occurrences of each item in the list\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(lst):\n    for i in range(len(lst)):\n        max_idx = i\n        for j in range(i+1, len(lst)):\n            if lst[j] > lst[max_idx]:\n                max_idx = j\n        lst[i], lst[max_idx] = lst[max_idx], lst[i]\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\ndef frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count\n\nassert frequency([1,2,3], 4) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    max_product = 0\n    for tuple1 in tuples:\n        for tuple2 in tuples:\n            product = tuple1[0] * tuple2[1]\n            if product > max_product:\n                max_product = product\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20], [15, 2], [5, 10]]]], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\ndef find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    i = 0\n    while i*i < n:\n        i += 1\n    return i*i == n\n\nassert not is_perfect_square(10)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[9223372036854775807]]}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\ndef sum_series(n):\n    if n % 2 != 0:\n        n -= 1\n    sum = 0\n    for i in range(0, n//2 + 1):\n        sum += n - 2*i\n    return sum\n\nassert sum_series(6) == 12", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[1]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\ndef divisor(n):\n    # Initialize the counter\n    count = 0\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a divisor of n\n        if n % i == 0:\n            # Increment the counter\n            count += 1\n    # Return the number of divisors\n    return count\n\n# Test the function\nassert divisor(15) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\ndef are_equivalent(a, b):\n    # Find the divisors of a\n    divisors_a = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_a.append(i)\n\n    # Find the divisors of b\n    divisors_b = []\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors_b.append(i)\n\n    # Check if the sum of the divisors is the same\n    if sum(divisors_a) == sum(divisors_b):\n        return True\n    else:\n        return False\n\nassert are_equivalent(36, 57) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\ndef sum_in_range(l,r):\n    sum = 0\n    for i in range(l,r+1):\n        if i%2 != 0:\n            sum = sum + i\n    return sum\n\nassert sum_in_range(2,5) == 8", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\ndef get_coordinates(coordinate_tuple):\n    adjacent_coordinates = []\n    for i in range(coordinate_tuple[0] - 1, coordinate_tuple[0] + 2):\n        for j in range(coordinate_tuple[1] - 1, coordinate_tuple[1] + 2):\n            if i >= 0 and j >= 0:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += i\n    return sum_, sum_/n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100000000]]}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    \"\"\"\n    This function returns the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        j = sum_of_divisors(i)\n        if sum_of_divisors(j) == i and i != j:\n            sum += i\n    return sum\n\ndef sum_of_divisors(n):\n    \"\"\"\n    This function returns the sum of all divisors of n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\nassert amicable_numbers_sum(999) == 504", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9999]], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\nimport itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\n\nassert combinations_colors([\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}]}}