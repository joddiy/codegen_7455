{"task_id": "Mbpp/299", "completion": "\n```python\ndef max_aggregate(tuples):\n    \"\"\"\n    Function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the aggregate for each name\n    aggregate = {}\n    # Loop through the tuples and add the second value to the aggregate for the first value\n    for name, value in tuples:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    # Find the maximum aggregate\n    max_agg = max(aggregate.values())\n    # Find the name with the maximum aggregate\n    max_name = [name for name, value in aggregate.items() if value == max_agg][0]\n    # Return the tuple with the maximum aggregate\n    return (max_name, max_agg)\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to calculate the maximum aggregate from the list of tuples. Your code should satisfy the following assertion:\n```python\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\n### Response:\n```python\ndef max_aggregate(tuples):\n    \"\"\"\n    Function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the aggregate for each name\n    aggregate = {}\n    # Loop through the tuples and add the second value to the aggregate for the first value\n    for name, value in tuples:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    # Find the maximum aggregate\n    max_agg = max(aggregate.values())\n    # Find the name with the maximum aggregate\n    max_name = [name for name, value in aggregate.items() if value == max_agg][0]\n    # Return the tuple with the maximum aggregate\n    return (max_name, max_agg)\n```\n"}
