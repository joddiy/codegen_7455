{"task_id": "Mbpp/4", "completion": "\n```python\ndef heap_queue_largest(nums,n):\n    # Create a heap queue\n    heap_queue = []\n    # Loop through the numbers\n    for num in nums:\n        # Add the number to the heap queue\n        heapq.heappush(heap_queue, num)\n        # If the heap queue is larger than n, pop the smallest number\n        if len(heap_queue) > n:\n            heapq.heappop(heap_queue)\n    # Return the n largest numbers in descending order\n    return heapq.nlargest(n, heap_queue)\n```\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n```python\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order. Your code should satisfy the following assertion:\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n### Response:\n```python\ndef heap_queue_largest(nums,n):\n    # Create a heap queue\n    heap_queue = []\n    # Loop through the numbers\n    for num in nums:\n        # Add the number to the heap queue\n        heapq.heappush(heap_queue, num)\n        # If the heap queue is larger than n, pop the smallest number\n        if len(heap_queue) > n:\n            heapq.heappop(heap_queue)\n    # Return the n largest numbers in descending order\n    return heapq.nlargest(n, heap_queue)\n```\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n```python\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```"}
