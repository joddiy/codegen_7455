{"task_id": "Mbpp/758", "completion": "\n```python\ndef unique_sublists(lst):\n    # create a dictionary to store the count of each sublist\n    sublist_count = {}\n    # iterate through each sublist in the input list\n    for sublist in lst:\n        # convert the sublist to a tuple, which is immutable\n        sublist_tuple = tuple(sublist)\n        # check if the sublist has already been counted\n        if sublist_tuple in sublist_count:\n            # if it has, increment the count by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # if it hasn't, add it to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n    # return the dictionary\n    return sublist_count\n```\n\nThis code creates a dictionary called sublist_count to store the count of each sublist. It iterates through each sublist in the input list and converts it to a tuple. It then checks if the sublist has already been counted in the dictionary and, if so, increments the count by 1. If the sublist hasn't been counted, it adds it to the dictionary with a count of 1. Finally, the code returns the dictionary of sublists and their counts.\n\nYou can test the code with the given assertion:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\nThis should return True, indicating that the code works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. Your code should satisfy the following assertion:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\n### Response:\n```python\ndef unique_sublists(lst):\n    # create a dictionary to store the count of each sublist\n    sublist_count = {}\n    # iterate through each sublist in the input list\n    for sublist in lst:\n        # convert the sublist to a tuple, which is immutable\n        sublist_tuple = tuple(sublist)\n        # check if the sublist has already been counted\n        if sublist_tuple in sublist_count:\n            # if it has, increment the count by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # if it hasn't, add it to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n    # return the dictionary\n    return sublist_count\n```\n\nThis code creates a dictionary called sublist_count to store the count of each sublist. It iterates through each sublist in the input list and converts it to a tuple. It then checks if the sublist has already been counted in the dictionary and, if so, increments the count by 1. If the sublist hasn't been counted, it adds it to the dictionary with a count of 1. Finally, the code returns the dictionary of sublists and their counts.\n\nYou can test the code with the given assertion:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\nThis should return True, indicating that the code works as expected."}
