{"task_id": "Mbpp/170", "completion": "\n```python\ndef sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): A list of numbers.\n        start (int): The start index of the range.\n        end (int): The end index of the range.\n\n    Returns:\n        int: The sum of numbers in the specified range.\n    \"\"\"\n    # Check if the start and end indices are valid.\n    if start < 0 or start >= len(lst) or end < 0 or end >= len(lst) or start > end:\n        raise ValueError(\"Invalid indices\")\n\n    # Calculate the sum of numbers in the specified range.\n    sum = 0\n    for i in range(start, end+1):\n        sum += lst[i]\n\n    return sum\n\n# Test the function with the given assertion.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n```\n\nThis code defines a function called `sum_range_list` that takes a list of numbers, a start index, and an end index as input. The function first checks if the start and end indices are valid, and if not, it raises a `ValueError` exception. If the indices are valid, the function calculates the sum of numbers in the specified range by iterating over the list using a `for` loop and adding each number to the `sum` variable. Finally, the function returns the sum.\n\nThe code also includes a test case that calls the `sum_range_list` function with the given list and indices and asserts that the result is equal to 29. If the assertion fails, it means that the function is not working correctly.\n\nOverall, this code satisfies the given assertion and provides a simple and efficient solution to the problem of finding the sum of numbers in a list within a specified range.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the sum of numbers in a list within a range specified by two indices. Your code should satisfy the following assertion:\n```python\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n```\n\n### Response:\n```python\ndef sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): A list of numbers.\n        start (int): The start index of the range.\n        end (int): The end index of the range.\n\n    Returns:\n        int: The sum of numbers in the specified range.\n    \"\"\"\n    # Check if the start and end indices are valid.\n    if start < 0 or start >= len(lst) or end < 0 or end >= len(lst) or start > end:\n        raise ValueError(\"Invalid indices\")\n\n    # Calculate the sum of numbers in the specified range.\n    sum = 0\n    for i in range(start, end+1):\n        sum += lst[i]\n\n    return sum\n\n# Test the function with the given assertion.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n```\n\nThis code defines a function called `sum_range_list` that takes a list of numbers, a start index, and an end index as input. The function first checks if the start and end indices are valid, and if not, it raises a `ValueError` exception. If the indices are valid, the function calculates the sum of numbers in the specified range by iterating over the list using a `for` loop and adding each number to the `sum` variable. Finally, the function returns the sum.\n\nThe code also includes a test case that calls the `sum_range_list` function with the given list and indices and asserts that the result is equal to 29. If the assertion fails, it means that the function is not working correctly.\n\nOverall, this code satisfies the given assertion and provides a simple and efficient solution to the problem of finding the sum of numbers in a list within a specified range."}
