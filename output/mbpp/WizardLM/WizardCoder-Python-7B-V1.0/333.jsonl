{"task_id": "Mbpp/733", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef find_first_occurrence(arr, num):\r\n    \"\"\"\r\n    Find the index of the first occurrence of a given number in a sorted array.\r\n    \"\"\"\r\n    left, right = 0, len(arr) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == num:\r\n            # If the middle element is equal to the target, check if it's the first occurrence\r\n            if mid == 0 or arr[mid - 1] < num:\r\n                return mid\r\n            else:\r\n                right = mid - 1\r\n        elif arr[mid] < num:\r\n            # If the middle element is less than the target, search in the right half\r\n            left = mid + 1\r\n        else:\r\n            # If the middle element is greater than the target, search in the left half\r\n            right = mid - 1\r\n    # If the target is not found, return -1\r\n    return -1\r\n```\r\n\r\nExplanation:\r\n\r\nWe start by initializing two pointers, `left` and `right`, to the beginning and end of the array, respectively. We then repeatedly divide the array in half until we find the target element or determine that it's not in the array. If the middle element is equal to the target, we check if it's the first occurrence by comparing it with the previous element. If it's less than the previous element, then it's the first occurrence and we return the index. If it's greater than the previous element, we search in the left half. If it's less than the previous element, we search in the right half. If the target is not found, we return -1. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following assertion:\n```python\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef find_first_occurrence(arr, num):\r\n    \"\"\"\r\n    Find the index of the first occurrence of a given number in a sorted array.\r\n    \"\"\"\r\n    left, right = 0, len(arr) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == num:\r\n            # If the middle element is equal to the target, check if it's the first occurrence\r\n            if mid == 0 or arr[mid - 1] < num:\r\n                return mid\r\n            else:\r\n                right = mid - 1\r\n        elif arr[mid] < num:\r\n            # If the middle element is less than the target, search in the right half\r\n            left = mid + 1\r\n        else:\r\n            # If the middle element is greater than the target, search in the left half\r\n            right = mid - 1\r\n    # If the target is not found, return -1\r\n    return -1\r\n```\r\n\r\nExplanation:\r\n\r\nWe start by initializing two pointers, `left` and `right`, to the beginning and end of the array, respectively. We then repeatedly divide the array in half until we find the target element or determine that it's not in the array. If the middle element is equal to the target, we check if it's the first occurrence by comparing it with the previous element. If it's less than the previous element, then it's the first occurrence and we return the index. If it's greater than the previous element, we search in the left half. If it's less than the previous element, we search in the right half. If the target is not found, we return -1. "}
