{"task_id": "Mbpp/71", "completion": "Here's a Python function that sorts a list of elements using the Comb Sort algorithm:\r\n\r\n```python\r\ndef comb_sort(arr):\r\n    n = len(arr)\r\n    shrink_factor = 1.3\r\n    sorted = False\r\n    while not sorted:\r\n        sorted = True\r\n        i = 0\r\n        while i < n - 1:\r\n            if arr[i] > arr[i + 1]:\r\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\r\n                sorted = False\r\n            i += 1\r\n            gap = int(n / shrink_factor)\r\n            if gap > 1:\r\n                i = min(i + gap, n - 1)\r\n        if gap > 1:\r\n            shrink_factor = shrink_factor * 1.3\r\n            n = n - gap\r\n    return arr\r\n```\r\n\r\nThis function uses the Comb Sort algorithm to sort the elements in the list. The algorithm works by comparing adjacent elements and swapping them if they are out of order, and then shrinking the gap between the elements. The gap starts at the length of the list and is reduced by a factor of 1.3 until it is 1. The algorithm continues until the gap is 1 or the list is sorted. The function returns the sorted list. \r\n\r\nTo test the function, we can use the assertion:\r\n\r\n```python\r\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\r\n```\r\n\r\nThis will check if the function returns the expected output for the given input. If the function passes this assertion, it is correct. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n### Response:Here's a Python function that sorts a list of elements using the Comb Sort algorithm:\r\n\r\n```python\r\ndef comb_sort(arr):\r\n    n = len(arr)\r\n    shrink_factor = 1.3\r\n    sorted = False\r\n    while not sorted:\r\n        sorted = True\r\n        i = 0\r\n        while i < n - 1:\r\n            if arr[i] > arr[i + 1]:\r\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\r\n                sorted = False\r\n            i += 1\r\n            gap = int(n / shrink_factor)\r\n            if gap > 1:\r\n                i = min(i + gap, n - 1)\r\n        if gap > 1:\r\n            shrink_factor = shrink_factor * 1.3\r\n            n = n - gap\r\n    return arr\r\n```\r\n\r\nThis function uses the Comb Sort algorithm to sort the elements in the list. The algorithm works by comparing adjacent elements and swapping them if they are out of order, and then shrinking the gap between the elements. The gap starts at the length of the list and is reduced by a factor of 1.3 until it is 1. The algorithm continues until the gap is 1 or the list is sorted. The function returns the sorted list. \r\n\r\nTo test the function, we can use the assertion:\r\n\r\n```python\r\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\r\n```\r\n\r\nThis will check if the function returns the expected output for the given input. If the function passes this assertion, it is correct. "}
