{"task_id": "Mbpp/578", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef interleave_lists(list1, list2, list3):\r\n    assert len(list1) == len(list2) == len(list3)\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n```\r\n\r\nThis function takes in three lists of the same length and returns a new list that contains the elements of the input lists interleaved. It does this by iterating over the indices of the input lists and appending the elements at each index to the result list in the order 1, 2, 3, 1, 2, 3, 1, 2, 3, ..., where the first list is 1, the second list is 2, and the third list is 3. The `assert` statement checks that the input lists have the same length to ensure that the output will be of the same length as the input lists. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to interleave 3 lists of the same length into a single flat list. Your code should satisfy the following assertion:\n```python\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef interleave_lists(list1, list2, list3):\r\n    assert len(list1) == len(list2) == len(list3)\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n```\r\n\r\nThis function takes in three lists of the same length and returns a new list that contains the elements of the input lists interleaved. It does this by iterating over the indices of the input lists and appending the elements at each index to the result list in the order 1, 2, 3, 1, 2, 3, 1, 2, 3, ..., where the first list is 1, the second list is 2, and the third list is 3. The `assert` statement checks that the input lists have the same length to ensure that the output will be of the same length as the input lists. "}
