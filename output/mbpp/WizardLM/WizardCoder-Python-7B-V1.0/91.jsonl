{"task_id": "Mbpp/160", "completion": "Here's the Python code for the function:\r\n\r\n```python\r\ndef find_solution(a, b, n):\r\n    if n % a == 0:\r\n        return (n // a, 0)\r\n    elif b == 0:\r\n        return None\r\n    else:\r\n        q = n // b\r\n        r = n % b\r\n        if r == 0:\r\n            return (q, 0)\r\n        else:\r\n            x, y = find_solution(b, a, r)\r\n            if x is None:\r\n                return None\r\n            else:\r\n                return (x, y - q)\r\n```\r\n\r\nExplanation:\r\n\r\nThe function `find_solution` takes in three parameters `a`, `b`, and `n`. It first checks if `n` is divisible by `a` by checking if `n % a == 0`. If it is, it returns `(n // a, 0)` as a tuple. If not, it checks if `b` is zero. If it is, it returns `None`. Otherwise, it calculates the quotient `q` and remainder `r` of `n` divided by `b`. It then recursively calls itself with `b` and `a` swapped, and `r` as the new value of `n`. If the result is `None`, it returns `None`. Otherwise, it returns the tuple `(x, y - q)` where `x` is the result of the recursive call and `y` is the value of `y` from the previous call minus `q`. This continues until a solution is found or `b` becomes zero. If no solution is found, it returns `None`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. Your code should satisfy the following assertion:\n```python\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\n### Response:Here's the Python code for the function:\r\n\r\n```python\r\ndef find_solution(a, b, n):\r\n    if n % a == 0:\r\n        return (n // a, 0)\r\n    elif b == 0:\r\n        return None\r\n    else:\r\n        q = n // b\r\n        r = n % b\r\n        if r == 0:\r\n            return (q, 0)\r\n        else:\r\n            x, y = find_solution(b, a, r)\r\n            if x is None:\r\n                return None\r\n            else:\r\n                return (x, y - q)\r\n```\r\n\r\nExplanation:\r\n\r\nThe function `find_solution` takes in three parameters `a`, `b`, and `n`. It first checks if `n` is divisible by `a` by checking if `n % a == 0`. If it is, it returns `(n // a, 0)` as a tuple. If not, it checks if `b` is zero. If it is, it returns `None`. Otherwise, it calculates the quotient `q` and remainder `r` of `n` divided by `b`. It then recursively calls itself with `b` and `a` swapped, and `r` as the new value of `n`. If the result is `None`, it returns `None`. Otherwise, it returns the tuple `(x, y - q)` where `x` is the result of the recursive call and `y` is the value of `y` from the previous call minus `q`. This continues until a solution is found or `b` becomes zero. If no solution is found, it returns `None`. "}
