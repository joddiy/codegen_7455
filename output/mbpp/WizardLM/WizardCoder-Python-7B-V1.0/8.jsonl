{"task_id": "Mbpp/12", "completion": "Here's a possible solution to the problem:\r\n\r\n```python\r\ndef sort_matrix(matrix):\r\n    # Calculate the sum of each row and store it in a list\r\n    row_sums = [sum(row) for row in matrix]\r\n    \r\n    # Sort the rows based on their sum\r\n    sorted_rows = sorted(matrix, key=lambda row: sum(row))\r\n    \r\n    # Return the sorted matrix\r\n    return sorted_rows\r\n```\r\n\r\nThis function takes a matrix as input and returns a new matrix where the rows are sorted in ascending order based on their sum. The `sum()` function is used to calculate the sum of each row, and the `sorted()` function is used to sort the rows based on their sum. The `key` parameter is used to specify that we want to sort based on the sum of each row, not the row itself. The lambda function `lambda row: sum(row)` is used to specify that we want to sort based on the sum of each row. The `sorted()` function returns a new list of rows sorted in ascending order based on their sum. Finally, we return the sorted list of rows. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy the following assertion:\n```python\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n### Response:Here's a possible solution to the problem:\r\n\r\n```python\r\ndef sort_matrix(matrix):\r\n    # Calculate the sum of each row and store it in a list\r\n    row_sums = [sum(row) for row in matrix]\r\n    \r\n    # Sort the rows based on their sum\r\n    sorted_rows = sorted(matrix, key=lambda row: sum(row))\r\n    \r\n    # Return the sorted matrix\r\n    return sorted_rows\r\n```\r\n\r\nThis function takes a matrix as input and returns a new matrix where the rows are sorted in ascending order based on their sum. The `sum()` function is used to calculate the sum of each row, and the `sorted()` function is used to sort the rows based on their sum. The `key` parameter is used to specify that we want to sort based on the sum of each row, not the row itself. The lambda function `lambda row: sum(row)` is used to specify that we want to sort based on the sum of each row. The `sorted()` function returns a new list of rows sorted in ascending order based on their sum. Finally, we return the sorted list of rows. "}
