{"task_id": "Mbpp/280", "completion": "Here's the Python code for the function:\r\n\r\n```python\r\ndef sequential_search(arr, element):\r\n    for i in range(len(arr)):\r\n        if arr[i] == element:\r\n            return (True, i)\r\n    return (False, -1)\r\n```\r\n\r\nThis function takes in an array `arr` and an element `element`. It then iterates through the array using a for loop and checks if the current element is equal to the element we are searching for. If it is, it returns a tuple containing `True` and the index position of the element. If it is not found, it returns a tuple containing `False` and -1. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). Your code should satisfy the following assertion:\n```python\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\n### Response:Here's the Python code for the function:\r\n\r\n```python\r\ndef sequential_search(arr, element):\r\n    for i in range(len(arr)):\r\n        if arr[i] == element:\r\n            return (True, i)\r\n    return (False, -1)\r\n```\r\n\r\nThis function takes in an array `arr` and an element `element`. It then iterates through the array using a for loop and checks if the current element is equal to the element we are searching for. If it is, it returns a tuple containing `True` and the index position of the element. If it is not found, it returns a tuple containing `False` and -1. "}
