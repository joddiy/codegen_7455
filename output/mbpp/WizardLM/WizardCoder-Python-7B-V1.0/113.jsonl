{"task_id": "Mbpp/237", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef count_tuples(lst):\r\n    counts = {}\r\n    for tup in lst:\r\n        if tup in counts:\r\n            counts[tup] += 1\r\n        else:\r\n            counts[tup] = 1\r\n    return counts\r\n```\r\n\r\nThis function iterates over each tuple in the input list, and for each tuple, it checks if it's already in the dictionary `counts`. If it is, it increments the count for that tuple by 1. If not, it adds the tuple to the dictionary with a count of 1. At the end, it returns the dictionary of counts. This works because tuples are hashable, so they can be used as dictionary keys. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. Your code should satisfy the following assertion:\n```python\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef count_tuples(lst):\r\n    counts = {}\r\n    for tup in lst:\r\n        if tup in counts:\r\n            counts[tup] += 1\r\n        else:\r\n            counts[tup] = 1\r\n    return counts\r\n```\r\n\r\nThis function iterates over each tuple in the input list, and for each tuple, it checks if it's already in the dictionary `counts`. If it is, it increments the count for that tuple by 1. If not, it adds the tuple to the dictionary with a count of 1. At the end, it returns the dictionary of counts. This works because tuples are hashable, so they can be used as dictionary keys. "}
