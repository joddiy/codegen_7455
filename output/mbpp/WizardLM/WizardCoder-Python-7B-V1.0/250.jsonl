{"task_id": "Mbpp/558", "completion": "Here's the Python function to find the sum of the per-digit difference between two integers:\r\n\r\n```python\r\ndef digit_distance_nums(num1, num2):\r\n    \"\"\"\r\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\r\n    \"\"\"\r\n    # Convert the integers to strings to be able to iterate over each digit\r\n    num1_str = str(num1)\r\n    num2_str = str(num2)\r\n    \r\n    # Initialize the sum variable to store the sum of the per-digit difference\r\n    sum_diff = 0\r\n    \r\n    # Iterate over each digit in the string representation of num1\r\n    for i in range(len(num1_str)):\r\n        # Convert the digit to an integer and subtract the corresponding digit in num2\r\n        diff = int(num1_str[i]) - int(num2_str[i])\r\n        # If the difference is negative, make it positive\r\n        if diff < 0:\r\n            diff = -diff\r\n        # Add the absolute value of the difference to the sum\r\n        sum_diff += diff\r\n    \r\n    return sum_diff\r\n```\r\n\r\nWe first convert the integers to strings to be able to iterate over each digit. Then, we iterate over each digit in the string representation of num1 and subtract the corresponding digit in num2. If the difference is negative, we make it positive. Finally, we add the absolute value of the difference to the sum variable. The function returns the sum of the per-digit difference. \r\n\r\nWhen we test the function with the given assertion, it should return 1:\r\n\r\n```python\r\nassert digit_distance_nums(1,2) == 1\r\n```\r\n\r\nThis is because the per-digit difference between 1 and 2 is 1 (1 - 0 = 1). ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n### Response:Here's the Python function to find the sum of the per-digit difference between two integers:\r\n\r\n```python\r\ndef digit_distance_nums(num1, num2):\r\n    \"\"\"\r\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\r\n    \"\"\"\r\n    # Convert the integers to strings to be able to iterate over each digit\r\n    num1_str = str(num1)\r\n    num2_str = str(num2)\r\n    \r\n    # Initialize the sum variable to store the sum of the per-digit difference\r\n    sum_diff = 0\r\n    \r\n    # Iterate over each digit in the string representation of num1\r\n    for i in range(len(num1_str)):\r\n        # Convert the digit to an integer and subtract the corresponding digit in num2\r\n        diff = int(num1_str[i]) - int(num2_str[i])\r\n        # If the difference is negative, make it positive\r\n        if diff < 0:\r\n            diff = -diff\r\n        # Add the absolute value of the difference to the sum\r\n        sum_diff += diff\r\n    \r\n    return sum_diff\r\n```\r\n\r\nWe first convert the integers to strings to be able to iterate over each digit. Then, we iterate over each digit in the string representation of num1 and subtract the corresponding digit in num2. If the difference is negative, we make it positive. Finally, we add the absolute value of the difference to the sum variable. The function returns the sum of the per-digit difference. \r\n\r\nWhen we test the function with the given assertion, it should return 1:\r\n\r\n```python\r\nassert digit_distance_nums(1,2) == 1\r\n```\r\n\r\nThis is because the per-digit difference between 1 and 2 is 1 (1 - 0 = 1). "}
