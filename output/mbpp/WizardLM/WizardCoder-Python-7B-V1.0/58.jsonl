{"task_id": "Mbpp/104", "completion": "Here's one way to solve the problem:\r\n\r\n```python\r\ndef sort_sublists(lst):\r\n    \"\"\"\r\n    Sorts each sublist of strings in a given list of lists.\r\n    \"\"\"\r\n    return [sorted(sublist) for sublist in lst]\r\n```\r\n\r\nThis function uses a list comprehension to iterate over each sublist in the input list `lst`, and applies the built-in `sorted` function to each sublist to sort it in ascending order. The resulting sorted sublists are then returned as a new list. The `sorted` function sorts the sublist in ascending order by default, so we don't need to specify any arguments. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort each sublist of strings in a given list of lists. Your code should satisfy the following assertion:\n```python\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\n### Response:Here's one way to solve the problem:\r\n\r\n```python\r\ndef sort_sublists(lst):\r\n    \"\"\"\r\n    Sorts each sublist of strings in a given list of lists.\r\n    \"\"\"\r\n    return [sorted(sublist) for sublist in lst]\r\n```\r\n\r\nThis function uses a list comprehension to iterate over each sublist in the input list `lst`, and applies the built-in `sorted` function to each sublist to sort it in ascending order. The resulting sorted sublists are then returned as a new list. The `sorted` function sorts the sublist in ascending order by default, so we don't need to specify any arguments. "}
