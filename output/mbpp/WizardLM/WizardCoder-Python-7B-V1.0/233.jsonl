{"task_id": "Mbpp/463", "completion": "Here's a Python function that finds the maximum product subarray of a given array:\r\n\r\n```python\r\ndef max_subarray_product(arr):\r\n    max_product = arr[0]\r\n    min_product = arr[0]\r\n    result = arr[0]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] < 0:\r\n            max_product, min_product = min_product, max_product\r\n        max_product = max(arr[i], max_product * arr[i])\r\n        min_product = min(arr[i], min_product * arr[i])\r\n        result = max(result, max_product)\r\n    return result\r\n```\r\n\r\nExplanation:\r\n\r\nWe initialize `max_product` and `min_product` to the first element of the array, and `result` to the first element as well. We then iterate through the array, updating `max_product` and `min_product` based on the current element. If the current element is negative, we swap their values. We update `result` to be the maximum of the current `max_product` and the previous `result`. At the end of the iteration, `result` will contain the maximum product subarray.\r\n\r\nFor example, if the array is `[1, -2, -3, 0, 7, -8, -2]`, we would have:\r\n\r\n- `max_product` = `1` (initially)\r\n- `min_product` = `1` (initially)\r\n- `result` = `1` (initially)\r\n- `i = 1`: `max_product` = `-2`, `min_product` = `1`, `result` = `-2`\r\n- `i = 2`: `max_product` = `-3`, `min_product` = `-2`, `result` = `-6`\r\n- `i = 3`: `max_product` = `0`, `min_product` = `0`, `result` = `0`\r\n- `i = 4`: `max_product` = `7`, `min_product` = `0`, `result` = `7`\r\n- `i = 5`: `max_product` = `-8`, `min_product` = `0`, `result` = `7`\r\n- `i = 6`: `max_product` = `-2`, `min_product` = `-8`, `result` = `112`\r\n\r\nTherefore, the maximum product subarray is `[7, -8, -2]`, with a product of `7 * (-2) * (-8) = 112`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the maximum product subarray of the given array. Your code should satisfy the following assertion:\n```python\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\n### Response:Here's a Python function that finds the maximum product subarray of a given array:\r\n\r\n```python\r\ndef max_subarray_product(arr):\r\n    max_product = arr[0]\r\n    min_product = arr[0]\r\n    result = arr[0]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] < 0:\r\n            max_product, min_product = min_product, max_product\r\n        max_product = max(arr[i], max_product * arr[i])\r\n        min_product = min(arr[i], min_product * arr[i])\r\n        result = max(result, max_product)\r\n    return result\r\n```\r\n\r\nExplanation:\r\n\r\nWe initialize `max_product` and `min_product` to the first element of the array, and `result` to the first element as well. We then iterate through the array, updating `max_product` and `min_product` based on the current element. If the current element is negative, we swap their values. We update `result` to be the maximum of the current `max_product` and the previous `result`. At the end of the iteration, `result` will contain the maximum product subarray.\r\n\r\nFor example, if the array is `[1, -2, -3, 0, 7, -8, -2]`, we would have:\r\n\r\n- `max_product` = `1` (initially)\r\n- `min_product` = `1` (initially)\r\n- `result` = `1` (initially)\r\n- `i = 1`: `max_product` = `-2`, `min_product` = `1`, `result` = `-2`\r\n- `i = 2`: `max_product` = `-3`, `min_product` = `-2`, `result` = `-6`\r\n- `i = 3`: `max_product` = `0`, `min_product` = `0`, `result` = `0`\r\n- `i = 4`: `max_product` = `7`, `min_product` = `0`, `result` = `7`\r\n- `i = 5`: `max_product` = `-8`, `min_product` = `0`, `result` = `7`\r\n- `i = 6`: `max_product` = `-2`, `min_product` = `-8`, `result` = `112`\r\n\r\nTherefore, the maximum product subarray is `[7, -8, -2]`, with a product of `7 * (-2) * (-8) = 112`. "}
