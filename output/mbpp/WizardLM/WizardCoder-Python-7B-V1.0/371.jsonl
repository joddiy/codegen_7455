{"task_id": "Mbpp/778", "completion": "Here's the Python code to solve the problem:\r\n\r\n```python\r\ndef pack_consecutive_duplicates(lst):\r\n    result = []\r\n    sublist = []\r\n    for i in range(len(lst)):\r\n        if i == 0 or lst[i] != lst[i-1]:\r\n            sublist = [lst[i]]\r\n            result.append(sublist)\r\n        else:\r\n            sublist.append(lst[i])\r\n    return result\r\n```\r\n\r\nExplanation:\r\n\r\nWe iterate through the list `lst` and check if the current element is equal to the previous element. If it is not equal, we create a new sublist with the current element and append it to the result. If it is equal, we append the current element to the sublist. If it is the first element or if the current element is not equal to the previous element, we create a new sublist. Finally, we return the result. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following assertion:\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n### Response:Here's the Python code to solve the problem:\r\n\r\n```python\r\ndef pack_consecutive_duplicates(lst):\r\n    result = []\r\n    sublist = []\r\n    for i in range(len(lst)):\r\n        if i == 0 or lst[i] != lst[i-1]:\r\n            sublist = [lst[i]]\r\n            result.append(sublist)\r\n        else:\r\n            sublist.append(lst[i])\r\n    return result\r\n```\r\n\r\nExplanation:\r\n\r\nWe iterate through the list `lst` and check if the current element is equal to the previous element. If it is not equal, we create a new sublist with the current element and append it to the result. If it is equal, we append the current element to the sublist. If it is the first element or if the current element is not equal to the previous element, we create a new sublist. Finally, we return the result. "}
