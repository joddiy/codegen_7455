{"task_id": "Mbpp/296", "completion": "Here's the Python function to count inversions in an array:\r\n\r\n```python\r\ndef get_Inv_Count(arr):\r\n    n = len(arr)\r\n    inv_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                inv_count += 1\r\n    return inv_count\r\n```\r\n\r\nThis function takes an array as input and returns the number of inversions in the array. An inversion is defined as an element `arr[i]` that comes after `arr[j]` in the sorted array. The function iterates through the array and checks if `arr[i]` is greater than `arr[j]` for all pairs of elements `(i,j)` where `i < j`. If it is, then it increments the inversion count. The time complexity of this function is O(n^2).\r\n\r\nTo test the function, we can use the following assertion:\r\n\r\n```python\r\nassert get_Inv_Count([1,20,6,4,5]) == 5\r\n```\r\n\r\nThis assertion checks if the function returns the correct output for the given input array. If the function returns 5, it means that there are 5 inversions in the array. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to count inversions in an array. Your code should satisfy the following assertion:\n```python\nassert get_Inv_Count([1,20,6,4,5]) == 5\n```\n\n### Response:Here's the Python function to count inversions in an array:\r\n\r\n```python\r\ndef get_Inv_Count(arr):\r\n    n = len(arr)\r\n    inv_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                inv_count += 1\r\n    return inv_count\r\n```\r\n\r\nThis function takes an array as input and returns the number of inversions in the array. An inversion is defined as an element `arr[i]` that comes after `arr[j]` in the sorted array. The function iterates through the array and checks if `arr[i]` is greater than `arr[j]` for all pairs of elements `(i,j)` where `i < j`. If it is, then it increments the inversion count. The time complexity of this function is O(n^2).\r\n\r\nTo test the function, we can use the following assertion:\r\n\r\n```python\r\nassert get_Inv_Count([1,20,6,4,5]) == 5\r\n```\r\n\r\nThis assertion checks if the function returns the correct output for the given input array. If the function returns 5, it means that there are 5 inversions in the array. "}
