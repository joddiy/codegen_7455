{"task_id": "Mbpp/272", "completion": "Here's the Python code for the function:\r\n\r\n```python\r\ndef rear_extract(lst):\r\n    return [t[-1] for t in lst]\r\n```\r\n\r\nExplanation:\r\n\r\nThe `rear_extract()` function takes in a list of tuples `lst` as an argument. It uses a list comprehension to iterate over each tuple in the list and extract the last element of each tuple using the index `-1`. The resulting list of last elements is returned. The `[-1]` index refers to the last element of each tuple, which is the rear element. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Your code should satisfy the following assertion:\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\n### Response:Here's the Python code for the function:\r\n\r\n```python\r\ndef rear_extract(lst):\r\n    return [t[-1] for t in lst]\r\n```\r\n\r\nExplanation:\r\n\r\nThe `rear_extract()` function takes in a list of tuples `lst` as an argument. It uses a list comprehension to iterate over each tuple in the list and extract the last element of each tuple using the index `-1`. The resulting list of last elements is returned. The `[-1]` index refers to the last element of each tuple, which is the rear element. "}
