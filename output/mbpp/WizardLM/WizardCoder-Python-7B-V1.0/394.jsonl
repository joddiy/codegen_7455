{"task_id": "Mbpp/805", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef max_sum_list(lst):\r\n    max_sum = 0\r\n    max_lst = []\r\n    for sublist in lst:\r\n        if sum(sublist) > max_sum:\r\n            max_sum = sum(sublist)\r\n            max_lst = sublist\r\n    return max_lst\r\n```\r\n\r\nThis function iterates through each sublist in the input list `lst`, and checks if the sum of the elements in that sublist is greater than the current maximum sum found so far. If it is, it updates the maximum sum and the corresponding sublist. At the end, it returns the maximum sublist. In this case, the maximum sum is 33 (10+11+12) and the corresponding sublist is [10, 11, 12], so the function returns `[10, 11, 12]`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that returns the list in a list of lists whose sum of elements is the highest. Your code should satisfy the following assertion:\n```python\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef max_sum_list(lst):\r\n    max_sum = 0\r\n    max_lst = []\r\n    for sublist in lst:\r\n        if sum(sublist) > max_sum:\r\n            max_sum = sum(sublist)\r\n            max_lst = sublist\r\n    return max_lst\r\n```\r\n\r\nThis function iterates through each sublist in the input list `lst`, and checks if the sum of the elements in that sublist is greater than the current maximum sum found so far. If it is, it updates the maximum sum and the corresponding sublist. At the end, it returns the maximum sublist. In this case, the maximum sum is 33 (10+11+12) and the corresponding sublist is [10, 11, 12], so the function returns `[10, 11, 12]`. "}
