{"task_id": "Mbpp/730", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef consecutive_duplicates(lst):\r\n    result = []\r\n    prev = None\r\n    for item in lst:\r\n        if item != prev:\r\n            result.append(item)\r\n            prev = item\r\n    return result\r\n```\r\n\r\nThis function iterates over the input list `lst` and keeps track of the previous item seen (`prev`). If the current item is different from the previous one, it appends it to the result list. If it's the same, it skips it. At the end, it returns the result list. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to remove consecutive duplicates of a given list. Your code should satisfy the following assertion:\n```python\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef consecutive_duplicates(lst):\r\n    result = []\r\n    prev = None\r\n    for item in lst:\r\n        if item != prev:\r\n            result.append(item)\r\n            prev = item\r\n    return result\r\n```\r\n\r\nThis function iterates over the input list `lst` and keeps track of the previous item seen (`prev`). If the current item is different from the previous one, it appends it to the result list. If it's the same, it skips it. At the end, it returns the result list. "}
