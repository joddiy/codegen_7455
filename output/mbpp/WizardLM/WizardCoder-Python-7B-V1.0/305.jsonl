{"task_id": "Mbpp/623", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef nth_nums(lst, n):\r\n    return [num**n for num in lst]\r\n```\r\n\r\nThis function takes a list of numbers `lst` and a power `n` as input, and returns a new list where each number in `lst` is raised to the power of `n`. We use a list comprehension to iterate over the elements of `lst` and compute the power of each element using the `**` operator. The resulting list is returned. \r\n\r\nFor example, `nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)` would return `[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]`, since `1**2` is 1, `2**2` is 4, `3**2` is 9, and so on. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to compute the n-th power of each number in a list. Your code should satisfy the following assertion:\n```python\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef nth_nums(lst, n):\r\n    return [num**n for num in lst]\r\n```\r\n\r\nThis function takes a list of numbers `lst` and a power `n` as input, and returns a new list where each number in `lst` is raised to the power of `n`. We use a list comprehension to iterate over the elements of `lst` and compute the power of each element using the `**` operator. The resulting list is returned. \r\n\r\nFor example, `nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)` would return `[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]`, since `1**2` is 1, `2**2` is 4, `3**2` is 9, and so on. "}
