{"task_id": "Mbpp/297", "completion": "Here's the Python code to flatten a nested list:\r\n\r\n```python\r\ndef flatten_list(nested_list):\r\n    \"\"\"\r\n    Flatten a nested list into a single list\r\n    \"\"\"\r\n    flat_list = []\r\n    for item in nested_list:\r\n        if type(item) == list:\r\n            flat_list.extend(flatten_list(item))\r\n        else:\r\n            flat_list.append(item)\r\n    return flat_list\r\n```\r\n\r\nThis function takes a nested list as input and returns a flattened list. It uses recursion to traverse through the nested list and append each item to the flat_list. If an item is itself a list, it calls the flatten_list function on that item to flatten it as well. This continues until all the items in the nested list are appended to the flat_list. Finally, the function returns the flat_list. \r\n\r\nTo test the function, we can use the following code:\r\n\r\n```python\r\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\r\n```\r\n\r\nThis will return True if the flattened list is as expected. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to flatten a given nested list structure. Your code should satisfy the following assertion:\n```python\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\n### Response:Here's the Python code to flatten a nested list:\r\n\r\n```python\r\ndef flatten_list(nested_list):\r\n    \"\"\"\r\n    Flatten a nested list into a single list\r\n    \"\"\"\r\n    flat_list = []\r\n    for item in nested_list:\r\n        if type(item) == list:\r\n            flat_list.extend(flatten_list(item))\r\n        else:\r\n            flat_list.append(item)\r\n    return flat_list\r\n```\r\n\r\nThis function takes a nested list as input and returns a flattened list. It uses recursion to traverse through the nested list and append each item to the flat_list. If an item is itself a list, it calls the flatten_list function on that item to flatten it as well. This continues until all the items in the nested list are appended to the flat_list. Finally, the function returns the flat_list. \r\n\r\nTo test the function, we can use the following code:\r\n\r\n```python\r\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\r\n```\r\n\r\nThis will return True if the flattened list is as expected. "}
