{"task_id": "Mbpp/389", "completion": "Here's a Python function that finds the n'th Lucas number:\r\n\r\n```python\r\ndef find_lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)\r\n```\r\n\r\nThis function uses recursion to calculate the n'th Lucas number. The base cases are when n is 0 or 1, in which case the function returns 2 and 1 respectively. For all other values of n, it adds the (n-1)th and (n-2)th Lucas numbers together to get the nth Lucas number. This works because the Lucas numbers are defined as follows:\r\n\r\n- The first two Lucas numbers are 2 and 1.\r\n- The nth Lucas number is the sum of the (n-1)th and (n-2)th Lucas numbers.\r\n\r\nSo, for example, the 3rd Lucas number is 2 + 1 = 3, the 4th Lucas number is 3 + 2 = 5, and so on. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the n'th lucas number. Your code should satisfy the following assertion:\n```python\nassert find_lucas(9) == 76\n```\n\n### Response:Here's a Python function that finds the n'th Lucas number:\r\n\r\n```python\r\ndef find_lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)\r\n```\r\n\r\nThis function uses recursion to calculate the n'th Lucas number. The base cases are when n is 0 or 1, in which case the function returns 2 and 1 respectively. For all other values of n, it adds the (n-1)th and (n-2)th Lucas numbers together to get the nth Lucas number. This works because the Lucas numbers are defined as follows:\r\n\r\n- The first two Lucas numbers are 2 and 1.\r\n- The nth Lucas number is the sum of the (n-1)th and (n-2)th Lucas numbers.\r\n\r\nSo, for example, the 3rd Lucas number is 2 + 1 = 3, the 4th Lucas number is 3 + 2 = 5, and so on. "}
