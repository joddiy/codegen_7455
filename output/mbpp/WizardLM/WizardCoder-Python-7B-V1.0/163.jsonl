{"task_id": "Mbpp/299", "completion": "Here's the Python code to solve the problem:\r\n\r\n```python\r\ndef max_aggregate(lst):\r\n    max_name = ''\r\n    max_score = 0\r\n    for name, score in lst:\r\n        if score > max_score:\r\n            max_name = name\r\n            max_score = score\r\n        elif score == max_score and name < max_name:\r\n            max_name = name\r\n    return (max_name, max_score)\r\n\r\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\r\n```\r\n\r\nExplanation:\r\n\r\nThe function `max_aggregate` takes a list of tuples as input and returns a tuple containing the name and the maximum score. We initialize the maximum score to 0 and the maximum name to an empty string. We iterate over each tuple in the list and check if the score is greater than the current maximum score. If it is, we update the maximum score and the maximum name. If the score is equal to the current maximum score, we check if the name is less than the current maximum name. If it is, we update the maximum name. Finally, we return the maximum name and score as a tuple. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to calculate the maximum aggregate from the list of tuples. Your code should satisfy the following assertion:\n```python\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\n### Response:Here's the Python code to solve the problem:\r\n\r\n```python\r\ndef max_aggregate(lst):\r\n    max_name = ''\r\n    max_score = 0\r\n    for name, score in lst:\r\n        if score > max_score:\r\n            max_name = name\r\n            max_score = score\r\n        elif score == max_score and name < max_name:\r\n            max_name = name\r\n    return (max_name, max_score)\r\n\r\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\r\n```\r\n\r\nExplanation:\r\n\r\nThe function `max_aggregate` takes a list of tuples as input and returns a tuple containing the name and the maximum score. We initialize the maximum score to 0 and the maximum name to an empty string. We iterate over each tuple in the list and check if the score is greater than the current maximum score. If it is, we update the maximum score and the maximum name. If the score is equal to the current maximum score, we check if the name is less than the current maximum name. If it is, we update the maximum name. Finally, we return the maximum name and score as a tuple. "}
