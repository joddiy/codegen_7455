{"task_id": "Mbpp/438", "completion": "Here's a possible solution to the problem:\r\n\r\n```python\r\ndef count_bidirectional(lst):\r\n    count = 0\r\n    seen = set()\r\n    for pair in lst:\r\n        if pair[::-1] in seen:\r\n            count += 1\r\n        else:\r\n            seen.add(pair)\r\n    return count\r\n```\r\n\r\nThis function takes a list of tuples as input and iterates over each tuple in the list. For each tuple, it checks if its reverse (i.e. `(6, 5)` becomes `(5, 6)`) is already in the `seen` set. If it is, it means that the reverse of the tuple has already been seen, which means that the pair is bidirectional. If not, it adds the tuple to the set. The function returns the count of bidirectional pairs found. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to count bidirectional tuple pairs. Your code should satisfy the following assertion:\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n### Response:Here's a possible solution to the problem:\r\n\r\n```python\r\ndef count_bidirectional(lst):\r\n    count = 0\r\n    seen = set()\r\n    for pair in lst:\r\n        if pair[::-1] in seen:\r\n            count += 1\r\n        else:\r\n            seen.add(pair)\r\n    return count\r\n```\r\n\r\nThis function takes a list of tuples as input and iterates over each tuple in the list. For each tuple, it checks if its reverse (i.e. `(6, 5)` becomes `(5, 6)`) is already in the `seen` set. If it is, it means that the reverse of the tuple has already been seen, which means that the pair is bidirectional. If not, it adds the tuple to the set. The function returns the count of bidirectional pairs found. "}
