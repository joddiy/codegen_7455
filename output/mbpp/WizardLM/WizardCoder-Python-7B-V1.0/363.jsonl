{"task_id": "Mbpp/767", "completion": "Here's the Python function to count the number of pairs whose sum is equal to 'sum':\r\n\r\n```python\r\ndef get_pairs_count(numbers, sum):\r\n    count = 0\r\n    for i in range(len(numbers)):\r\n        for j in range(i+1, len(numbers)):\r\n            if numbers[i] + numbers[j] == sum:\r\n                count += 1\r\n    return count\r\n```\r\n\r\nThis function takes a list of numbers and a sum as input. It initializes a count variable to 0 and then iterates through the list using two nested loops. For each pair of numbers, it checks if their sum is equal to the given sum. If it is, it increments the count variable. Finally, it returns the count. The outer loop starts from the first element and goes up to the second last element, and the inner loop starts from the next element to avoid counting the same pair twice. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,. Your code should satisfy the following assertion:\n```python\nassert get_pairs_count([1,1,1,1],2) == 6\n```\n\n### Response:Here's the Python function to count the number of pairs whose sum is equal to 'sum':\r\n\r\n```python\r\ndef get_pairs_count(numbers, sum):\r\n    count = 0\r\n    for i in range(len(numbers)):\r\n        for j in range(i+1, len(numbers)):\r\n            if numbers[i] + numbers[j] == sum:\r\n                count += 1\r\n    return count\r\n```\r\n\r\nThis function takes a list of numbers and a sum as input. It initializes a count variable to 0 and then iterates through the list using two nested loops. For each pair of numbers, it checks if their sum is equal to the given sum. If it is, it increments the count variable. Finally, it returns the count. The outer loop starts from the first element and goes up to the second last element, and the inner loop starts from the next element to avoid counting the same pair twice. "}
