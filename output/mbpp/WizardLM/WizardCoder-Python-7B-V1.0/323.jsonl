{"task_id": "Mbpp/721", "completion": "Here's a Python script that solves the problem:\r\n\r\n```python\r\ndef maxAverageOfPath(matrix):\r\n    n = len(matrix)\r\n    dp = [[0] * n for _ in range(n)]\r\n    dp[0][0] = matrix[0][0]\r\n    for i in range(1, n):\r\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\r\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\r\n    for i in range(1, n):\r\n        for j in range(1, n):\r\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\r\n    return dp[n-1][n-1] / (n-1)\r\n\r\n# Test the function with the given example\r\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\r\n```\r\n\r\nExplanation:\r\n\r\nWe use dynamic programming to solve this problem. We create a 2D array `dp` of size `n x n` to store the maximum cost of the path that ends at each cell. We initialize the top-left cell with the cost of that cell itself. Then, we fill the first row and first column of `dp` using the values of the first row and first column of the given matrix. Finally, we fill the rest of the `dp` array using the following recurrence relation:\r\n\r\n```\r\ndp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\r\n```\r\n\r\nThis means that we take the maximum cost of the path that ends at the cell above and the cell to the left of the current cell and add the cost of the current cell to it. This is because we can either move right or down to reach the current cell.\r\n\r\nFinally, we return the maximum cost of the path that ends at the bottom-right cell, which is `dp[n-1][n-1]`, and divide it by the total number of cells visited in the path, which is `n-1` since we don't count the bottom-right cell.\r\n\r\nNote that we don't need to store the number of cells visited in the path, since it is always `n-1`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path. Your code should satisfy the following assertion:\n```python\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\n### Response:Here's a Python script that solves the problem:\r\n\r\n```python\r\ndef maxAverageOfPath(matrix):\r\n    n = len(matrix)\r\n    dp = [[0] * n for _ in range(n)]\r\n    dp[0][0] = matrix[0][0]\r\n    for i in range(1, n):\r\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\r\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\r\n    for i in range(1, n):\r\n        for j in range(1, n):\r\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\r\n    return dp[n-1][n-1] / (n-1)\r\n\r\n# Test the function with the given example\r\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\r\n```\r\n\r\nExplanation:\r\n\r\nWe use dynamic programming to solve this problem. We create a 2D array `dp` of size `n x n` to store the maximum cost of the path that ends at each cell. We initialize the top-left cell with the cost of that cell itself. Then, we fill the first row and first column of `dp` using the values of the first row and first column of the given matrix. Finally, we fill the rest of the `dp` array using the following recurrence relation:\r\n\r\n```\r\ndp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\r\n```\r\n\r\nThis means that we take the maximum cost of the path that ends at the cell above and the cell to the left of the current cell and add the cost of the current cell to it. This is because we can either move right or down to reach the current cell.\r\n\r\nFinally, we return the maximum cost of the path that ends at the bottom-right cell, which is `dp[n-1][n-1]`, and divide it by the total number of cells visited in the path, which is `n-1` since we don't count the bottom-right cell.\r\n\r\nNote that we don't need to store the number of cells visited in the path, since it is always `n-1`. "}
