{"task_id": "Mbpp/394", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef check_distinct(tup):\r\n    return len(tup) == len(set(tup))\r\n```\r\n\r\nThis function takes a tuple `tup` as input and returns `True` if it contains no duplicates, and `False` otherwise. It does this by comparing the length of the tuple to the length of a set created from the tuple. If the length of the set is the same as the length of the original tuple, then there are no duplicates, and the function returns `True`. Otherwise, there are duplicates, and the function returns `False`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to check if given tuple contains no duplicates. Your code should satisfy the following assertion:\n```python\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef check_distinct(tup):\r\n    return len(tup) == len(set(tup))\r\n```\r\n\r\nThis function takes a tuple `tup` as input and returns `True` if it contains no duplicates, and `False` otherwise. It does this by comparing the length of the tuple to the length of a set created from the tuple. If the length of the set is the same as the length of the original tuple, then there are no duplicates, and the function returns `True`. Otherwise, there are duplicates, and the function returns `False`. "}
