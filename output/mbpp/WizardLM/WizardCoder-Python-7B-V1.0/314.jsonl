{"task_id": "Mbpp/635", "completion": "Here's a Python script that sorts the given list using the Heap Sort algorithm:\r\n\r\n```python\r\ndef heap_sort(arr):\r\n    n = len(arr)\r\n    for i in range(n//2 - 1, -1, -1):\r\n        heapify(arr, n, i)\r\n    for i in range(n-1, 0, -1):\r\n        arr[0], arr[i] = arr[i], arr[0]\r\n        heapify(arr, i, 0)\r\n    return arr\r\n\r\ndef heapify(arr, n, i):\r\n    largest = i\r\n    left = 2*i + 1\r\n    right = 2*i + 2\r\n    if left < n and arr[left] > arr[largest]:\r\n        largest = left\r\n    if right < n and arr[right] > arr[largest]:\r\n        largest = right\r\n    if largest != i:\r\n        arr[i], arr[largest] = arr[largest], arr[i]\r\n        heapify(arr, n, largest)\r\n\r\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n\r\nThe `heap_sort()` function takes in a list `arr` and first builds a max heap by calling the `heapify()` function on each non-leaf node of the heap. Then, it swaps the root element with the last element of the heap and calls `heapify()` on the new root to maintain the heap property. This process is repeated `n-1` times, where `n` is the length of the list. Finally, the sorted list is returned. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort the given list. Your code should satisfy the following assertion:\n```python\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Response:Here's a Python script that sorts the given list using the Heap Sort algorithm:\r\n\r\n```python\r\ndef heap_sort(arr):\r\n    n = len(arr)\r\n    for i in range(n//2 - 1, -1, -1):\r\n        heapify(arr, n, i)\r\n    for i in range(n-1, 0, -1):\r\n        arr[0], arr[i] = arr[i], arr[0]\r\n        heapify(arr, i, 0)\r\n    return arr\r\n\r\ndef heapify(arr, n, i):\r\n    largest = i\r\n    left = 2*i + 1\r\n    right = 2*i + 2\r\n    if left < n and arr[left] > arr[largest]:\r\n        largest = left\r\n    if right < n and arr[right] > arr[largest]:\r\n        largest = right\r\n    if largest != i:\r\n        arr[i], arr[largest] = arr[largest], arr[i]\r\n        heapify(arr, n, largest)\r\n\r\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n\r\nThe `heap_sort()` function takes in a list `arr` and first builds a max heap by calling the `heapify()` function on each non-leaf node of the heap. Then, it swaps the root element with the last element of the heap and calls `heapify()` on the new root to maintain the heap property. This process is repeated `n-1` times, where `n` is the length of the list. Finally, the sorted list is returned. "}
