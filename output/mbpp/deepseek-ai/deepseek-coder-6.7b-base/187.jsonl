{"task_id": "Mbpp/407", "completion": "\n\n```python\ndef rearrange_bigger(number):\n    # Convert the number to a list of digits\n    digits = list(str(number))\n\n    # Find the first digit from the right that is smaller than the digit to its right\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number is already the biggest possible\n        return number\n\n    # Find the smallest digit to the right of the pivot that is greater than the pivot\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    j -= 1\n\n    # Swap the pivot and the smallest digit to the right of the pivot\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of the pivot\n    digits[i + 1:] = digits[i + 1:][::-1]\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))\n```\n\nThis function takes a positive integer as input and returns the next bigger number that can be formed by rearranging the digits of the input. It does this by finding the first digit from the right that is smaller than the digit to its right, and then finding the smallest digit to the right of the pivot that is greater than the pivot. It then swaps the pivot and the smallest digit to the right of the pivot, and finally reverses the digits to the right of the pivot. If no such number can be formed, the function returns the input number itself.\n\n\n### Testing:\n\n```python\nassert rearrange_bigger(12) == 21\nassert rearrange_bigger(513) == 531\nassert rearrange_bigger(2017) == 2071\nassert rearrange_bigger(4321) == 4321\nassert rearrange_bigger(123456789) == 123456798\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n### Response:\n\n```python\ndef rearrange_bigger(number):\n    # Convert the number to a list of digits\n    digits = list(str(number))\n\n    # Find the first digit from the right that is smaller than the digit to its right\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number is already the biggest possible\n        return number\n\n    # Find the smallest digit to the right of the pivot that is greater than the pivot\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    j -= 1\n\n    # Swap the pivot and the smallest digit to the right of the pivot\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of the pivot\n    digits[i + 1:] = digits[i + 1:][::-1]\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))\n```\n\nThis function takes a positive integer as input and returns the next bigger number that can be formed by rearranging the digits of the input. It does this by finding the first digit from the right that is smaller than the digit to its right, and then finding the smallest digit to the right of the pivot that is greater than the pivot. It then swaps the pivot and the smallest digit to the right of the pivot, and finally reverses the digits to the right of the pivot. If no such number can be formed, the function returns the input number itself.\n\n\n### Testing:\n\n```python\nassert rearrange_bigger(12) == 21\nassert rearrange_bigger(513) == 531\nassert rearrange_bigger(2017) == 2071\nassert rearrange_bigger(4321) == 4321\nassert rearrange_bigger(123456789) == 123456798\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
