{"task_id": "Mbpp/801", "completion": "\n```python\ndef test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n```\n\n### Explanation:\nThe function `test_three_equal` takes three integers as input and returns an integer. The function first checks if all three integers are equal. If they are, it returns 3. If only two of the integers are equal, it returns 2. If none of the integers are equal, it returns 0.\n\n### Testing:\nTo test the function, we can use the `assert` statement to check that the function returns the expected result for different input values. For example:\n```python\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(1,2,3) == 0\nassert test_three_equal(1,1,2) == 2\n```\n\n### Conclusion:\nThe function `test_three_equal` takes three integers as input and returns an integer. It checks if all three integers are equal, if only two of the integers are equal, or if none of the integers are equal. The function is written in Python and can be tested using the `assert` statement.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to count the number of equal numbers from three given integers. Your code should satisfy the following assertion:\n```python\nassert test_three_equal(1,1,1) == 3\n```\n\n### Response:\n```python\ndef test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n```\n\n### Explanation:\nThe function `test_three_equal` takes three integers as input and returns an integer. The function first checks if all three integers are equal. If they are, it returns 3. If only two of the integers are equal, it returns 2. If none of the integers are equal, it returns 0.\n\n### Testing:\nTo test the function, we can use the `assert` statement to check that the function returns the expected result for different input values. For example:\n```python\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(1,2,3) == 0\nassert test_three_equal(1,1,2) == 2\n```\n\n### Conclusion:\nThe function `test_three_equal` takes three integers as input and returns an integer. It checks if all three integers are equal, if only two of the integers are equal, or if none of the integers are equal. The function is written in Python and can be tested using the `assert` statement.\n"}
