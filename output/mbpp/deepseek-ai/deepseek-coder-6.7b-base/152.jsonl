{"task_id": "Mbpp/284", "completion": "\n\n```python\ndef check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n```\n\n### Explanation:\n\nThe function `check_element` takes in a list and an element as input parameters. It iterates over each item in the list using a for loop. For each item, it checks whether it is equal to the given element using the `==` operator. If the item is not equal to the element, the function returns `False`. If the loop completes without returning `False`, the function returns `True`.\n\nThe assertion `assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False` checks whether the function returns `False` when given a list of colors and the element \"blue\". If the assertion passes, it means that the function correctly identifies that all items in the list are not equal to \"blue\".\n\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element. Your code should satisfy the following assertion:\n```python\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\n### Response:\n\n```python\ndef check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n```\n\n### Explanation:\n\nThe function `check_element` takes in a list and an element as input parameters. It iterates over each item in the list using a for loop. For each item, it checks whether it is equal to the given element using the `==` operator. If the item is not equal to the element, the function returns `False`. If the loop completes without returning `False`, the function returns `True`.\n\nThe assertion `assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False` checks whether the function returns `False` when given a list of colors and the element \"blue\". If the assertion passes, it means that the function correctly identifies that all items in the list are not equal to \"blue\".\n\n"}
