{"task_id": "Mbpp/58", "completion": "\n\n```python\ndef opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n```\n\n### Explanation:\n\nThe function `opposite_Signs` takes two integers `x` and `y` as input and returns `True` if they have opposite signs, and `False` otherwise.\n\nThe function uses an `if` statement to check if `x` is positive and `y` is negative, or if `x` is negative and `y` is positive. If either of these conditions is true, the function returns `True`. Otherwise, it returns `False`.\n\nThe assertion `assert opposite_Signs(1,-2) == True` checks if the function returns `True` when given the inputs `1` and `-2`. If the assertion passes, the function is correct.\n\n\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to check whether the given two integers have opposite sign or not. Your code should satisfy the following assertion:\n```python\nassert opposite_Signs(1,-2) == True\n```\n\n### Response:\n\n```python\ndef opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n```\n\n### Explanation:\n\nThe function `opposite_Signs` takes two integers `x` and `y` as input and returns `True` if they have opposite signs, and `False` otherwise.\n\nThe function uses an `if` statement to check if `x` is positive and `y` is negative, or if `x` is negative and `y` is positive. If either of these conditions is true, the function returns `True`. Otherwise, it returns `False`.\n\nThe assertion `assert opposite_Signs(1,-2) == True` checks if the function returns `True` when given the inputs `1` and `-2`. If the assertion passes, the function is correct.\n\n\n"}
