{"task_id": "Mbpp/558", "completion": "\n\n```python\ndef digit_distance_nums(num1, num2):\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(num1), str(num2)))\n```\n\n### Explanation:\n\nThe function `digit_distance_nums` takes two integers `num1` and `num2` as input and returns the sum of the absolute difference between each digit of `num1` and `num2`.\n\nThe function uses a list comprehension to iterate over the digits of `num1` and `num2` simultaneously using the `zip` function. The `abs` function is used to get the absolute value of the difference between each digit. The `sum` function is used to add up the absolute differences.\n\nThe assertion statement checks if the function returns the correct result for the given input.\n\n\n### Test Cases:\n\n```python\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(12,23) == 3\nassert digit_distance_nums(123,234) == 3\nassert digit_distance_nums(1234,2345) == 4\nassert digit_distance_nums(12345,23456) == 5\nassert digit_distance_nums(123456,234567) == 6\nassert digit_distance_nums(1234567,2345678) == 7\nassert digit_distance_nums(12345678,23456789) == 8\nassert digit_distance_nums(123456789,234567890) == 9\nassert digit_distance_nums(1234567890,2345678901) == 10\nassert digit_distance_nums(12345678901,23456789012) == 11\nassert digit_distance_nums(123456789012,234567890123) == 12\nassert digit_distance_nums(1234567890123,2345678901234) == 13\nassert digit_distance_nums(12345678901234,23456789012345) == 14\nassert digit_distance_nums(123456789012345,234567890123456) == 15\nassert digit_distance_nums(1234567890123456,2345678901234567) == 16\nassert digit_distance_nums(12345678901234567,23456789012345678) == 17\nassert digit_distance_nums(123456789012345678,234567890123456789) == 18\nassert digit_distance_nums(1234567890123456789,2345678901234567890) == 19\nassert digit_distance_nums(12345678901234567890,23456789012345678901) == 20\nassert digit_distance_nums(123456789012345678901,2345678", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n### Response:\n\n```python\ndef digit_distance_nums(num1, num2):\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(num1), str(num2)))\n```\n\n### Explanation:\n\nThe function `digit_distance_nums` takes two integers `num1` and `num2` as input and returns the sum of the absolute difference between each digit of `num1` and `num2`.\n\nThe function uses a list comprehension to iterate over the digits of `num1` and `num2` simultaneously using the `zip` function. The `abs` function is used to get the absolute value of the difference between each digit. The `sum` function is used to add up the absolute differences.\n\nThe assertion statement checks if the function returns the correct result for the given input.\n\n\n### Test Cases:\n\n```python\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(12,23) == 3\nassert digit_distance_nums(123,234) == 3\nassert digit_distance_nums(1234,2345) == 4\nassert digit_distance_nums(12345,23456) == 5\nassert digit_distance_nums(123456,234567) == 6\nassert digit_distance_nums(1234567,2345678) == 7\nassert digit_distance_nums(12345678,23456789) == 8\nassert digit_distance_nums(123456789,234567890) == 9\nassert digit_distance_nums(1234567890,2345678901) == 10\nassert digit_distance_nums(12345678901,23456789012) == 11\nassert digit_distance_nums(123456789012,234567890123) == 12\nassert digit_distance_nums(1234567890123,2345678901234) == 13\nassert digit_distance_nums(12345678901234,23456789012345) == 14\nassert digit_distance_nums(123456789012345,234567890123456) == 15\nassert digit_distance_nums(1234567890123456,2345678901234567) == 16\nassert digit_distance_nums(12345678901234567,23456789012345678) == 17\nassert digit_distance_nums(123456789012345678,234567890123456789) == 18\nassert digit_distance_nums(1234567890123456789,2345678901234567890) == 19\nassert digit_distance_nums(12345678901234567890,23456789012345678901) == 20\nassert digit_distance_nums(123456789012345678901,2345678"}
