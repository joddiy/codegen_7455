{"task_id": "Mbpp/476", "completion": "\n\n```python\ndef big_sum(arr):\n    arr.sort()\n    return arr[0] + arr[-1]\n```\n\n### Explanation:\n\nThe function `big_sum` takes an array `arr` as input and sorts it in ascending order. It then returns the sum of the first and last elements of the sorted array.\n\n### Testing:\n\nThe function is tested using the `assert` statement. The assertion checks if the function returns the correct sum of the largest and smallest value in the array `[1,2,3]`. If the assertion passes, the function is working as expected.\n\n### Conclusion:\n\nThe function `big_sum` is a simple function that takes an array as input and returns the sum of the largest and smallest value in the array. It can be used to find the sum of the largest and smallest value in a given array.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the sum of the largest and smallest value in a given array. Your code should satisfy the following assertion:\n```python\nassert big_sum([1,2,3]) == 4\n```\n\n### Response:\n\n```python\ndef big_sum(arr):\n    arr.sort()\n    return arr[0] + arr[-1]\n```\n\n### Explanation:\n\nThe function `big_sum` takes an array `arr` as input and sorts it in ascending order. It then returns the sum of the first and last elements of the sorted array.\n\n### Testing:\n\nThe function is tested using the `assert` statement. The assertion checks if the function returns the correct sum of the largest and smallest value in the array `[1,2,3]`. If the assertion passes, the function is working as expected.\n\n### Conclusion:\n\nThe function `big_sum` is a simple function that takes an array as input and returns the sum of the largest and smallest value in the array. It can be used to find the sum of the largest and smallest value in a given array.\n"}
