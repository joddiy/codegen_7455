{"task_id": "Mbpp/296", "completion": "\n\n```python\ndef get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```\n\n### Explanation:\n\nThe function `get_Inv_Count` takes an array `arr` as input and returns the number of inversions in the array. An inversion is defined as a pair of elements `(i, j)` such that `i < j` and `arr[i] > arr[j]`.\n\nThe function iterates through the array using two nested loops. The outer loop iterates over the indices `i` from `0` to `len(arr) - 1`. The inner loop iterates over the indices `j` from `i+1` to `len(arr) - 1`. For each pair of indices `(i, j)`, the function checks if `arr[i] > arr[j]`. If this condition is true, it increments the `inv_count` variable by 1.\n\nFinally, the function returns the value of `inv_count`.\n\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to count inversions in an array. Your code should satisfy the following assertion:\n```python\nassert get_Inv_Count([1,20,6,4,5]) == 5\n```\n\n### Response:\n\n```python\ndef get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```\n\n### Explanation:\n\nThe function `get_Inv_Count` takes an array `arr` as input and returns the number of inversions in the array. An inversion is defined as a pair of elements `(i, j)` such that `i < j` and `arr[i] > arr[j]`.\n\nThe function iterates through the array using two nested loops. The outer loop iterates over the indices `i` from `0` to `len(arr) - 1`. The inner loop iterates over the indices `j` from `i+1` to `len(arr) - 1`. For each pair of indices `(i, j)`, the function checks if `arr[i] > arr[j]`. If this condition is true, it increments the `inv_count` variable by 1.\n\nFinally, the function returns the value of `inv_count`.\n\n"}
