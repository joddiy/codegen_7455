{"task_id": "Mbpp/733", "completion": "\n```python\ndef find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n\nThis function uses binary search to find the first occurrence of the target number in the sorted array. It starts by setting the left and right pointers to the beginning and end of the array, respectively. It then enters a loop that continues until the left pointer is greater than the right pointer. In each iteration of the loop, it calculates the middle index of the current search range and compares the value at that index to the target number. If the value is equal to the target, it checks if it is the first occurrence of the target by comparing it to the value at the previous index. If it is the first occurrence, it returns the index. If it is not the first occurrence, it updates the right pointer to the previous index and continues the search. If the value at the middle index is less than the target, it updates the left pointer to the index after the middle index and continues the search. If the value at the middle index is greater than the target, it updates the right pointer to the index before the middle index and continues the search. If the target is not found in the array, the function returns -1.\n\n### Testing:\n```python\nimport unittest\n\nclass TestFindFirstOccurrence(unittest.TestCase):\n    def test_find_first_occurrence(self):\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6), 4)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8), 6)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9), 7)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nThis code defines a class that inherits from unittest.TestCase and defines a method that tests the find_first_occurrence function. The test_find_first_occurrence method calls the find_first_occurrence function with different input arrays and target numbers and compares the result to the expected output using the assertEqual method. If the result is not equal to the expected output, the test fails.\n\n### Conclusion:\nThis code defines a function that finds the index of the first occurrence of a given number in a sorted array using binary search. It also defines a test class that tests the find_first_occurrence function using unittest.TestCase. The test class includes a method that tests the function with different input arrays and target numbers and compares the result to the expected output. If the result is not equal to the expected output, the test fails.\n\n### References:\n- [Binary Search](https://en.wikipedia.org/wiki/Binary_search)\n- [Python unittest](https://docs.python.org/", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following assertion:\n```python\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n### Response:\n```python\ndef find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n\nThis function uses binary search to find the first occurrence of the target number in the sorted array. It starts by setting the left and right pointers to the beginning and end of the array, respectively. It then enters a loop that continues until the left pointer is greater than the right pointer. In each iteration of the loop, it calculates the middle index of the current search range and compares the value at that index to the target number. If the value is equal to the target, it checks if it is the first occurrence of the target by comparing it to the value at the previous index. If it is the first occurrence, it returns the index. If it is not the first occurrence, it updates the right pointer to the previous index and continues the search. If the value at the middle index is less than the target, it updates the left pointer to the index after the middle index and continues the search. If the value at the middle index is greater than the target, it updates the right pointer to the index before the middle index and continues the search. If the target is not found in the array, the function returns -1.\n\n### Testing:\n```python\nimport unittest\n\nclass TestFindFirstOccurrence(unittest.TestCase):\n    def test_find_first_occurrence(self):\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6), 4)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8), 6)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9), 7)\n        self.assertEqual(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nThis code defines a class that inherits from unittest.TestCase and defines a method that tests the find_first_occurrence function. The test_find_first_occurrence method calls the find_first_occurrence function with different input arrays and target numbers and compares the result to the expected output using the assertEqual method. If the result is not equal to the expected output, the test fails.\n\n### Conclusion:\nThis code defines a function that finds the index of the first occurrence of a given number in a sorted array using binary search. It also defines a test class that tests the find_first_occurrence function using unittest.TestCase. The test class includes a method that tests the function with different input arrays and target numbers and compares the result to the expected output. If the result is not equal to the expected output, the test fails.\n\n### References:\n- [Binary Search](https://en.wikipedia.org/wiki/Binary_search)\n- [Python unittest](https://docs.python.org/"}
