{"task_id": "Mbpp/576", "completion": "\n\n```python\ndef is_Sub_Array(a,b):\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if a[i:i+len(b)] == b:\n                return True\n    return False\n```\n\n### Testing:\n\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3]) == True\nassert is_Sub_Array([1,4,3,5],[1,4,3,5]) == True\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,1", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to check whether a list is sublist of another or not. Your code should satisfy the following assertion:\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\n### Response:\n\n```python\ndef is_Sub_Array(a,b):\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if a[i:i+len(b)] == b:\n                return True\n    return False\n```\n\n### Testing:\n\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3]) == True\nassert is_Sub_Array([1,4,3,5],[1,4,3,5]) == True\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,1"}
