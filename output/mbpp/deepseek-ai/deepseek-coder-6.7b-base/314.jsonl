{"task_id": "Mbpp/635", "completion": "\n\n```python\ndef heap_sort(lst):\n    heapify(lst)\n    end = len(lst) - 1\n    while end > 0:\n        lst[end], lst[0] = lst[0], lst[end]\n        end -= 1\n        sift_down(lst, 0, end)\n    return lst\n\ndef heapify(lst):\n    start = (len(lst) - 2) // 2\n    while start >= 0:\n        sift_down(lst, start, len(lst) - 1)\n        start -= 1\n\ndef sift_down(lst, start, end):\n    root = start\n    while True:\n        child = root * 2 + 1\n        if child > end:\n            break\n        if child + 1 <= end and lst[child] < lst[child + 1]:\n            child += 1\n        if lst[root] < lst[child]:\n            lst[root], lst[child] = lst[child], lst[root]\n            root = child\n        else:\n            break\n```\n\n### Explanation:\n\nThe heap_sort function takes a list lst as input and returns a sorted list. It first calls the heapify function to convert the list into a max heap. Then, it repeatedly swaps the root element (the maximum element) with the last element in the list, decrements the end index, and calls the sift_down function to restore the heap property. Finally, it returns the sorted list.\n\nThe heapify function takes a list lst and a start index as input and converts the list into a max heap. It starts from the last parent node and repeatedly swaps the root element with the largest child element if necessary.\n\nThe sift_down function takes a list lst, a start index, and an end index as input and restores the heap property by sifting down the root element until it reaches its correct position.\n\nThe assert statement checks if the heap_sort function correctly sorts the given list.\n\n### References:\n\n- [Heap Sort Algorithm](https://www.geeksforgeeks.org/heap-sort/)\n- [Heapify Algorithm](https://www.geeksforgeeks.org/heapify-a-given-array/)\n- [Sift Down Algorithm](https://www.geeksforgeeks.org/sift-down-algorithm-for-heaps/)\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort the given list. Your code should satisfy the following assertion:\n```python\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Response:\n\n```python\ndef heap_sort(lst):\n    heapify(lst)\n    end = len(lst) - 1\n    while end > 0:\n        lst[end], lst[0] = lst[0], lst[end]\n        end -= 1\n        sift_down(lst, 0, end)\n    return lst\n\ndef heapify(lst):\n    start = (len(lst) - 2) // 2\n    while start >= 0:\n        sift_down(lst, start, len(lst) - 1)\n        start -= 1\n\ndef sift_down(lst, start, end):\n    root = start\n    while True:\n        child = root * 2 + 1\n        if child > end:\n            break\n        if child + 1 <= end and lst[child] < lst[child + 1]:\n            child += 1\n        if lst[root] < lst[child]:\n            lst[root], lst[child] = lst[child], lst[root]\n            root = child\n        else:\n            break\n```\n\n### Explanation:\n\nThe heap_sort function takes a list lst as input and returns a sorted list. It first calls the heapify function to convert the list into a max heap. Then, it repeatedly swaps the root element (the maximum element) with the last element in the list, decrements the end index, and calls the sift_down function to restore the heap property. Finally, it returns the sorted list.\n\nThe heapify function takes a list lst and a start index as input and converts the list into a max heap. It starts from the last parent node and repeatedly swaps the root element with the largest child element if necessary.\n\nThe sift_down function takes a list lst, a start index, and an end index as input and restores the heap property by sifting down the root element until it reaches its correct position.\n\nThe assert statement checks if the heap_sort function correctly sorts the given list.\n\n### References:\n\n- [Heap Sort Algorithm](https://www.geeksforgeeks.org/heap-sort/)\n- [Heapify Algorithm](https://www.geeksforgeeks.org/heapify-a-given-array/)\n- [Sift Down Algorithm](https://www.geeksforgeeks.org/sift-down-algorithm-for-heaps/)\n"}
