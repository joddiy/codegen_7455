{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset of numbers that satisfies the condition.\n    \"\"\"\n    # Sort the list of numbers in descending order\n    numbers.sort(reverse=True)\n\n    # Initialize a set to store the largest subset\n    largest_subset = set()\n\n    # Iterate over the sorted list of numbers\n    for num in numbers:\n        # Check if the number is divisible by all the numbers in the largest subset\n        if all(num % n == 0 for n in largest_subset):\n            # If it is, add it to the largest subset\n            largest_subset.add(num)\n\n    # Return the size of the largest subset\n    return len(largest_subset)\n```\n\nThis function takes a list of numbers as input and returns the size of the largest subset of numbers that satisfies the condition that every pair of numbers in the subset is divisible.\n\nThe function first sorts the list of numbers in descending order. This is done to ensure that the largest numbers are checked first, as they are more likely to satisfy the condition.\n\nThe function then initializes an empty set to store the largest subset.\n\nThe function then iterates over the sorted list of numbers. For each number, it checks if it is divisible by all the numbers in the largest subset. If it is, it adds the number to the largest subset.\n\nFinally, the function returns the size of the largest subset.\n\nNote that this function assumes that the input list of numbers is sorted in descending order. If the input list is not sorted, the function will not return the correct result.\n\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n### Response:\n```python\ndef largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset of numbers that satisfies the condition.\n    \"\"\"\n    # Sort the list of numbers in descending order\n    numbers.sort(reverse=True)\n\n    # Initialize a set to store the largest subset\n    largest_subset = set()\n\n    # Iterate over the sorted list of numbers\n    for num in numbers:\n        # Check if the number is divisible by all the numbers in the largest subset\n        if all(num % n == 0 for n in largest_subset):\n            # If it is, add it to the largest subset\n            largest_subset.add(num)\n\n    # Return the size of the largest subset\n    return len(largest_subset)\n```\n\nThis function takes a list of numbers as input and returns the size of the largest subset of numbers that satisfies the condition that every pair of numbers in the subset is divisible.\n\nThe function first sorts the list of numbers in descending order. This is done to ensure that the largest numbers are checked first, as they are more likely to satisfy the condition.\n\nThe function then initializes an empty set to store the largest subset.\n\nThe function then iterates over the sorted list of numbers. For each number, it checks if it is divisible by all the numbers in the largest subset. If it is, it adds the number to the largest subset.\n\nFinally, the function returns the size of the largest subset.\n\nNote that this function assumes that the input list of numbers is sorted in descending order. If the input list is not sorted, the function will not return the correct result.\n\n"}
