{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return [x for x in list1 if x in list2]"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(num):\n    if num < 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(text):\n    if \"_\" in text:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "completion": "def check_type(tup):\n    return all(type(tup[0]) == type(i) for i in tup)"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n    # Initialize the count of the element\n    count = 0\n    # Iterate through the array\n    for i in range(n):\n        # If the element is found, increment the count\n        if arr[i] == x:\n            count += 1\n    # If the count is greater than n/2, return True\n    if count > n/2:\n        return True\n    # Otherwise, return False\n    else:\n        return False"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    # Initialize index of next positive and negative element\n    pos = n - 1\n    neg = 0\n\n    # Traverse array elements\n    while (pos > neg and arr[neg] < 0):\n        # If positive element is found\n        if (arr[pos] < 0):\n            # Swap element at pos and neg\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            # Update pos and neg\n            pos -= 1\n            neg += 1\n        else:\n            # If negative element is found\n            neg += 1\n\n    return arr"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, character):\n    return string.replace(' ', character)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return side_length * 4"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateral_surface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length**3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(number):\n    return number | 2"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(tuples):\n    dictionary = {}\n    for tup in tuples:\n        if tup not in dictionary:\n            dictionary[tup] = 1\n        else:\n            dictionary[tup] += 1\n    return dictionary\n\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ))"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sum(get_total_number_of_sequences(m, n-1) for i in range(1, m+1) if i >= n)"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        # If n is a perfect square, return the next perfect square\n        return (int(n**0.5) + 1)**2\n    else:\n        # If n is not a perfect square, return the next perfect square\n        return (int(n**0.5) + 1)**2"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = 0\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is greater than the previous element, add it to the current sum\n        if i > 0 and arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        # Otherwise, update the maximum sum and reset the current sum\n        else:\n            max_sum = max(max_sum, current_sum + arr[i])\n            current_sum = arr[i]\n\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst"}
{"task_id": "Mbpp/252", "completion": "def convert(num):\n    return (num.real, num.imag)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "completion": "def combinations_colors(colors, n):\n    if n == 0:\n        return [()]\n    result = []\n    for i in range(len(colors)):\n        for j in combinations_colors(colors, n-1):\n            result.append((colors[i],) + j)\n    return result"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(num):\n    if num < 2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= num:\n        for y in primes:\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    print(primes)\n    return len(primes)"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the maximum values from each input tuple.\n\n    Args:\n        tuple1 (tuple): A tuple of tuples.\n        tuple2 (tuple): A tuple of tuples.\n\n    Returns:\n        tuple: A tuple of tuples with the maximum values from each input tuple.\n\n    Raises:\n        ValueError: If the input tuples are not of the same length.\n\n    Example:\n        >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(max(tuple1[i][j], tuple2[i][j]) for j in range(len(tuple1[i]))))\n\n    return tuple(result)"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(array):\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the list of primes\n    primes = [2, 3, 5]\n\n    # Loop until we have found the nth prime\n    while len(primes) < n:\n        # Generate the next prime number\n        next_prime = primes[-1] + 2\n        while not all(next_prime % p != 0 for p in primes):\n            next_prime += 2\n        # Add the prime number to the list\n        primes.append(next_prime)\n\n    # Return the nth prime number\n    return primes[n - 1]\n\n# Test the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(map(lambda x, y: x / y, t1, t2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(age):\n    return age*7"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 6*side_length**2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return (n*(n+1))/2"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0])"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    return n % 2 == 0 and n % 3 == 0 and n % 5 == 0"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [i[2] for i in lst]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x - y, tuple1, tuple2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    # Initialize sum\n    s = 0\n\n    # Compute value of 2^0\n    term = 1\n\n    for i in range(n):\n\n        # Add current term\n        s += term\n\n        # Compute next term\n        term = term * (n - i)\n        term = term // (i + 1)\n\n    return s"}
{"task_id": "Mbpp/276", "completion": "def volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(dict, n):\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(set(lst)) == len(lst)"}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    return num == int(str(num)[::-1]) * 2 - 1"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [list1[i] - list2[i] for i in range(len(list1))]"}
{"task_id": "Mbpp/283", "completion": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(text):\n    if len(text) < 3:\n        return False\n    if text[0] == 'a':\n        if text[1] == 'b' and text[2] == 'b':\n            return True\n        elif text[1] == 'b' and text[2] == 'b' and text[3] == 'b':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    # Find the maximum sum of a contiguous subarray in the modified array\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n * k):\n        curr_sum += arr[i % n]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"}
{"task_id": "Mbpp/290", "completion": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for l in list_of_lists:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "completion": "def find(a,b):\n    return a//b"}
{"task_id": "Mbpp/293", "completion": "def otherside_rightangle(a,b):\n    return (a**2+b**2)**0.5"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(\"\".join(map(str, digits)))"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(tuples):\n    max_tuple = tuples[0]\n    for t in tuples:\n        if t[1] > max_tuple[1]:\n            max_tuple = t\n    return max_tuple"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize the count of binary sequences\n    count = 0\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the binary sequence to a string\n        binary_seq = bin(i)[2:].zfill(2*n)\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(int(binary_seq[j]) for j in range(n)) == sum(int(binary_seq[j]) for j in range(n, 2*n)):\n            # Increment the count of binary sequences\n            count += 1\n    # Return the count of binary sequences\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(d[key]) for key in d])\n    else:\n        return 0"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum\n    max_sum = 0\n    # Initialize the current sum\n    curr_sum = 0\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element\n    curr_element = arr[i]\n    # Initialize the current index\n    curr_index = i\n    # Initialize the current element"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    \n    # Initialize a list to store the largest products\n    largest_products = []\n    \n    # Iterate over the first n elements of each list\n    for i in range(n):\n        # Find the largest product of the current element from list1 and the rest of list2\n        max_product = list1[i] * max(list2[i+1:])\n        # Add the largest product to the list of largest products\n        largest_products.append(max_product)\n    \n    # Return the list of largest products\n    return largest_products"}
{"task_id": "Mbpp/309", "completion": "def maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(string):\n    return tuple(string)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(num):\n    # Your code here\n    return num"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst,string):\n    return [string.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        d = {list1[i]: {list2[i]: list3[i]}}\n        result.append(d)\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(string):\n    for char in string:\n        if string.count(char) == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/396", "completion": "def check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a,b,c):\n    if a<b<c or c<b<a:\n        return b\n    elif b<a<c or c<a<b:\n        return a\n    else:\n        return c"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    return len(set(lst))"}
{"task_id": "Mbpp/404", "completion": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, element):\n    if element in tuplex:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 == 1"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(number):\n    # Convert the number to a list of digits\n    digits = list(str(number))\n\n    # Find the first digit from the right that is smaller than the digit to its right\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number is already the biggest possible\n        return number\n\n    # Find the smallest digit to the right of the pivot that is greater than the pivot\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    j -= 1\n\n    # Swap the pivot and the smallest digit to the right of the pivot\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of the pivot\n    digits[i + 1:] = digits[i + 1:][::-1]\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [x[n] for x in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    if arr[-1] * arr[-2] > arr[0] * arr[1]:\n        return arr[-1], arr[-2]\n    else:\n        return arr[0], arr[1]"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(list):\n    max_list = []\n    for i in list:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(nums):\n    sum = 0\n    for num in nums:\n        sum += round(num)\n    return sum * len(nums)"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nassert cube_Sum(2) == 72"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup):\n    return \"-\".join(str(x) for x in tup)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) / n"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [tup[i][-1] for i in range(len(tup))]"}
{"task_id": "Mbpp/4", "completion": "def heap_queue_largest(numbers, n):\n    heap = []\n    for number in numbers:\n        heapq.heappush(heap, -number)\n    result = []\n    for i in range(n):\n        result.append(-heapq.heappop(heap))\n    return result"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(list_of_lists, element):\n    count = 0\n    for sublist in list_of_lists:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [number for number in numbers if number % 2 == 1]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    date_list = date.split(\"-\")\n    return f\"{date_list[2]}-{date_list[1]}-{date_list[0]}\""}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(x & y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a,b,c):\n    return -b**2/4*a"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a,b,c):\n    return (a+b+c)/2"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(num):\n    return num % 10"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(string):\n    return string[1::2]"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(numbers):\n    return int(\"\".join(str(num) for num in numbers))"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    # Initialize a variable to store the position of the first adverb\n    adverb_pos = None\n    # Initialize a variable to store the adverb\n    adverb = None\n    # Iterate over the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word[-1] == 'ly':\n            # If it is, store the position and the adverb\n            adverb_pos = i\n            adverb = word\n            break\n    # Return the position and the adverb\n    return adverb_pos, adverb_pos + len(adverb), adverb"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6*size**2"}
{"task_id": "Mbpp/442", "completion": "def positive_count(nums):\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(t1, t2):\n    return tuple(tuple(a*b for a,b in zip(t1[i], t2[i])) for i in range(len(t1)))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num**3 for num in nums]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(subject_marks):\n    return sorted(subject_marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-2) + cal_sum(n-3)"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, n):\n    return [x for x in lst if len(x) > n]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(num):\n    sum = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    if re.search(r'z', text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(list):\n    min_len = len(list[0])\n    min_list = list[0]\n    for i in list:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_list = i\n    return min_list"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    return ''.join([c for c in s if c.islower()])"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) == type([]):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [lst[i][0] for i in range(len(lst))]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        result = []\n        for i in range(len(lst)):\n            for j in combinations_list(lst[i+1:]):\n                result.append([lst[i]] + j)\n        return result"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                prod = arr[i] * arr[j]\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the intersection of two tuples.\n    \"\"\"\n    return set(tuple_list1).intersection(set(tuple_list2))"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/474", "completion": "def replace_char(string, char_to_replace, replacement_char):\n    return string.replace(char_to_replace, replacement_char)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    arr.sort()\n    return arr[0] + arr[-1]"}
{"task_id": "Mbpp/477", "completion": "def is_lower(string):\n    return string.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(string):\n    return ''.join([i for i in string if i.isupper()])"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(num):\n    return int(str(num)[0])"}
{"task_id": "Mbpp/554", "completion": "def Split(list):\n    return [i for i in list if i % 2 == 1]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    return (n*(n+1)//2)**2 - n*(n+1)*(2*n+1)//6"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]^arr[j])%2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(string):\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-1)"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(num1), str(num2)))"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    return tuple(sorted(set(t1 + t2)))"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(string):\n    return [s.strip('\"') for s in string.split(',')]"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\nprint(count_Pairs([1,2,1],3))"}
{"task_id": "Mbpp/565", "completion": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(x) for x in str(n))"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    for i in range(len(lst)-1):\n        if lst[i]>lst[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for i in range(n)]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        if arr[0] > arr[1]:\n            for i in range(len(arr)-1):\n                if arr[i] < arr[i+1]:\n                    return False\n        elif arr[0] < arr[1]:\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    return False\n        else:\n            return False\n        return True"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(list_of_lists):\n    sorted_list = []\n    for sublist in list_of_lists:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(num_list):\n    unique_nums = []\n    for num in num_list:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "completion": "def surfacearea_cylinder(radius, height):\n    return 2*math.pi*radius*(radius+height)"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(a,b):\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if a[i:i+len(b)] == b:\n                return True\n    return False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(tuple1, tuple2):\n    return tuple(set(tuple1) ^ set(tuple2))"}
{"task_id": "Mbpp/580", "completion": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if x % 2 == 0)\n    else:\n        return t"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base_edge, height):\n    return base_edge ** 2 + base_edge * 4 * height\n\nassert surface_Area(3,4) == 33"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(lst, sublst):\n    for i in range(len(lst)):\n        if lst[i] == sublst[0]:\n            if lst[i:i+len(sublst)] == sublst:\n                return True\n    return False"}
{"task_id": "Mbpp/582", "completion": "def my_dict(dict):\n    if len(dict) == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res\n\nassert catalan_number(10)==16796"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(a,b):\n    return [i for i in range(a,b) if i**0.5 == int(i**0.5)]"}
{"task_id": "Mbpp/590", "completion": "def polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "completion": "def swap_List(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i+1)\n    return sum"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i][0] == '0':\n            ip_list[i] = ip_list[i][1:]\n    return '.'.join(ip_list)"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even_numbers = [num for num in lst if num % 2 == 0]\n    odd_numbers = [num for num in lst if num % 2 != 0]\n    return even_numbers[0] - odd_numbers[0]"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(a,b):\n    count = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    if k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range\")\n    if k == 0:\n        return None\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if mid1 + mid2 + 1 >= k:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if mid1 + mid2 + 1 >= k:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    sum = 0\n    for i in num_str:\n        sum += int(i)**num_len\n    if sum == num:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"}
{"task_id": "Mbpp/600", "completion": "def is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(string):\n    for char in string:\n        if string.count(char) > 1:\n            return char\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludic = []\n    for i in range(1, n+1):\n        if i % 2 == 1 and i % 3 != 0 and i % 5 != 0 and i % 7 != 0:\n            ludic.append(i)\n    return ludic"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(string):\n    words = string.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"}
{"task_id": "Mbpp/605", "completion": "def prime_num(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\nassert prime_num(13)==True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(degree):\n    return degree * math.pi / 180"}
{"task_id": "Mbpp/607", "completion": "def find_literals(string, pattern):\n    \"\"\"\n    Finds the first occurrence of a pattern in a string and returns the substring, start index and end index.\n    \"\"\"\n    start_index = string.find(pattern)\n    end_index = start_index + len(pattern)\n    return pattern, start_index, end_index"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    sum = 0\n    for tup in tuple_list:\n        for num in tup:\n            sum += num\n    return sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tup):\n    return [sum(i)/len(i) for i in tup]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1,num2):\n    count = 0\n    while num1 > 0 or num2 > 0:\n        if num1%2 != num2%2:\n            count += 1\n        num1 = num1//2\n        num2 = num2//2\n    return count == 1"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    for i in range(n):\n        for j in range(n):\n            if i**2 - j**2 == n:\n                return True\n    return False"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [list1[i]/list2[i] for i in range(len(list1))]"}
{"task_id": "Mbpp/619", "completion": "def move_num(string):\n    nums = []\n    letters = []\n    for char in string:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(nums)"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset of numbers that satisfies the condition.\n    \"\"\"\n    # Sort the list of numbers in descending order\n    numbers.sort(reverse=True)\n\n    # Initialize a set to store the largest subset\n    largest_subset = set()\n\n    # Iterate over the sorted list of numbers\n    for num in numbers:\n        # Check if the number is divisible by all the numbers in the largest subset\n        if all(num % n == 0 for n in largest_subset):\n            # If it is, add it to the largest subset\n            largest_subset.add(num)\n\n    # Return the size of the largest subset\n    return len(largest_subset)"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        if i == n:\n            m1 = m2\n            m2 = list2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = list1[0]\n            break\n\n        if list1[i] <= list2[j]:\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n        count += 1\n\n    return (m1 + m2) / 2"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num**n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(string):\n    return string.upper()"}
{"task_id": "Mbpp/626", "completion": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 2 * radius * radius"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "completion": "def Split(lst):\n    return [i for i in lst if i%2 == 0]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(patterns):\n    for i in range(len(patterns)-1):\n        if patterns[i] == patterns[i+1]:\n            return True\n    return False"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(string):\n    return string.replace(' ', '_')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    new_lst = []\n    for i in lst:\n        if i != 0:\n            new_lst.append(i)\n    for i in lst:\n        if i == 0:\n            new_lst.append(i)\n    return new_lst"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(nums, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += nums[i] ^ nums[j]\n    return sum"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(lst):\n    heapify(lst)\n    end = len(lst) - 1\n    while end > 0:\n        lst[end], lst[0] = lst[0], lst[end]\n        end -= 1\n        sift_down(lst, 0, end)\n    return lst\n\ndef heapify(lst):\n    start = (len(lst) - 2) // 2\n    while start >= 0:\n        sift_down(lst, start, len(lst) - 1)\n        start -= 1\n\ndef sift_down(lst, start, end):\n    root = start\n    while True:\n        child = root * 2 + 1\n        if child > end:\n            break\n        if child + 1 <= end and lst[child] < lst[child + 1]:\n            child += 1\n        if lst[root] < lst[child]:\n            lst[root], lst[child] = lst[child], lst[root]\n            root = child\n        else:\n            break"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(amount,cost):\n    if amount>cost:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(wind_velocity, temperature):\n    return round(13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16))"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    names = [name for name in names if name[0].isupper()]\n    return sum(len(name) for name in names)"}
{"task_id": "Mbpp/640", "completion": "def remove_parenthesis(string):\n    return string.replace(\"(\", \"\").replace(\")\", \"\")"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n*(3*n-2)"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    return text.startswith(\"z\") and text.endswith(\"z\")"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, d):\n    return tup + (d,)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n*n)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base**power))"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(string):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    return [word for word in string.split() if word[0] == '\"' and word[-1] == '\"']"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "completion": "def sum_list(a,b):\n    return [a[i]+b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_lst.append(lst[i])\n        elif lst[i] != lst[i-1]:\n            new_lst.append(lst[i])\n    return new_lst"}
{"task_id": "Mbpp/731", "completion": "def lateralsurface_cone(r,h):\n    return 3.14*r*math.sqrt(r**2+h**2)"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(string):\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(lst):\n    sum = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= lst[k]\n            sum += prod\n    return sum\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(num):\n    # Get the number of bits in the number\n    num_bits = num.bit_length()\n\n    # Create a mask with all bits set except the first and last bits\n    mask = (1 << num_bits) - 1\n    mask = mask ^ (1 << (num_bits - 1))\n    mask = mask ^ (1 << 0)\n\n    # Toggle the bits of the number using the mask\n    return num ^ mask"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, value):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    # Initialize result\n    index = 0\n    # Initialize count of digits\n    count = 0\n    # Keep incrementing index while size\n    # of Triangular number is less than\n    # or equal to n\n    while (count <= n):\n        index = index + 1\n        count = len(str(index * (index + 1) // 2))\n    return index\n\n# Driver code\nn = 2\nprint(find_Index(n))"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tuple):\n    return dict(zip(tuple[::2], tuple[1::2]))"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(string):\n    if len(string) == 0:\n        return False\n    else:\n        first_char = string[0]\n        for char in string:\n            if char != first_char:\n                return False\n        return True"}
{"task_id": "Mbpp/742", "completion": "def area_tetrahedron(side):\n    return side**2 * 3**0.5 / 4"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tuple):\n    for item in tuple:\n        if item == None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    return [x for x in range(startnum, endnum+1) if all(x % int(i) == 0 for i in str(x))]"}
{"task_id": "Mbpp/746", "completion": "def sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * (radius**2) * math.pi"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(string):\n    return string"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    for i in range(len(arr) // 2):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"}
{"task_id": "Mbpp/753", "completion": "def min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(lst):\n    lst.sort()\n    return lst[1]"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    d = {}\n    for i in lst:\n        if tuple(i) in d:\n            d[tuple(i)] += 1\n        else:\n            d[tuple(i)] = 1\n    return d"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    if '.' in s:\n        return s.count('.') == 1 and s.split('.')[1] == '00'\n    else:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(list):\n    for i in list:\n        if list.count(i) > 1:\n            return False\n    return True"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month):\n    if month in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, n):\n    arr.sort()\n    diff}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(numbers, sum):\n    pairs_count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                pairs_count += 1\n    return pairs_count"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return (list(set(li1) - set(li2)))"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    return sum(i**4 for i in range(1, n*2, 2))"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == \"(\" and char != \")\") or (top == \"{\" and char != \"}\") or (top == \"[\" and char != \"]\"):\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(string, k):\n    return ' '.join([word for word in string.split() if len(word) != k])"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    if substring in string:\n        return substring, string.find(substring), string.rfind(substring)\n    else:\n        return None"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(string):\n    # Write your code here\n    return char"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "completion": "def find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n            result.append((tuples[i][0] + tuples[j][1], tuples[i][1] + tuples[j][0]))\n    return result"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 == 1:\n                sum += sum(arr[i:j+1])\n    return sum"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even[0] * odd[0]"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str[1:-1].split(', ')))"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] > val:\n            return i\n    return len(arr)"}
{"task_id": "Mbpp/787", "completion": "def text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(list, string):\n    return tuple(list) + (string,)"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "completion": "def last(lst, target):\n    if target not in lst:\n        return -1\n    else:\n        return len(lst) - lst[::-1].index(target) - 1"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(text):\n    return text.startswith(\"a\") and text.endswith(\"b\")"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/798", "completion": "def _sum(array):\n    return sum(array)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a number to the left by d bits.\n\n    Parameters:\n    num (int): The number to rotate.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The rotated number.\n    \"\"\"\n    # Convert the number to a binary string\n    binary_str = bin(num)[2:]\n\n    # Pad the binary string with zeros to the left to make it 32 bits long\n    binary_str = binary_str.zfill(32)\n\n    # Rotate the bits to the left by d bits\n    rotated_str = binary_str[d:] + binary_str[:d]\n\n    # Convert the rotated binary string back to an integer\n    rotated_num = int(rotated_str, 2)\n\n    return rotated_num"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return False\n    if n == 7:\n        return False\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return False\n    if n == 11:\n        return False\n    if n == 12:\n        return False\n    if n == 13:\n        return False\n    if n == 14:\n        return False\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return False\n    if n == 19:\n        return False\n    if n == 20:\n        return False\n    if n == 21:\n        return False\n    if n == 22:\n        return False\n    if n == 23:\n        return False\n    if n == 24:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return False\n    if n == 27:\n        return False\n    if n == 28:\n        return False\n    if n == 29:\n        return False\n    if n == 30:\n        return False\n    if n == 31:\n        return False\n    if n == 32:\n        return True\n    if n == 33:\n        return False\n    if n == 34:\n        return False\n    if n == 35:\n        return False\n    if n == 36:\n        return False\n    if n == 37:\n        return False\n    if n == 38:\n        return False\n    if n == 39:\n        return False\n    if n == 40:\n        return True\n    if n == 41:\n        return False\n    if n == 42:\n        return False\n    if n == 43:\n        return False\n    if n == 44:\n        return False\n    if n == 45:\n        return False\n    if n == 46:\n        return False\n    if n == 47:\n        return False\n    if n == 48:\n        return False\n    if n == 49:\n        return True\n    if n == 50:\n        return False\n    if n == 51:\n        return False\n    if n == 52:\n        return False\n    if n == 53:\n        return False\n    if n == 54:\n        return False\n    if n == 55:\n        return False\n    if n == 56:\n        return False\n    if n == 57:\n        return False\n    if n == 58:\n        return False\n    if n == 59:\n        return False\n    if n == 60:\n        return True\n    if n == 61:\n        return False\n    if n == 62:\n        return False\n    if n == 63:\n        return False\n    if n == 64:\n        return True\n    if n == 65:\n        return False\n    if n == 66:\n        return False\n    if n == 67:\n        return False\n    if n == 68:\n        return False\n    if n == 69:\n        return False\n    if n == 70:\n        return False\n    if n == 71:\n        return False\n    if n == 72:\n        return False\n    if n == 73:\n        return False\n    if n == 74:"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(list_of_lists):\n    max_sum = 0\n    max_list = []\n    for list in list_of_lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(string):\n    max_run = 0\n    current_run = 0\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    for i in tup:\n        if i == k:\n            return True\n    return False"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(string):\n    return [word for word in string.split() if len(word) >= 4]"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n*(2*n-1)"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    if n < 10:\n        return 0\n    else:\n        return n - 1"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "completion": "def find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(len(n)-2):\n            if n[i] == n[i+1] == n[i+2]:\n                return False\n        return True"}
{"task_id": "Mbpp/93", "completion": "def power(a,b):\n    return a**b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(tuples):\n    min_index = 0\n    min_value = tuples[0][1]\n    for i in range(1, len(tuples)):\n        if tuples[i][1] < min_value:\n            min_index = i\n            min_value = tuples[i][1]\n    return tuples[min_index][0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(list_of_lists):\n    min_length = len(list_of_lists[0])\n    for i in range(1, len(list_of_lists)):\n        if len(list_of_lists[i]) < min_length:\n            min_length = len(list_of_lists[i])\n    return min_length"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num**2 for num in nums]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lists):\n    flattened_list = [item for sublist in lists for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "completion": "def multiply_num(num_list):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string\n    n_str = str(n)\n    # Get the length of the string\n    n_len = len(n_str)\n    # Check if the string is a palindrome\n    if n_str == n_str[::-1]:\n        # If the string is a palindrome, return the next smallest palindrome\n        return int(n_str[:n_len//2] + str(int(n_str[n_len//2]) + 1) + n_str[n_len//2:])\n    else:\n        # If the string is not a palindrome, return the next smallest palindrome\n        return int(n_str[:n_len//2] + n_str[n_len//2:]) + 1"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return sorted(arr)[k-1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "completion": "def count(l):\n    return len([x for x in l if x])"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(string):\n    rotations = 0\n    for i in range(len(string)):\n        if string[i:] + string[:i] == string:\n            rotations += 1\n    return rotations"}
{"task_id": "Mbpp/106", "completion": "def add_lists(list, tup):\n    return tup + tuple(list)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary, times):\n    binary = binary * times\n    count = 0\n    for i in range(times):\n        if int(binary[i:i+len(binary)//times], 2) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(lst):\n    common_elements = set(lst[0])\n    for l in lst[1:]:\n        common_elements = common_elements.intersection(set(l))\n    return common_elements"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "completion": "def empty_dit(lst):\n    for d in lst:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(list_of_lists):\n    for i in range(len(list_of_lists)):\n        list_of_lists[i] = tuple(float(j) for j in list_of_lists[i])\n    return list_of_lists"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(string):\n    return string.split()"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    if char in string:\n        string = string.replace(char, '', 1)\n        string = string.replace(char, '', len(string) - string.rfind(char) - 1)\n    return string"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][0] * tuples[i][1] * tuples[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i if is_amicable(i) else 0\n    return sum\n\ndef is_amicable(n):\n    return sum_of_divisors(n) != n and sum_of_divisors(sum_of_divisors(n)) == n\n\ndef sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/124", "completion": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    max_length = 0\n    count_0 = 0\n    count_1 = 0\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_length = max(max_length, count_0 + count_1)\n        elif count_0 > count_1:\n            count_0 = 0\n            count_1 = 0\n    return max_length"}
{"task_id": "Mbpp/126", "completion": "def sum(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a,b):\n    return a*b"}
{"task_id": "Mbpp/128", "completion": "def long_words(n,words):\n    words_list = words.split()\n    long_words_list = []\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # check if the matrix is a square matrix\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # check if the sum of each row is the same\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n\n    # check if the sum of each column is the same\n    col_sum = sum([row[0] for row in matrix])\n    for i in range(len(matrix)):\n        if sum([row[i] for row in matrix]) != col_sum:\n            return False\n\n    # check if the sum of the diagonals is the same\n    diag_sum = sum([matrix[i][i] for i in range(len(matrix))])\n    if diag_sum != sum([matrix[i][len(matrix)-i-1] for i in range(len(matrix))]):\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n    \"\"\"\n    return max(lst, key=lst.count)"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = \"aeiou\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i].lower() not in vowels:\n            i += 1\n        elif s[j].lower() not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(num_list):\n    sum = 0\n    for num in num_list:\n        if num < 0:\n            sum += num\n    return sum\n\nprint(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n*(2*n-1)"}
{"task_id": "Mbpp/137", "completion": "def zero_count(numbers):\n    zero_count = 0\n    non_zero_count = 0\n    for number in numbers:\n        if number == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return False\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return False\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return False\n    if n == 22:\n        return False\n    if n == 23:\n        return False\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return False\n    if n == 27:\n        return False\n    if n == 28:\n        return False\n    if n == 29:\n        return False\n    if n == 30:\n        return True\n    if n == 31:\n        return False\n    if n == 32:\n        return True\n    if n == 33:\n        return False\n    if n == 34:\n        return False\n    if n == 35:\n        return False\n    if n == 36:\n        return True\n    if n == 37:\n        return False\n    if n == 38:\n        return False\n    if n == 39:\n        return False\n    if n == 40:\n        return True\n    if n == 41:\n        return False\n    if n == 42:\n        return False\n    if n == 43:\n        return False\n    if n == 44:\n        return True\n    if n == 45:\n        return False\n    if n == 46:\n        return False\n    if n == 47:\n        return False\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return False\n    if n == 52:\n        return True\n    if n == 53:\n        return False\n    if n == 54:\n        return False\n    if n == 55:\n        return False\n    if n == 56:\n        return True\n    if n == 57:\n        return False\n    if n == 58:\n        return False\n    if n == 59:\n        return False\n    if n == 60:\n        return True\n    if n == 61:\n        return False\n    if n == 62:\n        return False\n    if n == 63:\n        return False\n    if n == 64:\n        return True\n    if n == 65:\n        return False\n    if n == 66:\n        return False\n    if n == 67:\n        return False\n    if n == 68:\n        return True\n    if n == 69:\n        return False\n    if n == 70:\n        return False\n    if n == 71:\n        return False\n    if n == 72:\n        return True\n    if n == 73:\n        return False\n    if n == 74:\n        return False\n    if n == 75:\n        return False"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(list_of_lists):\n    return [item for sublist in list_of_lists for item in sublist]"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    for i in range(len(lst)-1, 0, -1):\n        max_index = lst.index(max(lst[:i+1]))\n        if max_index != i:\n            lst[:max_index+1] = lst[:max_index+1][::-1]\n            lst[:i+1] = lst[:i+1][::-1]\n    return lst"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"task_id": "Mbpp/143", "completion": "def find_lists(tup):\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base,height,length):\n    return (base*height*length)/2"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y such that ax + by = n, or returns None if no solution exists.\n    \"\"\"\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return x, y\n    elif n % b == 0:\n        x = 0\n        y = n // b\n        return x, y\n    else:\n        return None"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)"}
{"task_id": "Mbpp/164", "completion": "def are_equivalent(a, b):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    return sum(divisors(a)) == sum(divisors(b))\n\ndef divisors(n):\n    \"\"\"\n    Return the divisors of a number.\n    \"\"\"\n    return [i for i in range(1, n + 1) if n % i == 0]"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(97 + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length())"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(list, start, end):\n    return sum(list[start:end])"}
