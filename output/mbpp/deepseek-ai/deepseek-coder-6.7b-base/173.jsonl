{"task_id": "Mbpp/388", "completion": "\n```python\ndef highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n```\n\n### Explanation:\nThe function `highest_Power_of_2` takes an integer `n` as input and returns the highest power of 2 that is less than or equal to `n`.\n\nThe function initializes a variable `power` to 1 and then enters a while loop that continues as long as `power` is less than or equal to `n`. Inside the loop, the value of `power` is doubled using the `*=` operator.\n\nOnce the loop has finished, the function returns the value of `power` divided by 2, which is the highest power of 2 that is less than or equal to `n`.\n\nThe assertion `assert highest_Power_of_2(10) == 8` checks that the function returns 8 when given the input 10. If the assertion fails, the function will raise an AssertionError.\n\nOverall, this code is a simple and efficient way to find the highest power of 2 that is less than or equal to a given number.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the highest power of 2 that is less than or equal to n. Your code should satisfy the following assertion:\n```python\nassert highest_Power_of_2(10) == 8\n```\n\n### Response:\n```python\ndef highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n```\n\n### Explanation:\nThe function `highest_Power_of_2` takes an integer `n` as input and returns the highest power of 2 that is less than or equal to `n`.\n\nThe function initializes a variable `power` to 1 and then enters a while loop that continues as long as `power` is less than or equal to `n`. Inside the loop, the value of `power` is doubled using the `*=` operator.\n\nOnce the loop has finished, the function returns the value of `power` divided by 2, which is the highest power of 2 that is less than or equal to `n`.\n\nThe assertion `assert highest_Power_of_2(10) == 8` checks that the function returns 8 when given the input 10. If the assertion fails, the function will raise an AssertionError.\n\nOverall, this code is a simple and efficient way to find the highest power of 2 that is less than or equal to a given number.\n"}
