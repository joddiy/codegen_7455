{"task_id": "Mbpp/743", "completion": "\n```python\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n```\n\n### Explanation:\nThe function `rotate_right` takes two arguments: a list `lst` and an integer `n`. It returns a new list that is the result of rotating the original list by `n` items to the right.\n\nThe code uses list slicing to extract the last `n` items of the original list and concatenate them with the first `len(lst) - n` items of the original list. This results in a new list that is the same as the original list, but with the last `n` items moved to the front.\n\nThe assertion checks that the function returns the correct result for the given input.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/. Your code should satisfy the following assertion:\n```python\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\n### Response:\n```python\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n```\n\n### Explanation:\nThe function `rotate_right` takes two arguments: a list `lst` and an integer `n`. It returns a new list that is the result of rotating the original list by `n` items to the right.\n\nThe code uses list slicing to extract the last `n` items of the original list and concatenate them with the first `len(lst) - n` items of the original list. This results in a new list that is the same as the original list, but with the last `n` items moved to the front.\n\nThe assertion checks that the function returns the correct result for the given input.\n"}
