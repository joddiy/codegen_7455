{"task_id": "Mbpp/619", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef move_num(s):\n    nums = []\n    letters = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters + nums)\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n```\n\nIn this script, we define a function `move_num` that takes a string `s` as input. We initialize two empty lists `nums` and `letters`. We then iterate over each character in `s`. If the character is a digit, we append it to `nums`; otherwise, we append it to `letters`. Finally, we return the concatenation of `letters` and `nums`, with `nums` appended after `letters`.\n\nThe assertion at the end checks that the function works correctly. If the function returns the expected output, the assertion will pass silently; otherwise, it will raise an `AssertionError`.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to move all the numbers to the end of the given string. Your code should satisfy the following assertion:\n```python\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef move_num(s):\n    nums = []\n    letters = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters + nums)\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n```\n\nIn this script, we define a function `move_num` that takes a string `s` as input. We initialize two empty lists `nums` and `letters`. We then iterate over each character in `s`. If the character is a digit, we append it to `nums`; otherwise, we append it to `letters`. Finally, we return the concatenation of `letters` and `nums`, with `nums` appended after `letters`.\n\nThe assertion at the end checks that the function works correctly. If the function returns the expected output, the assertion will pass silently; otherwise, it will raise an `AssertionError`.\n"}
