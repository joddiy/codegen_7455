{"task_id": "Mbpp/80", "completion": "\nHere is a Python function that calculates the nth tetrahedral number:\n\n```python\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\nassert tetrahedral_number(5) == 35\n```\n\nThis function works by using the formula for the sum of the first n natural numbers, which is n * (n + 1) / 2. However, since we are looking for the nth tetrahedral number, we need to multiply by (n + 2) as well. The final result is divided by 6 to get the correct tetrahedral number.\n\nThe assertion at the end checks that the function works correctly for the example given in the problem.\n\nYou can call this function with any positive integer to get the nth tetrahedral number. For example, `tetrahedral_number(5)` would return `35`.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the nth tetrahedral number. Your code should satisfy the following assertion:\n```python\nassert tetrahedral_number(5) == 35\n```\n\n### Response:\nHere is a Python function that calculates the nth tetrahedral number:\n\n```python\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\nassert tetrahedral_number(5) == 35\n```\n\nThis function works by using the formula for the sum of the first n natural numbers, which is n * (n + 1) / 2. However, since we are looking for the nth tetrahedral number, we need to multiply by (n + 2) as well. The final result is divided by 6 to get the correct tetrahedral number.\n\nThe assertion at the end checks that the function works correctly for the example given in the problem.\n\nYou can call this function with any positive integer to get the nth tetrahedral number. For example, `tetrahedral_number(5)` would return `35`.\n"}
