{"task_id": "Mbpp/620", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef largest_subset(lst):\n    n = len(lst)\n    lst.sort()\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] % lst[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\nIn this script, we first sort the list in ascending order. Then we initialize a list `dp` with the same length as the input list, where `dp[i]` is the length of the longest subset ending at index `i`. We then iterate over the list and for each element, we check all previous elements to see if they divide the current element. If they do, we update the length of the longest subset ending at the current index. Finally, we return the maximum length found.\n\nThe time complexity of this script is O(n^2) and the space complexity is O(n), where n is the length of the input list.\n\nThe assertion at the end checks if the function works correctly for the given example.\n\nPlease note that this script assumes that the input list contains distinct elements. If the list can contain duplicate elements, you would need to modify the script to handle that case.\n\nAlso, this script assumes that the input list is not empty. If the list can be empty, you would need to modify the script to handle that case.\n\nFinally, this script assumes that the input list contains only positive integers. If the list can contain negative integers or zero, you would need to modify the script to handle those cases.\n\nPlease let me know if you have any questions or if you need further clarification.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef largest_subset(lst):\n    n = len(lst)\n    lst.sort()\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] % lst[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\nIn this script, we first sort the list in ascending order. Then we initialize a list `dp` with the same length as the input list, where `dp[i]` is the length of the longest subset ending at index `i`. We then iterate over the list and for each element, we check all previous elements to see if they divide the current element. If they do, we update the length of the longest subset ending at the current index. Finally, we return the maximum length found.\n\nThe time complexity of this script is O(n^2) and the space complexity is O(n), where n is the length of the input list.\n\nThe assertion at the end checks if the function works correctly for the given example.\n\nPlease note that this script assumes that the input list contains distinct elements. If the list can contain duplicate elements, you would need to modify the script to handle that case.\n\nAlso, this script assumes that the input list is not empty. If the list can be empty, you would need to modify the script to handle that case.\n\nFinally, this script assumes that the input list contains only positive integers. If the list can contain negative integers or zero, you would need to modify the script to handle those cases.\n\nPlease let me know if you have any questions or if you need further clarification.\n"}
