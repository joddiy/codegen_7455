{"task_id": "Mbpp/247", "completion": "\nHere is a Python solution using dynamic programming. The function `lps` calculates the length of the longest palindromic subsequence in the given string.\n\n```python\ndef lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequences\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process.\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\n    return L[0][n - 1]\n\nassert lps(\"TENS FOR TENS\") == 5\n```\n\nThis script creates a 2D array `L` where `L[i][j]` stores the length of the longest palindromic subsequence in the substring `s[i..j]`. The script fills this table in a bottom-up manner, and finally, `L[0][n - 1]` will hold the length of the longest palindromic subsequence in the whole string.\n\nThe time complexity of this script is O(n^2) and the space complexity is also O(n^2).\n\nThe script passes the assertion `assert lps(\"TENS FOR TENS\") == 5`, which means that the function correctly finds the length of the longest palindromic subsequence in the string \"TENS FOR TENS\".\n\nPlease note that this script is case-sensitive. If you want to ignore case, you can convert the input string to lower case or upper case before calling the function.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the length of the longest palindromic subsequence in the given string. Your code should satisfy the following assertion:\n```python\nassert lps(\"TENS FOR TENS\") == 5\n```\n\n### Response:\nHere is a Python solution using dynamic programming. The function `lps` calculates the length of the longest palindromic subsequence in the given string.\n\n```python\ndef lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequences\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process.\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\n    return L[0][n - 1]\n\nassert lps(\"TENS FOR TENS\") == 5\n```\n\nThis script creates a 2D array `L` where `L[i][j]` stores the length of the longest palindromic subsequence in the substring `s[i..j]`. The script fills this table in a bottom-up manner, and finally, `L[0][n - 1]` will hold the length of the longest palindromic subsequence in the whole string.\n\nThe time complexity of this script is O(n^2) and the space complexity is also O(n^2).\n\nThe script passes the assertion `assert lps(\"TENS FOR TENS\") == 5`, which means that the function correctly finds the length of the longest palindromic subsequence in the string \"TENS FOR TENS\".\n\nPlease note that this script is case-sensitive. If you want to ignore case, you can convert the input string to lower case or upper case before calling the function.\n"}
