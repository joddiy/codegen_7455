{"task_id": "Mbpp/475", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\nIn this script, we define a function `sort_counter` that takes a dictionary `d` as input. The function uses the built-in `sorted` function to sort the dictionary's items by their values. The `key` parameter of the `sorted` function is a lambda function that returns the second element of each item (i.e., the value of the item), and `reverse=True` to sort in descending order. The function then returns the sorted list of items.\n\nThe assertion checks if the function works correctly. If the function returns the expected output, the assertion passes; otherwise, it raises an `AssertionError`.\n\nYou can run this script in a Python environment to check if it works.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a dictionary by value. Your code should satisfy the following assertion:\n```python\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\nIn this script, we define a function `sort_counter` that takes a dictionary `d` as input. The function uses the built-in `sorted` function to sort the dictionary's items by their values. The `key` parameter of the `sorted` function is a lambda function that returns the second element of each item (i.e., the value of the item), and `reverse=True` to sort in descending order. The function then returns the sorted list of items.\n\nThe assertion checks if the function works correctly. If the function returns the expected output, the assertion passes; otherwise, it raises an `AssertionError`.\n\nYou can run this script in a Python environment to check if it works.\n"}
