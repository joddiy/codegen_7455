{"task_id": "Mbpp/743", "completion": "\nHere is a Python function that accomplishes this:\n\n```python\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n```\n\nThis function works by slicing the list at the index `n` from the end and concatenating the two slices in reverse order. The `lst[-n:]` slice includes the `n` rightmost elements of the list, and `lst[:-n]` includes all other elements.\n\nYou can test this function with the provided assertion:\n\n```python\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\nThis assertion will pass if the function is implemented correctly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/. Your code should satisfy the following assertion:\n```python\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\n### Response:\nHere is a Python function that accomplishes this:\n\n```python\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n```\n\nThis function works by slicing the list at the index `n` from the end and concatenating the two slices in reverse order. The `lst[-n:]` slice includes the `n` rightmost elements of the list, and `lst[:-n]` includes all other elements.\n\nYou can test this function with the provided assertion:\n\n```python\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\nThis assertion will pass if the function is implemented correctly.\n"}
