{"task_id": "Mbpp/407", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n    \n    # Find the first digit that is smaller than the next digit\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        # If no such digit is found, return the number itself\n        return n\n    \n    # Find the smallest digit that is greater than the digit at i-th position\n    smallest_greater = min(filter(lambda x: x[1] > digits[i], enumerate(digits[i+1:])))\n    \n    # Swap the digits at i-th and smallest_greater-th positions\n    digits[i+1:], digits[i+1+smallest_greater] = digits[i+1+smallest_greater], digits[i+1]\n    \n    # Reverse the digits after i-th position\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to a number\n    return int(''.join(map(str, digits)))\n\n# Test the function\nassert rearrange_bigger(12) == 21\n```\n\nThis script works by first converting the given number to a list of digits. It then finds the first pair of digits from the right that are in ascending order and swaps them. After that, it sorts the digits after the swapped digit in ascending order to get the next bigger number. If no such pair of digits is found, the original number is returned.\n\nPlease note that this script assumes that the input number is positive. If the input number can be negative, you should modify the script to handle this case correctly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n    \n    # Find the first digit that is smaller than the next digit\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        # If no such digit is found, return the number itself\n        return n\n    \n    # Find the smallest digit that is greater than the digit at i-th position\n    smallest_greater = min(filter(lambda x: x[1] > digits[i], enumerate(digits[i+1:])))\n    \n    # Swap the digits at i-th and smallest_greater-th positions\n    digits[i+1:], digits[i+1+smallest_greater] = digits[i+1+smallest_greater], digits[i+1]\n    \n    # Reverse the digits after i-th position\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to a number\n    return int(''.join(map(str, digits)))\n\n# Test the function\nassert rearrange_bigger(12) == 21\n```\n\nThis script works by first converting the given number to a list of digits. It then finds the first pair of digits from the right that are in ascending order and swaps them. After that, it sorts the digits after the swapped digit in ascending order to get the next bigger number. If no such pair of digits is found, the original number is returned.\n\nPlease note that this script assumes that the input number is positive. If the input number can be negative, you should modify the script to handle this case correctly.\n"}
