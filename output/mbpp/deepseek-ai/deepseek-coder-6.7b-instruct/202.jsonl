{"task_id": "Mbpp/427", "completion": "\nHere is a Python function that accomplishes this:\n\n```python\ndef change_date_format(date):\n    date_parts = date.split('-')\n    return '{}-{}-{}'.format(date_parts[2], date_parts[1], date_parts[0])\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n```\n\nThis function works by splitting the input string into its components (year, month, day) using the hyphen as a delimiter. It then rearranges these components to the desired format and returns the result.\n\nThe assert statement at the end of the script checks that the function works correctly. If the function returns the expected result, the assert statement does nothing. If the function does not return the expected result, the assert statement raises an AssertionError.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. Your code should satisfy the following assertion:\n```python\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n```\n\n### Response:\nHere is a Python function that accomplishes this:\n\n```python\ndef change_date_format(date):\n    date_parts = date.split('-')\n    return '{}-{}-{}'.format(date_parts[2], date_parts[1], date_parts[0])\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n```\n\nThis function works by splitting the input string into its components (year, month, day) using the hyphen as a delimiter. It then rearranges these components to the desired format and returns the result.\n\nThe assert statement at the end of the script checks that the function works correctly. If the function returns the expected result, the assert statement does nothing. If the function does not return the expected result, the assert statement raises an AssertionError.\n"}
