{"task_id": "Mbpp/463", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\nThis script uses dynamic programming to solve the problem. It maintains two variables, `max_product` and `min_product`, to store the maximum and minimum product of the subarray ending at the current position. The `result` variable stores the maximum product of the subarray.\n\nFor each number in the input array, it updates `max_product` and `min_product` based on the current number and the product of the previous maximum and minimum product. It then updates `result` with the maximum of `result` and `max_product`.\n\nFinally, it returns `result` as the maximum product of the subarray.\n\nThe time complexity of this script is O(n), where n is the length of the input array. The space complexity is O(1), as it only uses a constant amount of space.\n\nThe assertion at the end checks the function with the provided example. If the function returns the correct result, the assertion will pass; otherwise, it will raise an AssertionError.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the maximum product subarray of the given array. Your code should satisfy the following assertion:\n```python\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\nThis script uses dynamic programming to solve the problem. It maintains two variables, `max_product` and `min_product`, to store the maximum and minimum product of the subarray ending at the current position. The `result` variable stores the maximum product of the subarray.\n\nFor each number in the input array, it updates `max_product` and `min_product` based on the current number and the product of the previous maximum and minimum product. It then updates `result` with the maximum of `result` and `max_product`.\n\nFinally, it returns `result` as the maximum product of the subarray.\n\nThe time complexity of this script is O(n), where n is the length of the input array. The space complexity is O(1), as it only uses a constant amount of space.\n\nThe assertion at the end checks the function with the provided example. If the function returns the correct result, the assertion will pass; otherwise, it will raise an AssertionError.\n"}
