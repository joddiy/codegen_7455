{"task_id": "Mbpp/300", "completion": "\nHere is a Python script that solves the problem using dynamic programming. The function `count_binary_seq` takes an integer `n` as input and returns the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n\n```python\ndef count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0] * (2*n + 1) for _ in range(n + 1)]\n\n    # Base case: dp[0][0] = 1\n    dp[0][0] = 1\n\n    # Fill the dp array\n    for i in range(1, n + 1):\n        for j in range(2 * i + 1):\n            if j < i:\n                dp[i][j] = dp[i - 1][j] * 2\n            elif j == i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # Return the count of binary sequences where the sum of the first n bits is equal to the sum of the last n bits\n    return dp[n][n]\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\nThis script first initializes a 2D array `dp` to store the count of binary sequences. The base case is `dp[0][0] = 1` because there is only one binary sequence of length 0 where the sum of the first 0 bits is equal to the sum of the last 0 bits.\n\nThe script then fills the `dp` array using a nested loop. For each `i` and `j`, it calculates the count of binary sequences of length `2*i` where the sum of the first `i` bits is equal to the sum of the last `i` bits.\n\nFinally, the script returns the count of binary sequences of length `2*n` where the sum of the first `n` bits is equal to the sum of the last `n` bits.\n\nThe assertion at the end of the script tests the function with `n=1` and checks if the returned count is approximately equal to 2.0, within a relative tolerance of 0.001.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should satisfy the following assertion:\n```python\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\n### Response:\nHere is a Python script that solves the problem using dynamic programming. The function `count_binary_seq` takes an integer `n` as input and returns the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n\n```python\ndef count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0] * (2*n + 1) for _ in range(n + 1)]\n\n    # Base case: dp[0][0] = 1\n    dp[0][0] = 1\n\n    # Fill the dp array\n    for i in range(1, n + 1):\n        for j in range(2 * i + 1):\n            if j < i:\n                dp[i][j] = dp[i - 1][j] * 2\n            elif j == i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # Return the count of binary sequences where the sum of the first n bits is equal to the sum of the last n bits\n    return dp[n][n]\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\nThis script first initializes a 2D array `dp` to store the count of binary sequences. The base case is `dp[0][0] = 1` because there is only one binary sequence of length 0 where the sum of the first 0 bits is equal to the sum of the last 0 bits.\n\nThe script then fills the `dp` array using a nested loop. For each `i` and `j`, it calculates the count of binary sequences of length `2*i` where the sum of the first `i` bits is equal to the sum of the last `i` bits.\n\nFinally, the script returns the count of binary sequences of length `2*n` where the sum of the first `n` bits is equal to the sum of the last `n` bits.\n\nThe assertion at the end of the script tests the function with `n=1` and checks if the returned count is approximately equal to 2.0, within a relative tolerance of 0.001.\n"}
