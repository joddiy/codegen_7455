{"task_id": "Mbpp/104", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\nThis script defines a function `sort_sublists` that takes a list of lists as input and returns a new list where each sublist is sorted. The function uses a list comprehension to create a new list where each sublist is sorted using the built-in `sorted` function. The sorted sublists are then returned by the function.\n\nThe assertion at the end of the script tests the function with the provided example and checks if the returned result is equal to the expected result. If the assertion is true, the script will not output anything. If the assertion is false, the script will raise an `AssertionError`.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort each sublist of strings in a given list of lists. Your code should satisfy the following assertion:\n```python\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\nThis script defines a function `sort_sublists` that takes a list of lists as input and returns a new list where each sublist is sorted. The function uses a list comprehension to create a new list where each sublist is sorted using the built-in `sorted` function. The sorted sublists are then returned by the function.\n\nThe assertion at the end of the script tests the function with the provided example and checks if the returned result is equal to the expected result. If the assertion is true, the script will not output anything. If the assertion is false, the script will raise an `AssertionError`.\n"}
