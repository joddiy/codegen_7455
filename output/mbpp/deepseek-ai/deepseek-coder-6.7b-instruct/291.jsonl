{"task_id": "Mbpp/605", "completion": "\nSure, here is a simple Python function to check if a given number is prime:\n\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nassert prime_num(13) == True\n```\n\nThis function works by first checking if the number is less than or equal to 1, in which case it is not prime. Then it checks if the number is less than or equal to 3, in which case it is prime. After that, it checks if the number is divisible by 2 or 3. If it is, then it is not prime.\n\nIf none of these conditions are met, the function then checks for divisibility by all numbers of the form 6k \u00b1 1 up to the square root of the number. If the number is divisible by any of these, it is not prime. If it is not divisible by any of these, then it is prime.\n\nThe test case `assert prime_num(13) == True` checks if the function correctly identifies 13 as a prime number.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to check if the given integer is a prime number. Your code should satisfy the following assertion:\n```python\nassert prime_num(13)==True\n```\n\n### Response:\nSure, here is a simple Python function to check if a given number is prime:\n\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nassert prime_num(13) == True\n```\n\nThis function works by first checking if the number is less than or equal to 1, in which case it is not prime. Then it checks if the number is less than or equal to 3, in which case it is prime. After that, it checks if the number is divisible by 2 or 3. If it is, then it is not prime.\n\nIf none of these conditions are met, the function then checks for divisibility by all numbers of the form 6k \u00b1 1 up to the square root of the number. If the number is divisible by any of these, it is not prime. If it is not divisible by any of these, then it is prime.\n\nThe test case `assert prime_num(13) == True` checks if the function correctly identifies 13 as a prime number.\n"}
