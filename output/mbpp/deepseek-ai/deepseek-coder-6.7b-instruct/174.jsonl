{"task_id": "Mbpp/389", "completion": "\nHere is a Python function that finds the n'th Lucas number. The Lucas sequence is similar to the Fibonacci sequence but starts with 2 and 1 instead of 0 and 1.\n\n```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n + 1):\n            lucas.append(lucas[i - 1] + lucas[i - 2])\n        return lucas[n]\n\nassert find_lucas(9) == 76\n```\n\nThis function works by first checking if n is 0 or 1, in which case it returns the nth Lucas number directly. If n is greater than 1, it initializes a list with the first two Lucas numbers (2 and 1) and then uses a for loop to calculate the next Lucas numbers in the sequence by adding the previous two numbers. Finally, it returns the nth Lucas number.\n\nThe assertion at the end checks that the function works correctly for the given example. If the function is correct, it will pass without raising an AssertionError.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the n'th lucas number. Your code should satisfy the following assertion:\n```python\nassert find_lucas(9) == 76\n```\n\n### Response:\nHere is a Python function that finds the n'th Lucas number. The Lucas sequence is similar to the Fibonacci sequence but starts with 2 and 1 instead of 0 and 1.\n\n```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n + 1):\n            lucas.append(lucas[i - 1] + lucas[i - 2])\n        return lucas[n]\n\nassert find_lucas(9) == 76\n```\n\nThis function works by first checking if n is 0 or 1, in which case it returns the nth Lucas number directly. If n is greater than 1, it initializes a list with the first two Lucas numbers (2 and 1) and then uses a for loop to calculate the next Lucas numbers in the sequence by adding the previous two numbers. Finally, it returns the nth Lucas number.\n\nThe assertion at the end checks that the function works correctly for the given example. If the function is correct, it will pass without raising an AssertionError.\n"}
