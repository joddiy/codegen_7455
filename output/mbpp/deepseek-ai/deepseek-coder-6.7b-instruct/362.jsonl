{"task_id": "Mbpp/766", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\nIn this script, we define a function `pair_wise` that takes a list `lst` as an argument. The function uses a list comprehension to create a new list where each element is a pair of consecutive elements from the input list. The list comprehension uses a for loop to iterate over the indices of the input list, and the condition `i < len(lst)-1` ensures that we don't try to access an index that is one past the end of the list. The function then returns this new list.\n\nThe assertion at the end checks that the function works correctly. If the function is correct, the assertion will pass silently; if not, it will raise an `AssertionError`.\n\nYou can run this script in a Python environment to check if it works.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to return a list of all pairs of consecutive items in a given list. Your code should satisfy the following assertion:\n```python\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\nIn this script, we define a function `pair_wise` that takes a list `lst` as an argument. The function uses a list comprehension to create a new list where each element is a pair of consecutive elements from the input list. The list comprehension uses a for loop to iterate over the indices of the input list, and the condition `i < len(lst)-1` ensures that we don't try to access an index that is one past the end of the list. The function then returns this new list.\n\nThe assertion at the end checks that the function works correctly. If the function is correct, the assertion will pass silently; if not, it will raise an `AssertionError`.\n\nYou can run this script in a Python environment to check if it works.\n"}
