{"task_id": "Mbpp/558", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Find the length of the shorter number\n    min_len = min(len(num1_str), len(num2_str))\n\n    # Initialize the sum of the per-digit differences\n    sum_diff = 0\n\n    # Calculate the per-digit differences\n    for i in range(min_len):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    # If the numbers have different lengths, add the remaining digits of the longer number\n    if len(num1_str) > len(num2_str):\n        sum_diff += sum(int(c) for c in num1_str[min_len:])\n    elif len(num2_str) > len(num1_str):\n        sum_diff += sum(int(c) for c in num2_str[min_len:])\n\n    return sum_diff\n\n# Test the function\nassert digit_distance_nums(1,2) == 1\n```\n\nThis function works by first converting the input numbers to strings. It then calculates the per-digit differences between the corresponding digits of the two numbers. If the numbers have different lengths, it adds the remaining digits of the longer number to the sum of the per-digit differences. Finally, it returns the sum of the per-digit differences.\n\nThe function is tested with the assertion provided in the problem statement.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Find the length of the shorter number\n    min_len = min(len(num1_str), len(num2_str))\n\n    # Initialize the sum of the per-digit differences\n    sum_diff = 0\n\n    # Calculate the per-digit differences\n    for i in range(min_len):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    # If the numbers have different lengths, add the remaining digits of the longer number\n    if len(num1_str) > len(num2_str):\n        sum_diff += sum(int(c) for c in num1_str[min_len:])\n    elif len(num2_str) > len(num1_str):\n        sum_diff += sum(int(c) for c in num2_str[min_len:])\n\n    return sum_diff\n\n# Test the function\nassert digit_distance_nums(1,2) == 1\n```\n\nThis function works by first converting the input numbers to strings. It then calculates the per-digit differences between the corresponding digits of the two numbers. If the numbers have different lengths, it adds the remaining digits of the longer number to the sum of the per-digit differences. Finally, it returns the sum of the per-digit differences.\n\nThe function is tested with the assertion provided in the problem statement.\n"}
