{"task_id": "Mbpp/435", "completion": "\nHere is a simple Python function to find the last digit of a given number:\n\n```python\ndef last_Digit(n):\n    return n % 10\n\nassert last_Digit(123) == 3\n```\n\nIn this function, we use the modulus operator `%` to find the remainder of the division of `n` by 10. This remainder is the last digit of `n`.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement does nothing. If the function does not return the expected result, the `assert` statement raises an `AssertionError`.\n\nYou can test the function with other numbers as well. For example:\n\n```python\nassert last_Digit(1000) == 0\nassert last_Digit(789) == 9\n```\n\nThese assertions will pass without any error.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the last digit of a given number. Your code should satisfy the following assertion:\n```python\nassert last_Digit(123) == 3\n```\n\n### Response:\nHere is a simple Python function to find the last digit of a given number:\n\n```python\ndef last_Digit(n):\n    return n % 10\n\nassert last_Digit(123) == 3\n```\n\nIn this function, we use the modulus operator `%` to find the remainder of the division of `n` by 10. This remainder is the last digit of `n`.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement does nothing. If the function does not return the expected result, the `assert` statement raises an `AssertionError`.\n\nYou can test the function with other numbers as well. For example:\n\n```python\nassert last_Digit(1000) == 0\nassert last_Digit(789) == 9\n```\n\nThese assertions will pass without any error.\n"}
