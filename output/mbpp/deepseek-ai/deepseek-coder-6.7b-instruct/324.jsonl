{"task_id": "Mbpp/722", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef filter_data(students, min_height, min_weight):\n    return {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\n\nassert filter_data(students, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}\n```\n\nThis script defines a function `filter_data` that takes a dictionary of students and their heights and weights, as well as the minimum height and weight. It then uses a dictionary comprehension to create a new dictionary that only includes students whose height and weight are both above or equal to the minimum. The function is then tested with the provided assertion.\n\nThe function works by iterating over each key-value pair in the input dictionary. For each pair, it checks if the height and weight are both greater than or equal to the minimum. If they are, the pair is included in the new dictionary. If not, it is skipped. The resulting dictionary is then returned.\n\nThe assertion checks if the function correctly filters the students based on the provided minimum height and weight. If the function is correct, it will pass the assertion without raising an error. If not, it will raise an AssertionError.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum. Your code should satisfy the following assertion:\n```python\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef filter_data(students, min_height, min_weight):\n    return {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\n\nassert filter_data(students, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}\n```\n\nThis script defines a function `filter_data` that takes a dictionary of students and their heights and weights, as well as the minimum height and weight. It then uses a dictionary comprehension to create a new dictionary that only includes students whose height and weight are both above or equal to the minimum. The function is then tested with the provided assertion.\n\nThe function works by iterating over each key-value pair in the input dictionary. For each pair, it checks if the height and weight are both greater than or equal to the minimum. If they are, the pair is included in the new dictionary. If not, it is skipped. The resulting dictionary is then returned.\n\nThe assertion checks if the function correctly filters the students based on the provided minimum height and weight. If the function is correct, it will pass the assertion without raising an error. If not, it will raise an AssertionError.\n"}
