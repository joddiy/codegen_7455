{"task_id": "Mbpp/12", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\nIn this script, we define a function `sort_matrix` that takes a matrix as input and returns a new matrix with the rows sorted in ascending order according to the sum of the elements in each row. The `sorted` function is used with the `key` parameter set to `sum`, which means that the rows will be sorted based on the sum of their elements.\n\nThe assertion at the end checks if the function works correctly. If the function returns the expected output, the assertion will pass, otherwise it will raise an `AssertionError`.\n\nThis script assumes that all rows in the input matrix have the same number of elements. If this is not the case, you would need to modify the `sum` function inside the `sorted` call to handle the case where rows have different lengths.\n\nPlease note that this script uses the built-in `sum` function to calculate the sum of the elements in each row. If you want to use a custom function to calculate the sum, you can replace `sum` with your custom function.\n\nAlso, this script uses the built-in `sorted` function to sort the rows. If you want to use a custom sorting algorithm, you can replace `sorted` with your custom function.\n\nPlease let me know if you have any questions about this script.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy the following assertion:\n```python\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\nIn this script, we define a function `sort_matrix` that takes a matrix as input and returns a new matrix with the rows sorted in ascending order according to the sum of the elements in each row. The `sorted` function is used with the `key` parameter set to `sum`, which means that the rows will be sorted based on the sum of their elements.\n\nThe assertion at the end checks if the function works correctly. If the function returns the expected output, the assertion will pass, otherwise it will raise an `AssertionError`.\n\nThis script assumes that all rows in the input matrix have the same number of elements. If this is not the case, you would need to modify the `sum` function inside the `sorted` call to handle the case where rows have different lengths.\n\nPlease note that this script uses the built-in `sum` function to calculate the sum of the elements in each row. If you want to use a custom function to calculate the sum, you can replace `sum` with your custom function.\n\nAlso, this script uses the built-in `sorted` function to sort the rows. If you want to use a custom sorting algorithm, you can replace `sorted` with your custom function.\n\nPlease let me know if you have any questions about this script.\n"}
