{"task_id": "Mbpp/57", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef find_Max_Num(lst):\n    lst.sort(reverse=True)\n    return int(\"\".join(map(str, lst)))\n\nassert find_Max_Num([1,2,3]) == 321\n```\n\nThis function works by first sorting the list in descending order. Then it converts the list to a string, joins them together, and converts the result back to an integer. The result is the largest number that can be formed with the given list of digits.\n\nThe assertion checks if the function works correctly. If the function returns the correct result, the assertion will pass, otherwise it will raise an AssertionError.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the largest number that can be formed with the given list of digits. Your code should satisfy the following assertion:\n```python\nassert find_Max_Num([1,2,3]) == 321\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef find_Max_Num(lst):\n    lst.sort(reverse=True)\n    return int(\"\".join(map(str, lst)))\n\nassert find_Max_Num([1,2,3]) == 321\n```\n\nThis function works by first sorting the list in descending order. Then it converts the list to a string, joins them together, and converts the result back to an integer. The result is the largest number that can be formed with the given list of digits.\n\nThe assertion checks if the function works correctly. If the function returns the correct result, the assertion will pass, otherwise it will raise an AssertionError.\n"}
