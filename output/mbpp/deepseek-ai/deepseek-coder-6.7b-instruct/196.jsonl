{"task_id": "Mbpp/420", "completion": "\nHere is a Python function that calculates the cube sum of the first n even natural numbers:\n\n```python\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*2*i\n    return sum\n\nassert cube_Sum(2) == 72\n```\n\nIn this function, we use a for loop to iterate over the first n even natural numbers. For each number, we calculate its cube (i*2*i) and add it to the sum. The result is then returned.\n\nThe assertion at the end checks if the function works correctly for the given example. If the function returns the correct result for n=2, the assertion will pass, otherwise it will raise an AssertionError.\n\nPlease note that the function uses 1-based indexing, so it calculates the cube sum of the first n even natural numbers (1, 3, 5, ..., 2n-1). If you want to use 0-based indexing (0, 2, 4, ..., 2n), you can adjust the range in the for loop accordingly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the cube sum of first n even natural numbers. Your code should satisfy the following assertion:\n```python\nassert cube_Sum(2) == 72\n```\n\n### Response:\nHere is a Python function that calculates the cube sum of the first n even natural numbers:\n\n```python\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*2*i\n    return sum\n\nassert cube_Sum(2) == 72\n```\n\nIn this function, we use a for loop to iterate over the first n even natural numbers. For each number, we calculate its cube (i*2*i) and add it to the sum. The result is then returned.\n\nThe assertion at the end checks if the function works correctly for the given example. If the function returns the correct result for n=2, the assertion will pass, otherwise it will raise an AssertionError.\n\nPlease note that the function uses 1-based indexing, so it calculates the cube sum of the first n even natural numbers (1, 3, 5, ..., 2n-1). If you want to use 0-based indexing (0, 2, 4, ..., 2n), you can adjust the range in the for loop accordingly.\n"}
