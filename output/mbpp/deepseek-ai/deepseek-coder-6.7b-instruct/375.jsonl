{"task_id": "Mbpp/783", "completion": "\nHere is a Python function that converts RGB color to HSV color:\n\n```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    diff = max_color-min_color\n\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_color == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    if max_color == 0:\n        s = 0\n    else:\n        s = (diff / max_color) * 100\n\n    v = max_color * 100\n\n    return round(h, 2), round(s, 2), round(v, 2)\n\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)\n```\n\nThis function works by first normalizing the RGB values to be between 0 and 1. It then calculates the hue, saturation, and value based on the formulas provided in the link you provided. The hue is calculated in degrees, and the saturation and value are calculated as percentages. The function then returns these values, rounded to two decimal places.\n\nThe assertion at the end of the script checks that the function works correctly for the RGB value (255, 255, 255), which should return the HSV value (0, 0.0, 100.0).\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/. Your code should satisfy the following assertion:\n```python\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\n### Response:\nHere is a Python function that converts RGB color to HSV color:\n\n```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    diff = max_color-min_color\n\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_color == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    if max_color == 0:\n        s = 0\n    else:\n        s = (diff / max_color) * 100\n\n    v = max_color * 100\n\n    return round(h, 2), round(s, 2), round(v, 2)\n\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)\n```\n\nThis function works by first normalizing the RGB values to be between 0 and 1. It then calculates the hue, saturation, and value based on the formulas provided in the link you provided. The hue is calculated in degrees, and the saturation and value are calculated as percentages. The function then returns these values, rounded to two decimal places.\n\nThe assertion at the end of the script checks that the function works correctly for the RGB value (255, 255, 255), which should return the HSV value (0, 0.0, 100.0).\n"}
