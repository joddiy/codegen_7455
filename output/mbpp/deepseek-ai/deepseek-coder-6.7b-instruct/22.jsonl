{"task_id": "Mbpp/64", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nIn this script, we define a function `subject_marks` that takes a list of tuples as input. The function uses the built-in `sorted` function to sort the list. The `key` parameter of the `sorted` function is set to a lambda function that returns the second element of each tuple. This means that the `sorted` function will sort the list based on the second element of each tuple. The result is a list of tuples sorted by the second element of each tuple.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the expected result, the assertion will pass and no output will be produced. If the function does not return the expected result, the assertion will fail and an `AssertionError` will be raised.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a list of tuples using the second value of each tuple. Your code should satisfy the following assertion:\n```python\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nIn this script, we define a function `subject_marks` that takes a list of tuples as input. The function uses the built-in `sorted` function to sort the list. The `key` parameter of the `sorted` function is set to a lambda function that returns the second element of each tuple. This means that the `sorted` function will sort the list based on the second element of each tuple. The result is a list of tuples sorted by the second element of each tuple.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the expected result, the assertion will pass and no output will be produced. If the function does not return the expected result, the assertion will fail and an `AssertionError` will be raised.\n"}
