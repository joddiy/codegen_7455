{"task_id": "Mbpp/4", "completion": "\nHere is a Python script that solves the problem:\n\n```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n```\n\nIn this script, we use the `heapq.nlargest` function from Python's heapq module to find the n largest integers from the given list. This function returns the n largest elements from the iterable specified as the first argument in descending order.\n\nThe assertion at the end checks if the function works as expected. If the function returns the expected result, the assertion will pass, otherwise it will raise an AssertionError.\n\nPlease note that the `heapq.nlargest` function uses a data structure called a heap to find the n largest elements. This makes it an efficient solution for this problem.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order. Your code should satisfy the following assertion:\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n```\n\nIn this script, we use the `heapq.nlargest` function from Python's heapq module to find the n largest integers from the given list. This function returns the n largest elements from the iterable specified as the first argument in descending order.\n\nThe assertion at the end checks if the function works as expected. If the function returns the expected result, the assertion will pass, otherwise it will raise an AssertionError.\n\nPlease note that the `heapq.nlargest` function uses a data structure called a heap to find the n largest elements. This makes it an efficient solution for this problem.\n"}
