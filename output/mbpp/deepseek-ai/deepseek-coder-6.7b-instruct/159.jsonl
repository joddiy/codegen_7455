{"task_id": "Mbpp/294", "completion": "\nHere is a Python function that accomplishes this task:\n\n```python\ndef max_val(lst):\n    nums = [i for i in lst if isinstance(i, int)]\n    return max(nums)\n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n```\n\nThis function uses a list comprehension to create a new list that only contains the integers from the input list. It then returns the maximum value from this new list.\n\nThe `isinstance(i, int)` function call checks if each element `i` in the list is an integer. If it is, `i` is added to the new list. If it isn't, it's ignored.\n\nThe `max()` function then returns the maximum value from this new list.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the expected result, the assertion passes and nothing happens. If the function doesn't return the expected result, the assertion raises an `AssertionError`.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the maximum value in a given heterogeneous list. Your code should satisfy the following assertion:\n```python\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n```\n\n### Response:\nHere is a Python function that accomplishes this task:\n\n```python\ndef max_val(lst):\n    nums = [i for i in lst if isinstance(i, int)]\n    return max(nums)\n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n```\n\nThis function uses a list comprehension to create a new list that only contains the integers from the input list. It then returns the maximum value from this new list.\n\nThe `isinstance(i, int)` function call checks if each element `i` in the list is an integer. If it is, `i` is added to the new list. If it isn't, it's ignored.\n\nThe `max()` function then returns the maximum value from this new list.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the expected result, the assertion passes and nothing happens. If the function doesn't return the expected result, the assertion raises an `AssertionError`.\n"}
