{"task_id": "Mbpp/767", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef get_pairs_count(lst, total):\n    count = 0\n    dict_map = {}\n    for num in lst:\n        if (total - num) in dict_map:\n            count += dict_map[total - num]\n        if num in dict_map:\n            dict_map[num] += 1\n        else:\n            dict_map[num] = 1\n    return count\n\nassert get_pairs_count([1,1,1,1],2) == 6\n```\n\nThis function works by iterating over the list and for each number, it checks if the difference between the total and the current number is in the dictionary. If it is, it means we have found a pair whose sum equals the total, so we increment the count. Then, we add the current number to the dictionary or increment its count if it is already in the dictionary.\n\nIn the provided assertion, the function correctly returns 6, which is the number of pairs (1,1), (1,1), (1,1), and (1,1) whose sum is 2.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,. Your code should satisfy the following assertion:\n```python\nassert get_pairs_count([1,1,1,1],2) == 6\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef get_pairs_count(lst, total):\n    count = 0\n    dict_map = {}\n    for num in lst:\n        if (total - num) in dict_map:\n            count += dict_map[total - num]\n        if num in dict_map:\n            dict_map[num] += 1\n        else:\n            dict_map[num] = 1\n    return count\n\nassert get_pairs_count([1,1,1,1],2) == 6\n```\n\nThis function works by iterating over the list and for each number, it checks if the difference between the total and the current number is in the dictionary. If it is, it means we have found a pair whose sum equals the total, so we increment the count. Then, we add the current number to the dictionary or increment its count if it is already in the dictionary.\n\nIn the provided assertion, the function correctly returns 6, which is the number of pairs (1,1), (1,1), (1,1), and (1,1) whose sum is 2.\n"}
