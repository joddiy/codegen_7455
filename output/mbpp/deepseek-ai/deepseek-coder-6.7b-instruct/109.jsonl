{"task_id": "Mbpp/232", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert set(larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\nThis script defines a function `larg_num` that takes in a list and an integer n. It sorts the list in descending order and then returns the first n elements from the sorted list. The assertion checks if the function works correctly.\n\nPlease note that the function returns a list of n largest unique numbers. If you want to return n largest numbers even if they are not unique, you can remove the `set` function from the assertion.\n\n```python\ndef larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n```\n\nIn this case, the assertion checks if the function returns the correct list of 2 largest numbers, even if they are not unique.\n\nPlease note that the `set` function is used to remove duplicates from the list before comparing it with the result of the function. If you want to keep duplicates, you can remove the `set` function from the assertion.\n\n```python\ndef larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n```\n\nIn this case, the assertion checks if the function returns the correct list of 2 largest numbers, even if they are not unique.\n\nPlease note that the `set` function is used to remove duplicates from the list before comparing it with the result of the function. If you want to keep duplicates, you can remove the `set` function from the assertion.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list. Your code should satisfy the following assertion:\n```python\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert set(larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\nThis script defines a function `larg_num` that takes in a list and an integer n. It sorts the list in descending order and then returns the first n elements from the sorted list. The assertion checks if the function works correctly.\n\nPlease note that the function returns a list of n largest unique numbers. If you want to return n largest numbers even if they are not unique, you can remove the `set` function from the assertion.\n\n```python\ndef larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n```\n\nIn this case, the assertion checks if the function returns the correct list of 2 largest numbers, even if they are not unique.\n\nPlease note that the `set` function is used to remove duplicates from the list before comparing it with the result of the function. If you want to keep duplicates, you can remove the `set` function from the assertion.\n\n```python\ndef larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n```\n\nIn this case, the assertion checks if the function returns the correct list of 2 largest numbers, even if they are not unique.\n\nPlease note that the `set` function is used to remove duplicates from the list before comparing it with the result of the function. If you want to keep duplicates, you can remove the `set` function from the assertion.\n"}
