{"task_id": "Mbpp/607", "completion": "\nHere is a Python script that solves the problem:\n\n```python\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n```\n\nIn this script, we use the `re.search` function to search for the pattern in the string. If a match is found, the function returns the matched substring, the start index and the end index of the match. If no match is found, the function returns `None`.\n\nThe `re.search` function returns a match object if the pattern is found in the string. The `group`, `start` and `end` methods of the match object return the matched substring, the start index and the end index of the match, respectively.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the correct tuple for the input 'fox' in the string 'The quick brown fox jumps over the lazy dog.', the assertion will pass.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. Your code should satisfy the following assertion:\n```python\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n```\n\nIn this script, we use the `re.search` function to search for the pattern in the string. If a match is found, the function returns the matched substring, the start index and the end index of the match. If no match is found, the function returns `None`.\n\nThe `re.search` function returns a match object if the pattern is found in the string. The `group`, `start` and `end` methods of the match object return the matched substring, the start index and the end index of the match, respectively.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the correct tuple for the input 'fox' in the string 'The quick brown fox jumps over the lazy dog.', the assertion will pass.\n"}
