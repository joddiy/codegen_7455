{"task_id": "Mbpp/576", "completion": "\nHere is a Python function that checks whether a list is a sublist of another list:\n\n```python\ndef is_Sub_Array(small, big):\n    return [i for i in range(len(big)) if big[i:i+len(small)] == small] != []\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\nThis function uses list comprehension to iterate over the `big` list and checks if the current slice of `big` is equal to `small`. If it is, it returns `True`. If it doesn't find any match, it returns `False`.\n\nThe `assert` statement checks if the function returns `False` when called with `[1,4,3,5]` and `[1,2]` as arguments. If the function is correct, this assertion should pass without any error.\n\nPlease note that this function uses Python's slicing feature to check if `small` is a sublist of `big`. It's important to note that this function checks for sublists, not subsequences. If you need to check for subsequences, you would need a different approach.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to check whether a list is sublist of another or not. Your code should satisfy the following assertion:\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\n### Response:\nHere is a Python function that checks whether a list is a sublist of another list:\n\n```python\ndef is_Sub_Array(small, big):\n    return [i for i in range(len(big)) if big[i:i+len(small)] == small] != []\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\nThis function uses list comprehension to iterate over the `big` list and checks if the current slice of `big` is equal to `small`. If it is, it returns `True`. If it doesn't find any match, it returns `False`.\n\nThe `assert` statement checks if the function returns `False` when called with `[1,4,3,5]` and `[1,2]` as arguments. If the function is correct, this assertion should pass without any error.\n\nPlease note that this function uses Python's slicing feature to check if `small` is a sublist of `big`. It's important to note that this function checks for sublists, not subsequences. If you need to check for subsequences, you would need a different approach.\n"}
