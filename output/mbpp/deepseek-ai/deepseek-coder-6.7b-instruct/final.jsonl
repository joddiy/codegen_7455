{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    return all(c.islower() or c == '_' for c in s)\n\nassert text_lowercase_underscore(\"aab_cbbbc\") == True"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "completion": "def check_type(t):\n    return len(set(type(i) for i in t)) == 1"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, elm):\n    # calculate the threshold\n    threshold = n // 2\n\n    # find the first occurrence of the element\n    first_occurrence = arr.index(elm)\n\n    # check if the element is the majority\n    return arr[first_occurrence:first_occurrence + threshold].count(elm) > threshold\n\n# test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    return bin(n).count('1')\n\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(s):\n    return s[::2]\n\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\nassert min_of_three(10,20,0)==0"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    # Separate positive and negative numbers\n    positive = [i for i in arr[:n] if i >= 0]\n    negative = [i for i in arr[:n] if i < 0]\n\n    # Append the remaining elements to the end\n    positive.extend([i for i in arr[n:] if i >= 0])\n    negative.extend([i for i in arr[n:] if i < 0])\n\n    # Combine the negative and positive numbers\n    result = negative + positive\n\n    return result\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(s, c):\n    return s.replace(' ', c)\n\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"task_id": "Mbpp/232", "completion": "def larg_num(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n\nassert set(larg_num([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3\n\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    binary = bin(n)[2:]  # Convert to binary and remove the '0b' prefix\n    binary = '0' + binary  # Add a leading zero to make the indices start from 1\n    binary = list(binary)  # Convert to list for easy manipulation\n\n    for i in range(1, len(binary), 2):  # Start from the second bit (index 1)\n        binary[i] = '1'  # Set the even bits to 1\n\n    return int(''.join(binary), 2)  # Convert back to integer and return\n\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    dic = {}\n    for tup in lst:\n        if tup in dic:\n            dic[tup] += 1\n        else:\n            dic[tup] = 1\n    return dic\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1, m+1):\n        dp[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            for k in range(1, j):\n                dp[i][j] += dp[i-1][k]\n    return sum(dp[n])\n\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)\n\nassert count_charac(\"python programming\")==18"}
{"task_id": "Mbpp/244", "completion": "import math\n\ndef next_Perfect_Square(n):\n    root = math.sqrt(n)\n    if root != int(root):\n        root = int(root) + 1\n        return root * root\n    else:\n        return n\n\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Initialize arrays to store maximum sum of increasing and decreasing subsequences\n    inc = [0]*n\n    dec = [0]*n\n\n    # Initialize maximum sum of bitonic subsequence\n    max_bitonic = 0\n\n    # Find maximum sum of increasing subsequences\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Find maximum sum of decreasing subsequences\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Sum up maximum sum of increasing and decreasing subsequences to get maximum sum of bitonic subsequence\n    for i in range(n):\n        max_bitonic = max(max_bitonic, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(s1, s2):\n    return ''.join([char for char in s1 if char not in s2])\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequences\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process.\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\n    return L[0][n - 1]\n\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    return [value for value in arr1 if value in arr2]"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, elem):\n    return tup.count(elem)\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(complex_num):\n    return cmath.polar(complex_num)\n\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    return sum(isinstance(i, int) for i in lst)\n\nassert count_integer([1,2,'abc',1.2]) == 2"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(*([lst]*n)))\n\nassert combinations_colors([\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes) - 2  # subtract 2 to exclude 0 and 1\n\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a, b):\n    return b, a"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(t1, t2):\n    return tuple(max(a, b) for a, b in zip(t1, t2))\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nassert test_duplicate([1,2,3,4,5]) == False"}
{"task_id": "Mbpp/260", "completion": "\nThe Newman-Shanks-Williams prime numbers are a sequence of prime numbers that are one more than twice the previous Newman-Shanks-Williams prime. The sequence starts with 2, 7, 13, 19, 31, 43, 67, 97, 139, 181, 247, 313, 397, 503, 613, 751, 907, 1073, 1277, 1503, 1763, 2053, 2383, 2753, 3163, 3613, 4103, 4643, 5233, 5873, 6563, 7307, 8103, 8963, 9873, 10843, 11873, 12963, 14113, 15333, 16613, 17963, 19373, 20853, 22403, 24023, 25713, 27473, 29303, 31203, 33173, 35213, 37323, 39503, 41753, 44073, 46463, 48923, 51453, 54053, 56723, 59463, 62273, 65153, 68103, 71123, 74213, 77373, 80603, 83903, 87273, 90713, 94223, 97803, 101453, 105173, 108963, 112823, 116753, 120753, 124823, 128963, 133173, 137453, 141803, 146223, 150713, 155273, 159903, 164603, 169373, 174213, 179123, 184103, 189153, 194273, 199463, 204723, 210053, 215453, 220923, 226463, 232073, 237753, 243503, 249323, 255213, 261173, 267203, 273303, 279473, 285713, 292023, 298403, 304853, 311373, 317963, 324623, 331353, 338153, 345023, 351963, 358973, 366053, 373203, 380423, 387713, 395073, 402503, 410"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(a / b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_years):\n    return human_years * 7\n\nassert dog_age(12)==61"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    i = 0\n    while True:\n        i += 1\n        num = i\n        sum_fact = 0\n        while num > 0:\n            digit = num % 10\n            sum_fact += factorial(digit)\n            num //= 10\n        if sum_fact == i:\n            if n == 1:\n                return i\n            n -= 1\n\nprint(find_star_num(3))  # Output: 150"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A')==65"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 == 0)\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [i[-1] for i in lst]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(t1, t2):\n    return tuple(x1 - x2 for x1, x2 in zip(t1, t2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the even indices\n    for i in range(0, n, 2):\n        # Calculate the binomial coefficient\n        coeff = factorial(n) / (factorial(i) * factorial(n - i))\n        # Add the coefficient to the sum\n        sum += coeff\n    return sum\n\n# Helper function to calculate factorial\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n*(7*n-5)//2\n\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\nassert all_unique([1,2,3]) == True"}
{"task_id": "Mbpp/56", "completion": "def check(n):\n    # Convert the number to a string and reverse it\n    reversed_str = str(n)[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Check if the number is one less than twice the reversed number\n    return n == (2 * reversed_num) - 1\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    # Iterate over each digit in the number\n    for digit in str_n:\n        # Count the number of times the digit appears in the number\n        count = str_n.count(digit)\n        # If the count is greater than the digit itself, return False\n        if count > int(digit):\n            return False\n    # If we've gone through all the digits without finding a count that's greater, return True\n    return True\n\n# Test the function\nassert validate(1234) == True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, elm):\n    return all(i == elm for i in lst)\n\n# Test the function\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"],'blue'))  # False"}
{"task_id": "Mbpp/285", "completion": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"ab\")==(False)\nassert text_match_two_three(\"abb\")==(True)\nassert text_match_two_three(\"abbb\")==(True)"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    # Calculate maximum subarray sum for original array\n    max_normal = max_sub_array_sum(arr, n)\n    \n    # Calculate maximum subarray sum for repeated array\n    max_repeated = max_normal * k\n    \n    # Return maximum subarray sum\n    return max(max_normal, max_repeated)\n\ndef max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far\n\n# Test the function\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output: 30"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*2**2\n    return sum\n\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublist = [sublist for sublist in lst if len(sublist) == max_len]\n    return max_len, max_sublist[0]\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "completion": "def find(num1, num2):\n    return num1 // num2\n\nassert find(10,3) == 3"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a, b):\n    # calculate the third side using the Pythagorean theorem\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    nums = [i for i in lst if isinstance(i, int)]\n    return max(nums)\n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(lst):\n    lst.sort(reverse=True)\n    return int(\"\".join(map(str, lst)))\n\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nassert sum_div(8) == 15"}
{"task_id": "Mbpp/296", "completion": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left_half, left_inv = merge_sort(arr[:mid])\n    right_half, right_inv = merge_sort(arr[mid:])\n    merged_arr, merge_inv = merge(left_half, right_half)\n\n    return merged_arr, left_inv + right_inv + merge_inv\n\ndef merge(left, right):\n    merged = []\n    inversions = 0\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            merged.append(left.pop(0))\n        else:\n            merged.append(right.pop(0))\n            inversions += len(left)\n    merged += left\n    merged += right\n    return merged, inversions\n\ndef get_Inv_Count(arr):\n    _, inversions = merge_sort(arr)\n    return inversions\n\nassert get_Inv_Count([1,20,6,4,5]) == 5"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    # Create a dictionary to store the names and their aggregates\n    aggregate_dict = {}\n\n    # Loop through the list of tuples\n    for name, value in lst:\n        # If the name is not in the dictionary, add it with the value\n        if name not in aggregate_dict:\n            aggregate_dict[name] = value\n        # If the name is already in the dictionary, add the value to the existing aggregate\n        else:\n            aggregate_dict[name] += value\n\n    # Find the name with the maximum aggregate\n    max_aggregate_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    # Return the name and its maximum aggregate\n    return (max_aggregate_name, aggregate_dict[max_aggregate_name])\n\n# Test the function\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "completion": "def count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0] * (2*n + 1) for _ in range(n + 1)]\n\n    # Base case: dp[0][0] = 1\n    dp[0][0] = 1\n\n    # Fill the dp array\n    for i in range(1, n + 1):\n        for j in range(2 * i + 1):\n            if j < i:\n                dp[i][j] = dp[i - 1][j] * 2\n            elif j == i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # Return the count of binary sequences where the sum of the first n bits is equal to the sum of the last n bits\n    return dp[n][n]\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        for w in word.split():\n            if w.lower().startswith('p'):\n                return w,\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, k, i):\n    # Initialize dp array with -1\n    dp = [-1] * n\n    # Initialize max_sum with 0\n    max_sum = 0\n    # Initialize max_index with -1\n    max_index = -1\n    # Iterate over the array from i to n\n    for j in range(i, n):\n        # Initialize current_sum with arr[j]\n        current_sum = arr[j]\n        # Iterate over the dp array from 0 to i\n        for x in range(0, i):\n            # If arr[j] is greater than arr[x] and dp[x] is greater than or equal to 0\n            if arr[j] > arr[x] and (dp[x] >= 0):\n                # Update current_sum with dp[x] + arr[j]\n                current_sum = max(current_sum, dp[x] + arr[j])\n        # If current_sum is greater than max_sum\n        if current_sum > max_sum:\n            # Update max_sum with current_sum\n            max_sum = current_sum\n            # Update max_index with j\n            max_index = j\n        # Update dp[j] with current_sum\n        dp[j] = current_sum\n    # Return max_sum + arr[k]\n    return max_sum + arr[k]\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i*j)\n    products.sort(reverse=True)\n    return products[:n]\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"task_id": "Mbpp/309", "completion": "def maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(num1, num2):\n    return (num1 ^ num2) < 0\n\nassert opposite_Signs(1,-2) == True"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return n\n    return (n // 2) * 2 + 1\n\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1.0/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    i = 0\n    while 2 ** i <= n:\n        i += 1\n    return 2 ** (i - 1)\n\nassert highest_Power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n + 1):\n            lucas.append(lucas[i - 1] + lucas[i - 2])\n        return lucas[n]\n\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, names, values):\n    return [{keys[i]: {names[i]: values[i]}} for i in range(len(keys))]\n\nkeys = [\"S001\", \"S002\", \"S003\", \"S004\"]\nnames = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nvalues = [85, 98, 89, 92]\n\nprint(convert_list_dictionary(keys, names, values))"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    # Initialize a list to store the maximum sum for each number up to n\n    max_sum = [0]*(n+1)\n\n    # For each number from 1 to n, calculate the maximum sum\n    for i in range(1, n+1):\n        max_sum[i] = max((max_sum[i//2] + max_sum[i//3] + max_sum[i//4] + max_sum[i//5]), i)\n\n    # Return the maximum sum for the given number n\n    return max_sum[n]\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    if len(tup) == len(set(tup)):\n        return True\n    else:\n        return False\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None\n\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/59", "completion": "def nth_octagonal(n):\n    return n*(3*n-2)\n\nassert nth_octagonal(5) == 65"}
{"task_id": "Mbpp/396", "completion": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\nassert check_char(\"abba\") == \"Valid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\nassert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    return sum(sum(int(digit) for digit in str(num)) for num in lst)\n\nassert sum_of_digits([10,2,56]) == 14"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    return len(set(lst))\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\nassert minimum(1,2) == 1"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, elem):\n    return elem in tuplex\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 != 0\n\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(x) for x in str(n)]\n    \n    # Find the first digit that is smaller than the next digit\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        # If no such digit is found, return the number itself\n        return n\n    \n    # Find the smallest digit that is greater than the digit at i-th position\n    smallest_greater = min(filter(lambda x: x[1] > digits[i], enumerate(digits[i+1:])))\n    \n    # Swap the digits at i-th and smallest_greater-th positions\n    digits[i+1:], digits[i+1+smallest_greater] = digits[i+1+smallest_greater], digits[i+1]\n    \n    # Reverse the digits after i-th position\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to a number\n    return int(''.join(map(str, digits)))\n\n# Test the function\nassert rearrange_bigger(12) == 21"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    return min(x*y for x, y in lst)\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    # Filter out non-numeric values\n    nums = [i for i in lst if isinstance(i, (int, float))]\n    # Return the minimum value\n    return min(nums)\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for length in range(1, len(s) + 1):\n        for start in range(0, len(s) - length + 1):\n            substring = s[start:start + length]\n            if sum(int(digit) for digit in substring) == length:\n                count += 1\n    return count\n\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [x[n] for x in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == max_len:\n            return sublist"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*2*i\n    return sum\n\nassert cube_Sum(2) == 72"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup):\n    return '-'.join(str(i) for i in tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    return average\n\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2,4,6,8,10]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    date_parts = date.split('-')\n    return '{}-{}-{}'.format(date_parts[2], date_parts[1], date_parts[0])\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n\n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements a[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap,n):\n\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = arr[i]\n\n            # shift earlier gap-sorted elements up until the correct location for a[i] is found\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n\n            # put temp (the original a[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(x & y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, h, k):\n    return k - a * h**2\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    return (a + b) / 2\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i <= num:\n            return False\n    return True\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10\n\nassert last_Digit(123) == 3"}
{"task_id": "Mbpp/63", "completion": "def max_difference(lst):\n    return max(max(pair) - min(pair) for pair in lst)\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return s[::2]\n\nassert remove_odd(\"python\")==(\"yhn\")"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    count = 0\n    seen = set()\n    for t in tuples:\n        if t not in seen:\n            seen.add(t)\n            if (t[1], t[0]) in seen:\n                count += 1\n    return count\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n\nassert multiple_to_single([11, 33, 50])==113350"}
{"task_id": "Mbpp/440", "completion": "import nltk\n\ndef find_adverb_position(sentence):\n    # Tokenize the sentence\n    tokens = nltk.word_tokenize(sentence)\n\n    # Part of speech tagging\n    pos_tags = nltk.pos_tag(tokens)\n\n    # Loop through the tagged words to find the first adverb\n    for i, (word, tag) in enumerate(pos_tags):\n        if tag in ['RB', 'RBR', 'RBS', 'WRB']:\n            return i, i+1, word\n\n    return None\n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(edge_length):\n    return 6 * edge_length ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    # Initialize count of positive numbers\n    count = 0\n    # Iterate over the array\n    for num in arr:\n        # If the number is positive, increment the count\n        if num > 0:\n            count += 1\n    # Return the ratio of positive numbers\n    return count / len(arr)\n\n# Test the function\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tuples):\n    tuple1, tuple2 = tuples\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(a*b for a, b in zip(tuple1[i], tuple2[i])))\n    return tuple(result)\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10))) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(lst):\n    return [i**3 for i in lst]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        perrin = [3, 0, 2]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-1] + perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n\n# Test the function\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [s for s in lst if len(s) > size]\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(input_string):\n    return input_string.replace(' ', '')\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "completion": "import re\n\ndef text_match_wordz(text):\n    if re.search('z', text):\n        return True\n    else:\n        return False\n\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month):\n    # Months with 31 days\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    if month in thirty_one_days_months:\n        return True\n    else:\n        return False\n\nassert check_monthnumb_number(5) == True"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10,20)==200"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    result = ''\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) is list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\nassert recursive_list_sum([1, 2, [3,4],[5,6]])==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\nassert upper_ctr('PYthon') == 1"}
{"task_id": "Mbpp/462", "completion": "import itertools\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        result += list(itertools.combinations(lst, i))\n    return result\n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    if n < 3:\n        return -1\n\n    # Initialize maximum product\n    max_product = arr[0] * arr[1] * arr[2]\n\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                max_product = max(max_product, arr[i] * arr[j] * arr[k])\n\n    return max_product\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))\n\nassert check_Consecutive([1,2,3,4,5]) == True"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuples1, tuples2):\n    intersection = set()\n    for t1 in tuples1:\n        for t2 in tuples2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/474", "completion": "def replace_char(s, old, new):\n    return s.replace(old, new)\n\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return max(arr) + min(arr)\n\nassert big_sum([1,2,3]) == 4"}
{"task_id": "Mbpp/477", "completion": "def to_lower(s):\n    return s.lower()\n\nassert to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    return ''.join([i for i in s if i.isupper()])\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    while n >= 10:\n        n /= 10\n    return int(n)\n\nassert first_Digit(123) == 1"}
{"task_id": "Mbpp/554", "completion": "def split(lst):\n    return [num for num in lst if num % 2 != 0]\n\nassert split([1,2,3,4,5,6]) == [1,3,5]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers\n\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    # Initialize result\n    count = 0\n\n    # Traverse through all pairs of arr[i] and arr[j]\n    for i in range(0, n):\n        for j in range(i + 1, n):\n\n            # If XOR of arr[i] and arr[j] is odd\n            if (arr[i] ^ arr[j]) & 1:\n                count += 1\n\n    return count\n\n# Test the function\nassert find_Odd_Pair([5,4,7,2,1],5) == 6"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\")==(\"pYTHON\")"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Find the length of the shorter number\n    min_len = min(len(num1_str), len(num2_str))\n\n    # Initialize the sum of the per-digit differences\n    sum_diff = 0\n\n    # Calculate the per-digit differences\n    for i in range(min_len):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    # If the numbers have different lengths, add the remaining digits of the longer number\n    if len(num1_str) > len(num2_str):\n        sum_diff += sum(int(c) for c in num1_str[min_len:])\n    elif len(num2_str) > len(num1_str):\n        sum_diff += sum(int(c) for c in num2_str[min_len:])\n\n    return sum_diff\n\n# Test the function\nassert digit_distance_nums(1,2) == 1"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, size):\n    max_so_far = arr[0]\n    current_max = arr[0]\n\n    for i in range(1, size):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n\n    return max_so_far\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    return tuple(sorted(set(t1 + t2)))\n\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "completion": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == k:\n                count += 1\n    return count\n\nassert count_Pairs([1,2,1],3) == 2"}
{"task_id": "Mbpp/565", "completion": "def split(word):\n    return list(word)\n\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nassert sum_digits(345)==12"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n\nassert is_Monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(lst):\n    return list(set(lst))\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    return eval('*'.join(str(i) for i in set(lst)))\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/574", "completion": "import math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n\nassert surfacearea_cylinder(10,5)==942.477"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(small, big):\n    return [i for i in range(len(big)) if big[i:i+len(small)] == small] != []\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    last_digit = 1\n    for i in range(1, n+1):\n        last_digit *= i\n        while last_digit % 10 == 0:\n            last_digit //= 10\n        last_digit %= 10\n    return last_digit\n\nassert last_Digit_Factorial(4) == 4"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [val for pair in zip(list1, list2, list3) for val in pair]\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    return tuple(set(t1) ^ set(t2))\n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "completion": "def extract_even(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            new_item = extract_even(item)\n            if new_item:\n                result.append(new_item)\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "completion": "import math\n\ndef surface_Area(base_edge, height):\n    # The formula for the surface area of a square pyramid is:\n    # Area = 1/2 * base_edge^2 + base_edge * sqrt((base_edge/2)^2 + height^2)\n    return 0.5 * base_edge**2 + base_edge * math.sqrt((base_edge/2)**2 + height**2)\n\n# Test the function\nassert surface_Area(3,4) == 33"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(main_list, sublist):\n    return sublist in main_list\n\n# Test the function\nassert is_sublist([2,4,3,5,7],[3,7])==False"}
{"task_id": "Mbpp/582", "completion": "def is_dict_empty(d):\n    return not bool(d)\n\n# Testing the function\nassert is_dict_empty({}) == True\nassert is_dict_empty({1: 'a'}) == False"}
{"task_id": "Mbpp/583", "completion": "def binomial_coefficient(n, k):\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n\ndef catalan_number(n):\n    return binomial_coefficient(2*n, n) // (n + 1)\n\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    # Sort the dataset in descending order by price\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n items from the sorted dataset\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)\n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(lst):\n    return max(lst) - min(lst)\n\nassert big_diff([1,2,3,4]) == 3"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    return [i * i for i in range(int(start ** 0.5), int(end ** 0.5) + 1)]\n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test the function\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    def binomial(n, k):\n        if k==0 or k==n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    sum = 0\n    for i in range(1, n):\n        sum += binomial(n, i) * binomial(n, i+1)\n    return sum\n\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    length = len(tuples[0])\n    for tup in tuples:\n        if len(tup) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even - odd if even and odd else None\n\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(s1, s2):\n    # Count the number of different bits\n    diff = sum([el1 != el2 for el1, el2 in zip(s1, s2)])\n    \n    # If the number of different bits is odd, return -1\n    if diff % 2 != 0:\n        return -1\n    \n    # Count the number of groups of 2 different bits\n    groups = sum([el1 == el2 for el1, el2 in zip(s1, s2)])\n    \n    # If the number of groups of 2 different bits is odd, return -1\n    if groups % 2 != 0:\n        return -1\n    \n    # Calculate the number of swaps\n    swaps = diff // 2 + groups // 2\n    \n    return swaps\n\nassert min_Swaps(\"1101\",\"1110\") == 1"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    return sorted(arr1 + arr2)[k - 1]\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    # Convert the number to string to easily access its digits\n    num_str = str(num)\n    num_len = len(num_str)\n\n    # Calculate the sum of the cubes of its digits\n    sum_cubes = sum(int(digit)**num_len for digit in num_str)\n\n    # Check if the number is an Armstrong number\n    return sum_cubes == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return (total_sum, average)\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0\n\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "completion": "def get_lucas(n):\n    if n < 1:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2, 1]\n\n    lucas = [2, 1]\n    while lucas[-1] + lucas[-2] <= n:\n        lucas.append(lucas[-1] + lucas[-2])\n\n    return lucas\n\nassert get_lucas(10) == [2, 1, 3, 4, 7]"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n            i += 1\n    return lst\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\nassert reverse_words(\"python program\")==(\"program python\")"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef degree_to_radian(degree):\n    return degree * (math.pi / 180)\n\nassert degree_to_radian(90) == math.pi/2"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    return [[sub[i] for sub in lst] for i in range(2)]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuples):\n    total = 0\n    for t in tuples:\n        total += sum(t)\n    return total\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(t):\n    return [sum(x)/len(x) for x in t]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR operation\n    xor_result = num1 ^ num2\n    # Count the number of set bits in the XOR result\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n    # If the count is exactly 1, then the numbers differ at one bit position\n    return count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    # Iterate from 1 to n\n    for i in range(1, n):\n        # Check if n can be represented as difference of two squares\n        if n < i*i:\n            break\n        for j in range(i, n):\n            if n == (i*i - j*j):\n                return True\n    return False\n\n# Test the function\nassert dif_Square(5) == True"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = []\n    letters = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters + nums)\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(lst):\n    n = len(lst)\n    lst.sort()\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] % lst[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        median = merged_list[n//2]\n    return median\n\n# Test the function\nprint(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def to_upper(string):\n    return string.upper()\n\nassert to_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "completion": "def triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(' ', '%20')\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "completion": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1,2,3,4,5]) == [2,4]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(list1, list2):\n    return len(set(zip(list1, list2))) == len(list1) == len(list2)\n\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n    return adjacent_coordinates\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_')\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    return [i for i in lst if i != 0] + [i for i in lst if i == 0]\n\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_sum(lst, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum += lst[i] ^ lst[j]\n    return sum\n\nassert pair_xor_sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "completion": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(buy_price, sell_price):\n    return buy_price == sell_price\n\nassert noprofit_noloss(1500,1200)==False"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(velocity, temp):\n    # Convert Celsius to Fahrenheit\n    temp_f = temp * 9/5 + 32\n    # Convert km/h to mph\n    velocity_mph = velocity * 0.621371\n    # Calculate wind chill index\n    w = 13.12 + 0.6215 * temp_f - 11.37 * velocity_mph**0.16 + 0.3965 * temp_f * velocity_mph**0.16\n    # Round to the next integer\n    w = round(w)\n    return w\n\nassert wind_chill(120,35)==40"}
{"task_id": "Mbpp/639", "completion": "def sum_names(names):\n    return sum(len(name) for name in names if name[0].isupper())\n\nassert sum_names(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"}
{"task_id": "Mbpp/640", "completion": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\s?\\(.+?\\)', '', s)\n\nassert remove_parenthesis(\"python (chrome)\") == \"python\""}
{"task_id": "Mbpp/641", "completion": "def nth_nonagonal(n):\n    return n*(7*n-5)//2\n\nassert nth_nonagonal(10) == 325"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(i % k == 0 for i in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    words = text.split('.')\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    return False\n\nassert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] / ((n-1) * 2)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "completion": "def filter_data(students, min_height, min_weight):\n    return {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\n\nassert filter_data(students, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    assert len(list1) == len(list2), \"Lists must be of the same length\"\n    return sum(1 for a, b in zip(list1, list2) if a == b)\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n\nassert power_base_sum(2,100)==115"}
{"task_id": "Mbpp/725", "completion": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(n):\n    return n % 11 == 0\n\nassert is_Diff(12345) == False"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\n\nassert lateralsurface_cone(5,12)==204.20352248333654"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(text):\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix = [0]*n\n    suffix = [0]*n\n    prefix[0] = arr[0]\n    suffix[n-1] = arr[n-1]\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] + arr[i]*(i+1)\n    for i in range(n-2, -1, -1):\n        suffix[i] = suffix[i+1] + arr[i]*(n-i)\n    res = 0\n    for i in range(n):\n        if i > 0 and i < n-1:\n            res += arr[i]*(prefix[i-1] + suffix[i+1])\n        elif i == 0:\n            res += arr[i]*suffix[i+1]\n        else:\n            res += arr[i]*prefix[i-1]\n    return res\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    binary = bin(n)[2:]  # Convert to binary and remove the '0b' prefix\n    middle_bits = list(binary[1:-1])  # Get the middle bits\n    for i in range(len(middle_bits)):\n        middle_bits[i] = '1' if middle_bits[i] == '0' else '0'  # Toggle the middle bits\n    return int(binary[0] + ''.join(middle_bits) + binary[-1], 2)  # Convert back to decimal\n\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)\n\nassert left_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiou]', s, re.IGNORECASE))\n\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "completion": "import math\n\ndef find_Index(n):\n    # The formula to find the index of smallest triangular number with n digits is:\n    # index = ceil((sqrt((8 * 10^(n-1)) + 1) - 1) / 2)\n    index = math.ceil((math.sqrt((8 * math.pow(10,(n-1))) + 1) - 1) / 2)\n    return index\n\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 == 1\n\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    return len(set(s)) <= 1\n\nassert all_Characters_Same(\"python\") == False"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2\n\nassert area_tetrahedron(3)==15.588457268119894"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return None in tup"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        if num < 10:\n            result.append(num)\n        else:\n            digits = [int(d) for d in str(num)]\n            if all(num % d == 0 for d in digits):\n                result.append(num)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/746", "completion": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    return ' '.join(s.split())\n\nassert capital_words_spaces(\"Python\") == 'Python'"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    return lst + list(tup)\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr) \n  \n    # If last parent has child node \n    for i in range(int(n/2)): \n          \n        # If left child is greater than parent \n        if arr[i] > arr[2 * i + 1]: \n            return False\n  \n        # If right child exists and is greater than parent \n        if 2 * i + 2 < n: \n            if arr[i] > arr[2 * i + 2]: \n                return False\n            \n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "completion": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    m1 = m2 = float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        num = float(s)\n        if '.' in s:\n            decimal_part = s.split('.')[1]\n            if len(decimal_part) > 2:\n                return False\n        return True\n    except ValueError:\n        return False\n\nassert is_decimal('123.11')==True"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1\n\nassert unique_Element([1,1,1]) == True"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month):\n    # Months with 30 days are: 4, 6, 9, 11\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)\n\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    return n + 2\n\nassert is_polite(7) == 9"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(lst, total):\n    count = 0\n    dict_map = {}\n    for num in lst:\n        if (total - num) in dict_map:\n            count += dict_map[total - num]\n        if num in dict_map:\n            dict_map[num] += 1\n        else:\n            dict_map[num] = 1\n    return count\n\nassert get_pairs_count([1,1,1,1],2) == 6"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return [i for i in li1 if i not in li2]\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening = ['(', '{', '[']\n    closing = [')', '}', ']']\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if len(stack) == 0:\n                return False\n            else:\n                popped = stack.pop()\n                if opening.index(popped) != closing.index(char):\n                    return False\n    return len(stack) == 0\n\nassert check_expression(\"{()}[{}]\") == True"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    words = [word for word in words if len(word) != k]\n    return ' '.join(words)"}
{"task_id": "Mbpp/773", "completion": "def occurrence_substring(s, sub):\n    pos = s.find(sub)\n    if pos != -1:\n        return (sub, pos, pos+len(sub))\n    else:\n        return None\n\nassert occurrence_substring('python programming, python language','python')==('python', 0, 6)"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(s):\n    return chr((sum(ord(c) for c in s) % 26) + ord('a'))\n\nassert get_Char(\"abc\") == \"f\""}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(set(lst))\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        start = i\n        while i < len(lst) - 1 and lst[i] == lst[i + 1]:\n            i += 1\n        result.append(lst[start:i+1])\n        i += 1\n    return result\n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(tuples):\n    # Find all combinations of 2 tuples\n    combos = list(combinations(tuples, 2))\n    \n    # Find the sum of each combination\n    sums = [(sum(x), sum(y)) for (x, y) in combos]\n    \n    return sums\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        sum += ((i+1)*(n-i)+1)//2 * arr[i]\n    return sum\n\nassert odd_length_sum([1,2,4]) == 14"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    diff = max_color-min_color\n\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_color == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    if max_color == 0:\n        s = 0\n    else:\n        s = (diff / max_color) * 100\n\n    v = max_color * 100\n\n    return round(h, 2), round(s, 2), round(v, 2)\n\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2 != 0]\n    return even[0] * odd[0]\n\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(s):\n    return eval(s)\n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "completion": "import bisect\n\ndef right_insertion(arr, val):\n    return bisect.bisect_right(arr, val)\n\nassert right_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/787", "completion": "import re\n\ndef text_match_three(text):\n    pattern = 'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n\n    seq = [1, 1]\n    for i in range(2, n):\n        seq.append(seq[seq[i-1]-1] + seq[i-seq[i-1]])\n    return seq[-1]\n\nassert sequence(10) == 6"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, string):\n    lst.append(string)\n    return tuple(lst)\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\nassert even_position([3,2,1]) == False"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    return tuple(i for i in tup if not isinstance(i, tuple))\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "completion": "def last(lst, elm):\n    try:\n        return len(lst) - 1 - lst[::-1].index(elm)\n    except ValueError:\n        return None"}
{"task_id": "Mbpp/794", "completion": "import re\n\ndef text_starta_endb(text):\n    return bool(re.match('a.*b$', text))\n\nassert text_starta_endb(\"aabbbb\")"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n\nassert sum_in_range(2,5) == 8"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)\n\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    return (n << d)|(n >> (32 - d))\n\nassert left_rotate(16,2) == 64"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(' ', '')\n\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b and b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.sqrt(n)\n    return n == int(root + 0.5) ** 2\n\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n\nassert is_product_even([1,2,3]) == False"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    return max(lst, key=sum)\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_count = 0\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\nassert first_odd([1,3,5]) == 1"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] >= t2[i]:\n            return False\n    return True\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(s):\n    words = s.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n*(5*n-3)//2\n\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Test the function\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\n\nassert merge_dictionaries_three(dict1, dict2, dict3)=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freqs = {}\n    for i in lst:\n        if i in freqs:\n            freqs[i] += 1\n        else:\n            freqs[i] = 1\n    return freqs"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1\n\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, substr):\n    for string in lst:\n        if substr in string:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    diff = int(s[1]) - int(s[0])\n    for i in range(2, len(s)):\n        if int(s[i]) - int(s[i-1]) != diff:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b\n\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/8", "completion": "def square_nums(lst):\n    return [i ** 2 for i in lst]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "completion": "def multiply_num(lst):\n    if len(lst) == 0:\n        return 0\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)\n\nimport math\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:  # check if the number is a palindrome\n            return n"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k-1]\n\nassert kth_element([12,3,5,7,19], 2) == 3"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    return n ** m"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return lst.count(True)\n\nassert count([True,False,True]) == 2"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n\n\nassert find_Rotations(\"aaaa\") == 1"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, rotations):\n    binary_string = binary_string * 2\n    odd_count = 0\n    for i in range(len(binary_string) // 2):\n        binary = binary_string[i:i + rotations]\n        odd_count += bin(int(binary, 2)).count('1') % 2\n    return odd_count\n\nassert odd_Equivalent(\"011001\",6) == 3"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    return list(set.intersection(*map(set, nested_lists)))\n\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\nassert check_integer(\"python\")==False"}
{"task_id": "Mbpp/115", "completion": "def empty_dict(lst):\n    return all(len(d) == 0 for d in lst)\n\n# Test the function\nassert empty_dict([{},{},{}]) == True"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\nassert tuple_to_int((1,2,3))==123"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(lst):\n    return [tuple(map(float, tup)) for tup in lst]\n\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\")==['python','programming']"}
{"task_id": "Mbpp/119", "completion": "def search(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] == nums[mid ^ 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]\n\nassert search([1,1,2,2,3]) == 3"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        last_occurrence = s.rfind(ch)\n        return s[:first_occurrence] + s[last_occurrence+1:]\n    return s\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\""}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = 0\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])==36"}
{"task_id": "Mbpp/123", "completion": "def sum_of_divisors(n):\n    sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i:\n            continue\n        if i * i != n:\n            sum = sum + i + n // i\n        else:\n            sum = sum + i\n    return sum\n\ndef amicable_numbers_sum(limit):\n    sum = 0\n    for i in range(1, limit):\n        sum2 = sum_of_divisors(i)\n        if sum2 > i and sum_of_divisors(sum2) == i:\n            sum += i\n    return sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "completion": "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)\n\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    n = len(binary_string)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + int(binary_string[i])\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            diff = prefix_sum[j] - prefix_sum[i]\n            max_diff = max(max_diff, diff, j - i - diff)\n    return max_diff\n\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(num1, num2):\n    def common_divisors(n):\n        divisors = [1]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    return sum(set(common_divisors(num1) + common_divisors(num2)))\n\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, words):\n    word_list = words.split()\n    long_words = [word for word in word_list if len(word) > n]\n    return long_words\n\nassert long_words(3, \"python is a programming language\") == ['python','programming','language']"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # Get the size of the matrix\n    size = len(matrix)\n\n    # Calculate the sum of the first row\n    magic_constant = sum(matrix[0])\n\n    # Check rows and columns\n    for i in range(size):\n        if sum(matrix[i]) != magic_constant or sum([row[i] for row in matrix]) != magic_constant:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(size)) != magic_constant or sum(matrix[i][size - i - 1] for i in range(size)) != magic_constant:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True\n\n# Test the function\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_freq = max(count_dict.values())\n    for key, value in count_dict.items():\n        if value == max_freq:\n            return key\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n\n    return \"\".join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n*(2*n-1)\n\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "completion": "def zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    return zero_count / non_zero_count\n\nimport math\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n\nassert is_Sum_Of_Powers_Of_Two(10) == True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lst):\n    result = []\n    for sublist in lst:\n        for item in sublist:\n            result.append(item)\n    return result\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "completion": "def flip(arr, i):\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 0, -1):\n        max_idx = 0\n        for j in range(0, i):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        if max_idx != i - 1:\n            flip(arr, max_idx)\n            flip(arr, i - 1)\n    return arr\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "completion": "def find_lists(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    # The formula for the volume of a triangular prism is (1/2) * base * height * length\n    volume = (0.5) * base * height * length\n    return volume\n\n# Test the function\nassert find_Volume(10,8,6) == 240"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))\n\nassert max_Abs_Diff((2,1,5,3)) == 4"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n\n    if n % gcd != 0:\n        return None\n    else:\n        return x * (n // gcd), y * (n // gcd)\n\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]\n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/164", "completion": "def sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef are_equivalent(n1, n2):\n    return sum_of_divisors(n1) == sum_of_divisors(n2)\n\nassert are_equivalent(36, 57) == False"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    s = s.lower()\n    return sum(1 for i in range(len(s)) if s[i] == chr(97 + i))\n\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length()\n\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)\n\nassert frequency([1,2,3], 4) == 0"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
