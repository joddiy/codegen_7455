{"task_id": "Mbpp/760", "completion": "\nHere is a Python function that checks if a list contains only one distinct element:\n\n```python\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n\nassert unique_Element([1,1,1]) == True\n```\n\nThis function works by converting the list to a set, which removes duplicate elements. Then it checks if the length of the set is 1. If it is, it means that all elements in the list were the same, so the function returns True. Otherwise, it returns False.\n\nPlease note that the order of elements in the list may affect the result. If you want to check if all elements are the same regardless of their order, you should sort the list before converting it to a set.\n\n```python\ndef unique_Element(lst):\n    return len(set(sorted(lst))) == 1\n\nassert unique_Element([1,1,1]) == True\n```\n\nIn this modified version of the function, the list is sorted before being converted to a set. This ensures that all elements are the same, regardless of their original order in the list.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to check whether a list of numbers contains only one distinct element or not. Your code should satisfy the following assertion:\n```python\nassert unique_Element([1,1,1]) == True\n```\n\n### Response:\nHere is a Python function that checks if a list contains only one distinct element:\n\n```python\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n\nassert unique_Element([1,1,1]) == True\n```\n\nThis function works by converting the list to a set, which removes duplicate elements. Then it checks if the length of the set is 1. If it is, it means that all elements in the list were the same, so the function returns True. Otherwise, it returns False.\n\nPlease note that the order of elements in the list may affect the result. If you want to check if all elements are the same regardless of their order, you should sort the list before converting it to a set.\n\n```python\ndef unique_Element(lst):\n    return len(set(sorted(lst))) == 1\n\nassert unique_Element([1,1,1]) == True\n```\n\nIn this modified version of the function, the list is sorted before being converted to a set. This ensures that all elements are the same, regardless of their original order in the list.\n"}
