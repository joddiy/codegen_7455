{"task_id": "Mbpp/94", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\nIn this script, the function `index_minimum` takes a list of tuples as input. It uses the built-in `min` function with the `key` parameter set to a lambda function that returns the second element of each tuple. The `min` function then returns the tuple with the smallest second element. The function then returns the first element of this tuple.\n\nThe assertion at the end checks if the function works correctly. If the function returns the expected result, the assertion will not raise an error. If the function does not return the expected result, the assertion will raise an error.\n\nThis script assumes that all tuples in the input list have exactly two elements. If this is not the case, the script may not work correctly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value. Your code should satisfy the following assertion:\n```python\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\nIn this script, the function `index_minimum` takes a list of tuples as input. It uses the built-in `min` function with the `key` parameter set to a lambda function that returns the second element of each tuple. The `min` function then returns the tuple with the smallest second element. The function then returns the first element of this tuple.\n\nThe assertion at the end checks if the function works correctly. If the function returns the expected result, the assertion will not raise an error. If the function does not return the expected result, the assertion will raise an error.\n\nThis script assumes that all tuples in the input list have exactly two elements. If this is not the case, the script may not work correctly.\n"}
