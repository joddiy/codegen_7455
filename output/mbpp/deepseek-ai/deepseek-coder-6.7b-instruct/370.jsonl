{"task_id": "Mbpp/777", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef find_sum(lst):\n    return sum(set(lst))\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\nThis function works by converting the list to a set, which automatically removes any duplicate elements. Then it sums up the elements in the set.\n\nThe assertion checks that the function works correctly with the given example. If the function is correct, it will not raise an error and print nothing. If the function is not correct, it will raise an AssertionError.\n\nPlease note that the order of elements in the set is not guaranteed, so the sum of non-repeated elements might not be the same every time you run the function.\n\nIf you want to sum the non-repeated elements in the order they appear in the list, you can use a different approach:\n\n```python\ndef find_sum(lst):\n    non_repeated = []\n    for i in lst:\n        if i not in non_repeated:\n            non_repeated.append(i)\n    return sum(non_repeated)\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\nIn this version of the function, we create a new list that contains only the first occurrence of each element in the original list. Then we sum up the elements in this list.\n\nThis version of the function will give the same result every time you run it, but it will take longer to run because it has to search through the new list for each element in the original list.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the sum of non-repeated elements in a given list. Your code should satisfy the following assertion:\n```python\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef find_sum(lst):\n    return sum(set(lst))\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\nThis function works by converting the list to a set, which automatically removes any duplicate elements. Then it sums up the elements in the set.\n\nThe assertion checks that the function works correctly with the given example. If the function is correct, it will not raise an error and print nothing. If the function is not correct, it will raise an AssertionError.\n\nPlease note that the order of elements in the set is not guaranteed, so the sum of non-repeated elements might not be the same every time you run the function.\n\nIf you want to sum the non-repeated elements in the order they appear in the list, you can use a different approach:\n\n```python\ndef find_sum(lst):\n    non_repeated = []\n    for i in lst:\n        if i not in non_repeated:\n            non_repeated.append(i)\n    return sum(non_repeated)\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\nIn this version of the function, we create a new list that contains only the first occurrence of each element in the original list. Then we sum up the elements in this list.\n\nThis version of the function will give the same result every time you run it, but it will take longer to run because it has to search through the new list for each element in the original list.\n"}
