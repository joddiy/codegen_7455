{"task_id": "Mbpp/297", "completion": "\nHere is a Python script that uses recursion to flatten a nested list:\n\n```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\nThis script defines a function `flatten_list` that takes a list as input. It iterates over each element in the list. If the element is a list (checked using `isinstance`), the function is called recursively on this sublist. The result is then extended to the main list using `extend`. If the element is not a list, it is appended to the main list using `append`. The function finally returns the flattened list. The assertion checks that the function works correctly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to flatten a given nested list structure. Your code should satisfy the following assertion:\n```python\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\n### Response:\nHere is a Python script that uses recursion to flatten a nested list:\n\n```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\nThis script defines a function `flatten_list` that takes a list as input. It iterates over each element in the list. If the element is a list (checked using `isinstance`), the function is called recursively on this sublist. The result is then extended to the main list using `extend`. If the element is not a list, it is appended to the main list using `append`. The function finally returns the flattened list. The assertion checks that the function works correctly.\n"}
