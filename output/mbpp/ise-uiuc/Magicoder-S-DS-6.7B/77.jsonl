{"task_id": "Mbpp/129", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef magic_square_test(matrix):\n    n = len(matrix)\n    sum_row = [sum(matrix[i]) for i in range(n)]\n    sum_col = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    sum_diag1 = sum(matrix[i][i] for i in range(n))\n    sum_diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return len(set(sum_row)) == 1 and len(set(sum_col)) == 1 and len(set([sum_diag1, sum_diag2])) == 1\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n```\n\nThis script first calculates the sum of each row, column, and diagonal. Then it checks if all these sums are equal. If they are, the matrix is a magic square. The `set` function is used to remove duplicates from the sums, and the `len` function is used to check if all sums are the same.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to calculate whether the matrix is a magic square. Your code should satisfy the following assertion:\n```python\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef magic_square_test(matrix):\n    n = len(matrix)\n    sum_row = [sum(matrix[i]) for i in range(n)]\n    sum_col = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    sum_diag1 = sum(matrix[i][i] for i in range(n))\n    sum_diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return len(set(sum_row)) == 1 and len(set(sum_col)) == 1 and len(set([sum_diag1, sum_diag2])) == 1\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n```\n\nThis script first calculates the sum of each row, column, and diagonal. Then it checks if all these sums are equal. If they are, the matrix is a magic square. The `set` function is used to remove duplicates from the sums, and the `len` function is used to check if all sums are the same."}
