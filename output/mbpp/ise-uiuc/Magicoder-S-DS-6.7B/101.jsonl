{"task_id": "Mbpp/172", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef count_occurance(s):\n    return s.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3\n```\n\nIn this script, the function `count_occurance` takes a string `s` as input and uses the built-in `count` method of Python strings to count the number of occurrences of the string 'std'. The `assert` statement checks if the function is working as expected. If the function returns the expected result (3), the `assert` statement will not raise an error. If the function returns a different result, the `assert` statement will raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to count the number of occurence of the string 'std' in a given string. Your code should satisfy the following assertion:\n```python\nassert count_occurance(\"letstdlenstdporstd\") == 3\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef count_occurance(s):\n    return s.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3\n```\n\nIn this script, the function `count_occurance` takes a string `s` as input and uses the built-in `count` method of Python strings to count the number of occurrences of the string 'std'. The `assert` statement checks if the function is working as expected. If the function returns the expected result (3), the `assert` statement will not raise an error. If the function returns a different result, the `assert` statement will raise an `AssertionError`."}
