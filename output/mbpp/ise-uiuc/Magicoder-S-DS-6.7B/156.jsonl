{"task_id": "Mbpp/290", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublist = next(sublist for sublist in lst if len(sublist) == max_len)\n    return max_len, max_sublist\n```\n\nThis function first finds the maximum length of any sublist in the input list. Then, it finds the first sublist in the input list that has this maximum length. The function returns a tuple containing the maximum length and the sublist with this maximum length.\n\nYou can test this function with the provided assertion:\n\n```python\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n```\n\nIf the assertion passes, the function is working correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the list of maximum length in a list of lists. Your code should satisfy the following assertion:\n```python\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublist = next(sublist for sublist in lst if len(sublist) == max_len)\n    return max_len, max_sublist\n```\n\nThis function first finds the maximum length of any sublist in the input list. Then, it finds the first sublist in the input list that has this maximum length. The function returns a tuple containing the maximum length and the sublist with this maximum length.\n\nYou can test this function with the provided assertion:\n\n```python\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n```\n\nIf the assertion passes, the function is working correctly."}
