{"task_id": "Mbpp/64", "completion": "\nHere is a Python script that sorts a list of tuples using the second value of each tuple.\n\n```python\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nIn this script, we use the built-in `sorted` function in Python, which sorts the elements of a given iterable in a specific order - either ascending or descending. The `key` parameter of the `sorted` function is a function that serves as a key to compare elements in the iterable. In this case, we use a lambda function that returns the second element of each tuple, so that `sorted` will sort the tuples based on their second elements.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement will not raise an error. If the function does not return the expected result, the `assert` statement will raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a list of tuples using the second value of each tuple. Your code should satisfy the following assertion:\n```python\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\n### Response:\nHere is a Python script that sorts a list of tuples using the second value of each tuple.\n\n```python\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nIn this script, we use the built-in `sorted` function in Python, which sorts the elements of a given iterable in a specific order - either ascending or descending. The `key` parameter of the `sorted` function is a function that serves as a key to compare elements in the iterable. In this case, we use a lambda function that returns the second element of each tuple, so that `sorted` will sort the tuples based on their second elements.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement will not raise an error. If the function does not return the expected result, the `assert` statement will raise an `AssertionError`."}
