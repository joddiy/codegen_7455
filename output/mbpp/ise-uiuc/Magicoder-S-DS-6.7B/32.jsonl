{"task_id": "Mbpp/75", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(i % k == 0 for i in t)]\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n```\n\nThis script defines a function `find_tuples` that takes a list of tuples and an integer `k` as input. It uses a list comprehension to iterate over each tuple in the list. For each tuple, it checks if all elements are divisible by `k` using the `all` function and a generator expression. If all elements are divisible by `k`, it includes the tuple in the result. The result is a list of tuples that have all elements divisible by `k`.\n\nThe assertion at the end checks if the function works correctly. If the function is correct, it will not raise any errors. If not, it will raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples. Your code should satisfy the following assertion:\n```python\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(i % k == 0 for i in t)]\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n```\n\nThis script defines a function `find_tuples` that takes a list of tuples and an integer `k` as input. It uses a list comprehension to iterate over each tuple in the list. For each tuple, it checks if all elements are divisible by `k` using the `all` function and a generator expression. If all elements are divisible by `k`, it includes the tuple in the result. The result is a list of tuples that have all elements divisible by `k`.\n\nThe assertion at the end checks if the function works correctly. If the function is correct, it will not raise any errors. If not, it will raise an `AssertionError`."}
