{"task_id": "Mbpp/7", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef find_char_long(string):\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\nThis script works by splitting the input string into a list of words, then using a list comprehension to filter out any words that are less than 4 characters long. The resulting list of words is then returned. The assert statement at the end checks that the function is working as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find all words which are at least 4 characters long in a string. Your code should satisfy the following assertion:\n```python\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef find_char_long(string):\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\nThis script works by splitting the input string into a list of words, then using a list comprehension to filter out any words that are less than 4 characters long. The resulting list of words is then returned. The assert statement at the end checks that the function is working as expected."}
