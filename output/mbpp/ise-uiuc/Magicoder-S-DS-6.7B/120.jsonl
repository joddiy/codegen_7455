{"task_id": "Mbpp/247", "completion": "\nHere is a Python solution using dynamic programming. The function `lps` takes a string as input and returns the length of the longest palindromic subsequence.\n\n```python\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5\n```\n\nIn this solution, we first initialize a 2D array `dp` with the length of the string. We then fill the array in a bottom-up manner. For each substring `s[i..j]`, we check if the characters at the ends are the same. If they are, we add 2 to the length of the longest palindromic subsequence of the substring `s[i+1..j-1]`. If they are not, we take the maximum of the longest palindromic subsequence of the substring `s[i+1..j]` and the longest palindromic subsequence of the substring `s[i..j-1]`. Finally, we return the length of the longest palindromic subsequence of the entire string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the length of the longest palindromic subsequence in the given string. Your code should satisfy the following assertion:\n```python\nassert lps(\"TENS FOR TENS\") == 5\n```\n\n### Response:\nHere is a Python solution using dynamic programming. The function `lps` takes a string as input and returns the length of the longest palindromic subsequence.\n\n```python\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5\n```\n\nIn this solution, we first initialize a 2D array `dp` with the length of the string. We then fill the array in a bottom-up manner. For each substring `s[i..j]`, we check if the characters at the ends are the same. If they are, we add 2 to the length of the longest palindromic subsequence of the substring `s[i+1..j-1]`. If they are not, we take the maximum of the longest palindromic subsequence of the substring `s[i+1..j]` and the longest palindromic subsequence of the substring `s[i..j-1]`. Finally, we return the length of the longest palindromic subsequence of the entire string."}
