{"task_id": "Mbpp/760", "completion": "\nHere is a Python function that checks if a list contains only one distinct element:\n\n```python\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n```\n\nThis function works by converting the list to a set, which automatically removes any duplicate elements. Then it checks if the length of the set is equal to 1. If it is, that means all elements in the list were the same, so the function returns True. If not, the function returns False.\n\nYou can test this function with the provided assertion:\n\n```python\nassert unique_Element([1,1,1]) == True\n```\n\nThis assertion should pass without any errors.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to check whether a list of numbers contains only one distinct element or not. Your code should satisfy the following assertion:\n```python\nassert unique_Element([1,1,1]) == True\n```\n\n### Response:\nHere is a Python function that checks if a list contains only one distinct element:\n\n```python\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n```\n\nThis function works by converting the list to a set, which automatically removes any duplicate elements. Then it checks if the length of the set is equal to 1. If it is, that means all elements in the list were the same, so the function returns True. If not, the function returns False.\n\nYou can test this function with the provided assertion:\n\n```python\nassert unique_Element([1,1,1]) == True\n```\n\nThis assertion should pass without any errors."}
