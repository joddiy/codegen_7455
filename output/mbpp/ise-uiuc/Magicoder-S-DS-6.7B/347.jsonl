{"task_id": "Mbpp/749", "completion": "\nHere is a Python script that sorts a given list of strings of numbers numerically:\n\n```python\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=int)\n\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n```\n\nThis script defines a function `sort_numeric_strings` that takes a list of strings as input. It uses the `sorted` function to sort the list, but with the `key=int` argument, it converts each string in the list to an integer before comparing them. The sorted list is then returned.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the expected output, the assertion passes; otherwise, it raises an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/. Your code should satisfy the following assertion:\n```python\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n```\n\n### Response:\nHere is a Python script that sorts a given list of strings of numbers numerically:\n\n```python\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=int)\n\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n```\n\nThis script defines a function `sort_numeric_strings` that takes a list of strings as input. It uses the `sorted` function to sort the list, but with the `key=int` argument, it converts each string in the list to an integer before comparing them. The sorted list is then returned.\n\nThe assertion at the end of the script checks if the function works correctly. If the function returns the expected output, the assertion passes; otherwise, it raises an `AssertionError`."}
