{"task_id": "Mbpp/245", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    inc = [0]*n\n    dec = [0]*n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n\n    max_sum = max(inc + dec)\n\n    return max_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n```\n\nThis script uses dynamic programming to solve the problem. It first calculates the maximum sum of an increasing subsequence ending at each index and the maximum sum of a decreasing subsequence starting at each index. Then it finds the maximum sum of a bitonic subsequence by adding the two maximum sums together. The time complexity of this script is O(n), where n is the length of the input array.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing. Your code should satisfy the following assertion:\n```python\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    inc = [0]*n\n    dec = [0]*n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n\n    max_sum = max(inc + dec)\n\n    return max_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n```\n\nThis script uses dynamic programming to solve the problem. It first calculates the maximum sum of an increasing subsequence ending at each index and the maximum sum of a decreasing subsequence starting at each index. Then it finds the maximum sum of a bitonic subsequence by adding the two maximum sums together. The time complexity of this script is O(n), where n is the length of the input array."}
