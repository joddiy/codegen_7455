{"task_id": "Mbpp/244", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef next_Perfect_Square(n):\n    import math\n    root = math.sqrt(n)\n    if root == int(root):\n        return (root + 1) ** 2\n    else:\n        return (int(root) + 1) ** 2\n\nassert next_Perfect_Square(35) == 36\n```\n\nThis function first calculates the square root of the given number. If the square root is an integer, it means the given number is a perfect square, so it returns the next perfect square which is the square of the next integer. If the square root is not an integer, it means the given number is not a perfect square, so it returns the next perfect square which is the square of the next integer.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the next perfect square greater than a given number. Your code should satisfy the following assertion:\n```python\nassert next_Perfect_Square(35) == 36\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef next_Perfect_Square(n):\n    import math\n    root = math.sqrt(n)\n    if root == int(root):\n        return (root + 1) ** 2\n    else:\n        return (int(root) + 1) ** 2\n\nassert next_Perfect_Square(35) == 36\n```\n\nThis function first calculates the square root of the given number. If the square root is an integer, it means the given number is a perfect square, so it returns the next perfect square which is the square of the next integer. If the square root is not an integer, it means the given number is not a perfect square, so it returns the next perfect square which is the square of the next integer."}
