{"task_id": "Mbpp/766", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\nThis script defines a function `pair_wise` that takes a list `lst` as input and returns a list of tuples. Each tuple contains two consecutive items from the input list. The function uses list comprehension to generate the list of tuples. The `range(len(lst)-1)` generates indices for the list `lst`, and the `(lst[i], lst[i+1])` generates the tuples.\n\nThe assertion at the end checks if the function works correctly. If the function is correct, the assertion will pass and no output will be produced. If the function is incorrect, the assertion will raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to return a list of all pairs of consecutive items in a given list. Your code should satisfy the following assertion:\n```python\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\nThis script defines a function `pair_wise` that takes a list `lst` as input and returns a list of tuples. Each tuple contains two consecutive items from the input list. The function uses list comprehension to generate the list of tuples. The `range(len(lst)-1)` generates indices for the list `lst`, and the `(lst[i], lst[i+1])` generates the tuples.\n\nThe assertion at the end checks if the function works correctly. If the function is correct, the assertion will pass and no output will be produced. If the function is incorrect, the assertion will raise an `AssertionError`."}
