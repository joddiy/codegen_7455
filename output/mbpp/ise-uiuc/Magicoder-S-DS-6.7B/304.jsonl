{"task_id": "Mbpp/622", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 != 0:\n        return merged_list[n//2]\n    else:\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2.0\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\nThis script first merges the two input lists into one sorted list. Then, it checks if the size of the merged list is odd or even. If it's odd, it returns the middle element. If it's even, it returns the average of the two middle elements.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the median of two sorted lists of same size. Your code should satisfy the following assertion:\n```python\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 != 0:\n        return merged_list[n//2]\n    else:\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2.0\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\nThis script first merges the two input lists into one sorted list. Then, it checks if the size of the merged list is odd or even. If it's odd, it returns the middle element. If it's even, it returns the average of the two middle elements."}
