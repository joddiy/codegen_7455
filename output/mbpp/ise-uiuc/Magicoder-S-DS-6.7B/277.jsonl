{"task_id": "Mbpp/590", "completion": "\nHere is a Python script that uses the `cmath` module to convert polar coordinates to rectangular coordinates:\n\n```python\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\nIn this script, `cmath.cos(theta)` and `cmath.sin(theta)` are used to calculate the x and y components of the rectangular coordinates, respectively. The `assert` statement checks if the function `polar_rect` works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to convert polar coordinates to rectangular coordinates. Your code should satisfy the following assertion:\n```python\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\n### Response:\nHere is a Python script that uses the `cmath` module to convert polar coordinates to rectangular coordinates:\n\n```python\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\nIn this script, `cmath.cos(theta)` and `cmath.sin(theta)` are used to calculate the x and y components of the rectangular coordinates, respectively. The `assert` statement checks if the function `polar_rect` works as expected."}
