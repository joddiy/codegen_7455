{"task_id": "Mbpp/473", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\nThis script works by iterating over each tuple in the first list and checking if it is equal to any tuple in the second list. If it is, it adds the tuple to the intersection set. The `set()` function is used to compare the tuples irrespective of their order.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should satisfy the following assertion:\n```python\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\nThis script works by iterating over each tuple in the first list and checking if it is equal to any tuple in the second list. If it is, it adds the tuple to the intersection set. The `set()` function is used to compare the tuples irrespective of their order."}
