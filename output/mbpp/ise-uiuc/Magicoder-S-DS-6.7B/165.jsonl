{"task_id": "Mbpp/301", "completion": "\nHere is a Python function that uses recursion to find the depth of a dictionary:\n\n```python\ndef dict_depth(d):\n    if isinstance(d, dict):\n        if not d:  # empty dict\n            return 1\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n```\n\nThis function works by checking if the input is a dictionary. If it is, it checks if the dictionary is empty. If it is, it returns 1 (since the depth of an empty dictionary is 1). If the dictionary is not empty, it recursively calls itself on each value in the dictionary and returns the maximum depth plus 1. If the input is not a dictionary, it returns 0.\n\nYou can test this function with the provided assertion:\n\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\nThis assertion will pass if the function is implemented correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the depth of a dictionary. Your code should satisfy the following assertion:\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\n### Response:\nHere is a Python function that uses recursion to find the depth of a dictionary:\n\n```python\ndef dict_depth(d):\n    if isinstance(d, dict):\n        if not d:  # empty dict\n            return 1\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n```\n\nThis function works by checking if the input is a dictionary. If it is, it checks if the dictionary is empty. If it is, it returns 1 (since the depth of an empty dictionary is 1). If the dictionary is not empty, it recursively calls itself on each value in the dictionary and returns the maximum depth plus 1. If the input is not a dictionary, it returns 0.\n\nYou can test this function with the provided assertion:\n\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\nThis assertion will pass if the function is implemented correctly."}
