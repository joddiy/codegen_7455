{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    return '_' in s and s.islower()\n\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "completion": "def check_type(tup):\n    return all(isinstance(item, type(tup[0])) for item in tup)\n\nassert check_type((5, 6, 7, 3, 5, 6)) == True"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    i = _binary_search(arr, 0, n-1, x)\n    if (i == -1):\n        return False\n    if ((i + n//2) < n and arr[i + n//2] != x):\n        return False\n    return True\n\ndef _binary_search(arr, low, high, x):\n    if (high >= low):\n        mid = low + (high - low)//2\n        if ((mid == 0 or x > arr[mid-1]) and arr[mid] == x):\n            return mid\n        if (x > arr[mid]):\n            return _binary_search(arr, (mid + 1), high, x)\n        return _binary_search(arr, low, (mid -1), x)\n    return -1\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\nassert min_of_three(10,20,0)==0"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    # Separate negative and positive numbers\n    neg_nums = [num for num in arr[:n] if num < 0]\n    pos_nums = [num for num in arr[:n] if num >= 0]\n\n    # Combine negative and positive numbers\n    result = neg_nums + pos_nums\n\n    # Append the rest of the array\n    result += arr[n:]\n\n    return result\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, char):\n    return string.replace(' ', char)\n\nassert replace_blank(\"hello people\",'@')==\"hello@people\""}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateral_surface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3)==27"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    # Reverse the binary string\n    binary = binary[::-1]\n    # Set all even bits to 1\n    for i in range(0, len(binary), 2):\n        binary = binary[:i] + '1' + binary[i+1:]\n    # Reverse the binary string back to its original order\n    binary = binary[::-1]\n    # Convert the binary string back to a decimal number\n    return int(binary, 2)\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    dict_count = {}\n    for tup in lst:\n        if tup in dict_count:\n            dict_count[tup] += 1\n        else:\n            dict_count[tup] = 1\n    return dict_count\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (6, 3): 1}"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    # Initialize the dp table\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n\n    # Fill the dp table\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            for k in range(1, i):\n                if 2 * k <= k and k <= m:\n                    dp[i][j] += dp[k][j - 1]\n\n    # Calculate the total number of sequences\n    total = 0\n    for i in range(1, m + 1):\n        total += dp[i][n]\n\n    return total\n\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, [2, 4, 6, 8]]"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)\n\nassert count_charac(\"python programming\")==18"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(n):\n    import math\n    root = math.sqrt(n)\n    if root == int(root):\n        return (root + 1) ** 2\n    else:\n        return (int(root) + 1) ** 2\n\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    inc = [0]*n\n    dec = [0]*n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n\n    max_sum = max(inc + dec)\n\n    return max_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    for char in str2:\n        str1 = str1.replace(char, '')\n    return str1"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1 & set2)"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, X):\n    return tup.count(X)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    return [element] + lst\n\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(complex_number):\n    return cmath.polar(complex_number)\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    return sum(1 for i in lst if isinstance(i, int))"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))\n\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a, b):\n    return (b, a)\n\nassert swap_numbers(10,20)==(20,10)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tuples1, tuples2):\n    result = []\n    for t1, t2 in zip(tuples1, tuples2):\n        result.append((max(t1[0], t2[0]), max(t1[1], t2[1])))\n    return tuple(result)\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nassert test_duplicate([1,2,3,4,5]) == False"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(a / b for a, b in zip(t1, t2))\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_age):\n    return human_age * 7"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return n*(n+1)*(n+2)//6\n\n# Test the function\nassert find_star_num(3) == 37"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A')==65"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    i = 1\n    while i * (i + 1) <= n:\n        if n == i * (i + 1):\n            return True\n        i += 1\n    return False\n\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(t1, t2):\n    return tuple(a - b for a, b in zip(t1, t2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum\n    sum = 0\n    # Calculate the binomial coefficients\n    for i in range(n+1):\n        # Calculate the binomial coefficient\n        coeff = 1\n        for j in range(i):\n            coeff *= (n-j)\n            coeff //= (j+1)\n        # If the index is even, add it to the sum\n        if i % 2 == 0:\n            sum += coeff\n    return sum\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (7 * n - 5) // 2\n\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/56", "completion": "def check(n):\n    # Reverse the number\n    rev = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2*rev - 1\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    # Convert the integer to a string to easily access each digit\n    str_n = str(n)\n\n    # Iterate over each digit in the string\n    for digit in str_n:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if str_n.count(digit) > int(digit):\n            return False\n\n    # If no digit has a frequency greater than itself, return True\n    return True\n\n# Test the function\nassert validate(1234) == True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(i == element for i in lst)"}
{"task_id": "Mbpp/285", "completion": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function\nassert text_match_two_three(\"ac\")==(False)"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    # Calculate the sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the maximum subarray sum\n    max_sum = kadane(arr * k)\n\n    # If total sum is less than 0, return max_sum\n    if total_sum < 0:\n        return max_sum\n\n    # Otherwise, return max of two values\n    return max(max_sum, total_sum * (k - 2) + kadane(arr * k))\n\n\ndef kadane(arr):\n    # Initialize max_so_far and max_ending_here\n    max_so_far = max_ending_here = arr[0]\n\n    # Traverse through the array\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    # Return max_so_far\n    return max_so_far\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))\n\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublist = next(sublist for sublist in lst if len(sublist) == max_len)\n    return max_len, max_sublist"}
{"task_id": "Mbpp/292", "completion": "def find(num1, num2):\n    return num1 // num2\n\nassert find(10,3) == 3"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\nassert otherside_rightangle(7,8)==10.63014581273465"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = None\n    for i in lst:\n        if isinstance(i, (int, float)):\n            if max_val is None or i > max_val:\n                max_val = i\n    return max_val\n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    # Sort the list in descending order\n    digits.sort(reverse=True)\n    \n    # Join the list elements into a string and convert it to integer\n    max_num = int(''.join(map(str, digits)))\n    \n    return max_num\n\n# Test the function\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(divisors)\n\nassert sum_div(8)==7"}
{"task_id": "Mbpp/296", "completion": "def merge_and_count(arr, temp, left, mid, right):\n    i = left\n    j = mid\n    k = left\n    inv_count = 0\n\n    while (i <= mid - 1) and (j <= right):\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i)\n            k += 1\n            j += 1\n\n    while i <= mid - 1:\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp, left, right):\n    inv_count = 0\n\n    if right > left:\n        mid = (right + left) // 2\n\n        inv_count += merge_sort_and_count(arr, temp, left, mid)\n        inv_count += merge_sort_and_count(arr, temp, mid + 1, right)\n\n        inv_count += merge_and_count(arr, temp, left, mid + 1, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp = [0]*len(arr)\n    return merge_sort_and_count(arr, temp, 0, len(arr) - 1)\n\nassert get_Inv_Count([1,20,6,4,5]) == 5"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(tuples):\n    # Create a dictionary to store the aggregate for each name\n    aggregate_dict = {}\n    for name, score in tuples:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n\n    # Find the name with the maximum aggregate\n    max_aggregate_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    return (max_aggregate_name, aggregate_dict[max_aggregate_name])\n\n# Test the function\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    dp = [[0] * (2*n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(2*i+1):\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if j < 2*i:\n                dp[i][j] += dp[i-1][j+1]\n    return dp[n][n]\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if isinstance(d, dict):\n        if not d:  # empty dict\n            return 1\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        words_list = word.split()\n        for w in words_list:\n            if w.lower().startswith('p'):\n                return w, w\n    return None\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = float('-inf')\n    for j in range(i+1, n):\n        if arr[j] > arr[i]:\n            if j == k:\n                max_sum = max(max_sum, arr[i] + arr[j])\n            else:\n                max_sum = max(max_sum, arr[i] + max_sum_increasing_subseq(arr, n, j, k))\n    return max_sum\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, num):\n    # Combine the two lists\n    combined = [(a, b) for a in list1 for b in list2]\n    # Sort the combined list in descending order based on the product of the factors\n    combined.sort(key=lambda x: x[0]*x[1], reverse=True)\n    # Return the first 'num' products\n    return [x[0]*x[1] for x in combined[:num]]\n\n# Test the function\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"task_id": "Mbpp/309", "completion": "def maximum(num1, num2):\n    return max(num1, num2)\n\nassert maximum(5,10) == 10"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(num1, num2):\n    return (num1 ^ num2) < 0"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    bit_position = 0\n    while n > 0:\n        if n & 1 == 0:\n            return n | (1 << bit_position)\n        bit_position += 1\n        n >>= 1\n    return n"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i // 2\n\nassert highest_Power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = [2, 1]\n        for i in range(2, n + 1):\n            lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n        return lucas_numbers[n]\n\n# Test the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        result.append({keys[i]: {values1[i]: values2[i]}})\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i)\n    return dp[n]\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/59", "completion": "def nth_octagonal(n):\n    return n * (2 * n - 1)\n\nassert nth_octagonal(5) == 65"}
{"task_id": "Mbpp/396", "completion": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\nassert check_char(\"abba\") == \"Valid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n\nassert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(numbers):\n    return sum(int(digit) for number in numbers for digit in str(number))\n\nassert sum_of_digits([10,2,56])==14"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, element):\n    return element in tuplex\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(n):\n    return n % 2 != 0\n\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the first digit that is smaller than the digit after it from the right\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        # If no such digit is found, the number is already the biggest possible\n        return -1\n    \n    # Find the smallest digit that is greater than the digit at i from the right\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the digits at i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after i\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))\n\nassert rearrange_bigger(12)==21"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    return min(x*y for x, y in lst)\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    # Filter out non-numeric values\n    num_lst = [i for i in lst if isinstance(i, (int, float))]\n    # Return the minimum value\n    return min(num_lst)\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [i[n] for i in lst]\n\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2]) if arr[-1]*arr[-2] > arr[0]*arr[1] else (arr[0], arr[1])\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nassert cube_Sum(2) == 72"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(x) for x in tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    # Use heapify to rearrange the elements\n    heapq.heapify(numbers)\n    \n    # Use nlargest to get the n largest numbers\n    largest_numbers = heapq.nlargest(n, numbers)\n    \n    # Reverse the list to get the numbers in descending order\n    largest_numbers.reverse()\n    \n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(x, y, focus_distance):\n    return y - focus_distance"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    # Calculate the median length\n    median = (2 * (a + b + c) - max(a, b, c) - min(a, b, c)) / 2\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if num <= i:\n            return False\n    return True\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return s[::2]\n\nassert remove_odd(\"python\")==(\"yhn\")"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j] or tuples[i][::-1] == tuples[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))\n\nassert multiple_to_single([11, 33, 50])==113350"}
{"task_id": "Mbpp/440", "completion": "import re\n\ndef find_adverb_position(sentence):\n    adverbs = [\"clearly\", \"easily\", \"quickly\", \"slowly\", \"happily\", \"sadly\", \"always\", \"never\", \"often\", \"sometimes\", \"often\", \"rarely\", \"suddenly\", \"carefully\", \"warmly\", \"politely\", \"patiently\", \"quickly\", \"slowly\", \"happily\", \"sadly\", \"always\", \"never\", \"often\", \"sometimes\", \"often\", \"rarely\", \"suddenly\", \"carefully\", \"warmly\", \"politely\", \"patiently\", \"quickly\", \"slowly\", \"happily\", \"sadly\", \"always\", \"never\", \"often\", \"sometimes\", \"often\", \"rarely\", \"suddenly\", \"carefully\", \"warmly\", \"politely\", \"patiently\"]\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] in adverbs:\n            return i, i+1, words[i]\n    return None\n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 1, 'clearly')"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6 * size ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    count = 0\n    total = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        total += 1\n    return count / total\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tuples):\n    return tuple(tuple(a*b for a, b in zip(*t)) for t in tuples)\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10))) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(lst):\n    return [i ** 3 for i in lst]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    # Initialize the first three Perrin numbers\n    a, b, c = 3, 0, 2\n    # Initialize the sum\n    sum_perrin = 0\n    # Calculate the sum of the first n Perrin numbers\n    for _ in range(n):\n        sum_perrin += a\n        a, b, c = b, c, a + b\n    return sum_perrin\n\n# Test the function\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return s.replace(' ', '')\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n    return sum\n\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "completion": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month number is in the list of months with 31 days\n    if month_number in months_with_31_days:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_monthnumb_number(5)==True"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10,20)==200"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    result = \"\"\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\nassert recursive_list_sum([1, 2, [3,4],[5,6]])==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "completion": "import itertools\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend(list(itertools.combinations(lst, i)))\n    return result\n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_ending_here = [0]*n\n    max_ending_here[0] = arr[0]\n    for i in range(1, n):\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1]*arr[i])\n    return max_ending_here[-1]\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) == 9"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/474", "completion": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return min(arr) + max(arr)"}
{"task_id": "Mbpp/477", "completion": "def to_lower(s):\n    return s.lower()\n\nassert to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    return int(str(n)[0])\n\nassert first_Digit(123) == 1"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\")==\"pYTHON\""}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    # Initialize a 2D array to store the Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + j*bell[i][j-1]\n    return bell[n][0]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    sum_diff = 0\n    for i in range(min(len(num1_str), len(num2_str))):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n    if len(num1_str) > len(num2_str):\n        sum_diff += sum(int(num1_str[i]) for i in range(len(num2_str), len(num1_str)))\n    elif len(num2_str) > len(num1_str):\n        sum_diff += sum(int(num2_str[i]) for i in range(len(num1_str), len(num2_str)))\n    return sum_diff"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(0, n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    return tuple(sorted(set(t1 + t2)))\n\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "completion": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst):\n    unique_elements = set(lst)\n    return len(unique_elements) * (len(unique_elements) - 1) // 2\n\nassert count_Pairs([1,2,1]) == 2"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return list(s)\n\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nassert sum_digits(345)==12"}
{"task_id": "Mbpp/567", "completion": "def is_sorted_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]\n\nassert empty_list(5)==[{},{},{},{},{}]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return (all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or\n            all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))\n\n# Test the function\nassert is_Monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(lst):\n    return list(set(lst))"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(lst)\n    # Initialize the product to 1\n    product = 1\n    # Multiply each unique number in the set with the product\n    for num in unique_set:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/574", "completion": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n\n# Test the function\nassert surfacearea_cylinder(10,5)==942.4710048051844"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(sub, main):\n    return sub in main"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        last_digit = 1\n        for i in range(2, n+1):\n            last_digit = (last_digit * i) % 10\n        return last_digit"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [val for pair in zip(list1, list2, list3) for val in pair]\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    return tuple(set(t1) ^ set(t2))\n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "completion": "def extract_even(nested_tuple):\n    return tuple(i if isinstance(i, int) and i % 2 == 0 else extract_even(i) for i in nested_tuple)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "completion": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the area of the lateral surfaces\n    lateral_area = 4 * base_edge * height\n    \n    # Calculate the area of the top surface\n    top_area = 1/2 * base_edge ** 2\n    \n    # Add up all the areas to get the total surface area\n    total_surface_area = base_area + lateral_area + top_area\n    \n    return total_surface_area\n\n# Test the function\nassert surface_Area(3,4) == 33"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(lst, sub):\n    if len(sub) > len(lst):\n        return False\n    for i in range(len(lst) - len(sub) + 1):\n        if lst[i:i+len(sub)] == sub:\n            return True\n    return False"}
{"task_id": "Mbpp/582", "completion": "def is_dict_empty(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "completion": "import math\n\ndef catalan_number(n):\n    return math.comb(2*n, n) // (n + 1)\n\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    # Sort the dataset in descending order by price\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    # Return the first n items\n    return sorted_dataset[:n]\n\n# Test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)\n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    return [i**2 for i in range(int(start**0.5), int(end**0.5)+1)]\n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "completion": "import math\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(n, i) * math.comb(n, i+1)\n    return sum\n\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even - odd if even and odd else None\n\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(bin1, bin2):\n    count = 0\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            count += 1\n    return count\n\nassert min_Swaps(\"1101\",\"1110\") == 1"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    i = min(k//2, len1)\n    j = k - i\n\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, j)\n    elif arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1, arr2[j:], i)\n    else:\n        return arr1[i-1]\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(n):\n    # Convert the number to string to find its length\n    num_str = str(n)\n    num_len = len(num_str)\n\n    # Initialize sum\n    sum = 0\n\n    # Calculate sum of the power of its digits\n    for digit in num_str:\n        sum += int(digit) ** num_len\n\n    # If sum is equal to the original number, it is an Armstrong number\n    if sum == n:\n        return True\n    else:\n        return False\n\n# Test the function\nassert armstrong_number(153)==True"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum_num = n * (n + 1) // 2\n    avg_num = sum_num / n\n    return (sum_num, avg_num)\n\nassert sum_average(10)==(55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0\n\n# Test the function\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    char_dict = {}\n    for char in s:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n    return lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\nassert reverse_words(\"python program\")==(\"program python\")"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef degree_radian(degrees):\n    return math.radians(degrees)\n\nassert degree_radian(90)==1.5707963267948966"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test the function\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n# Test the function\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 2, 3, 4, 4, 5]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    return [sum(t)/len(t) for t in tuples]\n\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR operation to find the bit positions where the numbers differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n\n    # If the count is exactly 1, then the numbers differ at one bit position only\n    return count == 1"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = [i for i in s if i.isdigit()]\n    chars = [i for i in s if not i.isdigit()]\n    return ''.join(chars + nums)\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(nums):\n    nums.sort()\n    subsets = [[] for _ in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                if len(subsets[i]) < len(subsets[j]) + 1:\n                    subsets[i] = subsets[j] + [nums[i]]\n    return max(len(subset) for subset in subsets)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 != 0:\n        return merged_list[n//2]\n    else:\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2.0\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()\n\nassert is_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "completion": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(' ', '%20')\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "completion": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1,2,3,4,5]) == [2,4]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n    for i in range(len(strings)):\n        if strings[i] != patterns[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n    return adjacent_coordinates\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_')\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    return [i for i in lst if i != 0] + [0] * lst.count(0)"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += lst[i] ^ lst[j]\n    return sum\n\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "completion": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(amount, initial_amount):\n    return amount == initial_amount"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(velocity, temperature):\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215*temperature - 11.37*velocity**0.16 + 0.3965*temperature*velocity**0.16\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index\n\n# Test the function\nassert wind_chill(120,35)==40"}
{"task_id": "Mbpp/639", "completion": "def sum_names(names):\n    return sum(len(name) for name in names if name[0].isupper())\n\nassert sum_names(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/640", "completion": "import re\n\ndef remove_parenthesis(string):\n    return re.sub(r'\\([^)]*\\)', '', string)\n\nassert remove_parenthesis(\"python (chrome)\") == \"python\""}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples, k):\n    return [t for t in tuples if all(i % k == 0 for i in t)]\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False\n\nassert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the first k elements of the array\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] / (n*n)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "completion": "def filter_data(student_data, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in student_data.items() if height > min_height and weight > min_weight}\n\n# Test the function\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    return sum(1 for a, b in zip(list1, list2) if a == b)\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base**power))\n\nassert power_base_sum(2,100)==115"}
{"task_id": "Mbpp/725", "completion": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(num):\n    return num % 11 == 0\n\nassert is_Diff(12345) == False"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    # The lateral surface area of a cone is calculated using the formula:\n    # LSA = \u03c0 * r * l\n    # where r is the radius of the base and l is the slant height of the cone.\n    # The slant height of the cone is calculated using the Pythagorean theorem:\n    # l = sqrt(r^2 + h^2)\n    l = math.sqrt(r**2 + h**2)\n    LSA = math.pi * r * l\n    return LSA\n\n# Test the function\nassert lateralsurface_cone(5,12)==204.20352248333654"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == num:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum += prod\n    return sum\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n\n    # If the number is 0 or 1, return the number itself\n    if num_bits <= 2:\n        return n\n\n    # Calculate the mask for the middle bits\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits\n    n = n ^ mask\n\n    return n"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)\n\n# Test the function\nassert left_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiou]', s, re.I))\n\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "completion": "import math\n\ndef find_Index(n):\n    # The formula to find the index of smallest triangular number with n digits is:\n    # index = (10^(n-1) - 1) / log(10)\n    index = (10**(n-1) - 1) / math.log10(10)\n    return int(index)\n\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(string):\n    return len(set(string)) == 1"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2\n\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return None in tup\n\nassert check_none((10, 4, 5, 6, None)) == True"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/746", "completion": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * math.pi * (radius**2)\n\nassert sector_area(4,45)==6.283185307179586"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    return ' '.join(s)\n\nassert capital_words_spaces(\"Python\") == 'P y t h o n'"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)\n\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    return lst + list(tup)\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(int(n/2) - 1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True\n\n# Test the function\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n*(n+1)*(n+2)//6\n\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "completion": "def min_k(tuples, k):\n    # Sort the tuples based on the second element of each tuple\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    # Return the first k elements\n    return sorted_tuples[:k]\n\n# Test the function\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    return [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    freq = {}\n    for s in lst:\n        if s in freq:\n            freq[s] += 1\n        else:\n            freq[s] = 1\n        if s[::-1] in freq:\n            freq[s[::-1]] -= 1\n        else:\n            freq[s[::-1]] = -1\n    return sum(abs(v) for v in freq.values()) // 2\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        num = float(s)\n        if '.' in s:\n            decimal_part = s.split('.')[1]\n            if len(decimal_part) > 2:\n                return False\n        return True\n    except ValueError:\n        return False\n\nassert is_decimal('123.11')==True"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    # Months with 30 days are April (4), June (6), September (9) and November (11)\n    return month_number in [4, 6, 9, 11]\n\n# Test the function\nassert check_monthnumber_number(6)==True"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius**3)\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "completion": "\nA polite number is a number that is the sum of two or more consecutive positive integers. The first few polite numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 2"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_dict = {}\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_dict:\n            count += num_dict[complement]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return [i for i in li1 if i not in li2]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening = set(\"({[\")\n    closing = set(\")}]\")\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n\n    return not stack\n\nassert check_expression(\"{()}[{}]\") == True"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    words = [word for word in words if len(word) != k]\n    return ' '.join(words)\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "completion": "def occurrence_substring(string, substring):\n    start = string.find(substring)\n    if start == -1:\n        return None\n    else:\n        return (substring, start, start + len(substring) - 1)\n\nassert occurrence_substring('python programming, python language','python')==('python', 0, 5)"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(s):\n    return chr((sum(ord(c) for c in s) % 26) + ord('a'))\n\nassert get_Char(\"abc\") == \"f\""}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(i for i in set(lst) if lst.count(i) == 1)"}
{"task_id": "Mbpp/778", "completion": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [[k]*len(list(g)) for k, g in groupby(lst)]\n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for i in range(1, len(tuples) + 1):\n        for comb in combinations(tuples, i):\n            result.append((sum(x[0] for x in comb), sum(x[1] for x in comb)))\n    return result\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        result += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return result\n\nassert odd_length_sum([1,2,4]) == 14"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return \"More than one even number in the list\"\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return \"More than one odd number in the list\"\n    if even_num is None or odd_num is None:\n        return \"No even or odd number in the list\"\n    return even_num * odd_num\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tup_str):\n    return tuple(map(int, tup_str.strip('()').split(',')))\n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "completion": "import bisect\n\ndef right_insertion(lst, val):\n    return bisect.bisect_right(lst, val)\n\n# Test the function\nassert right_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/787", "completion": "import re\n\ndef text_match_three(text):\n    pattern = 'abbb'\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False\n\n# Test the function\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]-1] + seq[i-seq[i-1]])\n        return seq[-1]\n\nassert sequence(10) == 6"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, str):\n    return tuple(lst + [str])\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    arr.reverse()\n    return len(arr) - arr.index(x) - 1"}
{"task_id": "Mbpp/794", "completion": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\nassert text_starta_endb(\"aabbbb\")"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n\nassert sum_in_range(2,5) == 8"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)\n\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    # In n<<d, last d bits are 0. To put first 32-d bits of n at last, do bitwise or of n<<d with n>>(32-d)\n    return (n << d)|(n >> (32 - d))\n\n# Test the function\nassert left_rotate(16, 2) == 64"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius**2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(' ', '')\n\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n\nassert is_product_even([1,2,3]) == True"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    return max(lst, key=sum)\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] >= t2[i]:\n            return False\n    return True\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(string):\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n*(2*n-1)\n\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1\n\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, sub):\n    for item in lst:\n        if sub in item:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    n = str(n)\n    for i in range(len(n)-2):\n        if n[i] == n[i+1] and n[i+1] == n[i+2]:\n            return False\n    return True\n\nassert is_undulating(1212121) == True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b\n\nassert power(3,4) == 81"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n\nassert Find_Min_Length([[1],[1,2]]) == 1"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lst):\n    flattened_list = [item for sublist in lst for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(num_list):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    return bin(n)[2:]"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    # Increment n by 1 and convert to string\n    n = str(n + 1)\n    # Check if n is a palindrome\n    while n != n[::-1]:\n        # If not, increment n by 1\n        n = str(int(n) + 1)\n    # Return the next smallest palindrome\n    return int(n)\n\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k-1]\n\nassert kth_element([12,3,5,7,19], 2) == 3"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\nassert snake_to_camel('python_program')=='PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "import math\n\ndef eulerian_num(n, m):\n    return math.factorial(n - m) // math.factorial(n - m - m)\n\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return lst.count(True)"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    if len(s) == 0:\n        return 0\n    else:\n        return min(s[i:] + s[:i] for i in range(len(s))) == s"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, rotations):\n    # Convert binary string to decimal\n    decimal_num = int(binary_string, 2)\n\n    # Rotate the binary string\n    rotated_string = binary_string[-rotations:] + binary_string[:-rotations]\n\n    # Convert rotated binary string to decimal\n    rotated_decimal = int(rotated_string, 2)\n\n    # Check if the rotated decimal is odd\n    if rotated_decimal % 2 != 0:\n        return 1\n    else:\n        return 0\n\ndef count_odd_equivalents(binary_string, rotations):\n    count = 0\n    for i in range(len(binary_string)):\n        count += odd_Equivalent(binary_string[i:] + binary_string[:i], rotations)\n    return count\n\n# Test the function\nassert count_odd_equivalents(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    # Convert the first list to a set\n    common_elements = set(nested_lists[0])\n\n    # Iterate over the remaining lists\n    for lst in nested_lists[1:]:\n        # Update the common elements to be the intersection of the current common elements and the current list\n        common_elements = common_elements.intersection(lst)\n\n    # Convert the common elements back to a list and return\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\nassert check_integer(\"python\")==False"}
{"task_id": "Mbpp/115", "completion": "def empty_dict(lst):\n    return all(not d for d in lst)\n\nassert empty_dict([{},{},{}])==True"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(lst):\n    return [tuple(map(float, sublist)) for sublist in lst]\n\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\")==['python','programming']"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if arr[mid] == arr[mid ^ 1]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return arr[low]\n\nassert search([1,1,2,2,3]) == 3"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    first_occurrence = string.find(char)\n    if first_occurrence != -1:\n        last_occurrence = string.rfind(char)\n        if last_occurrence != first_occurrence:\n            string = string[:first_occurrence] + string[first_occurrence+1:last_occurrence] + string[last_occurrence+1:]\n    return string"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": "Mbpp/123", "completion": "def d(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * i != n:\n                sum = sum + i + n // i\n            else:\n                sum = sum + i\n            i += 1\n    return sum\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(2, n + 1):\n        j = d(i)\n        if j > i and d(j) == i:\n            sum += i\n    return sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "completion": "import cmath\nimport math\n\ndef angle_complex(z):\n    return cmath.phase(z)\n\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for char in binary_string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = abs(count_zero - count_one)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(num1, num2):\n    # Find the smaller number\n    min_num = min(num1, num2)\n    \n    # Initialize sum of common divisors\n    sum_divisors = 0\n    \n    # Loop through all numbers from 1 to min_num\n    for i in range(1, min_num + 1):\n        # If i is a common divisor, add it to the sum\n        if num1 % i == 0 and num2 % i == 0:\n            sum_divisors += i\n            \n    return sum_divisors\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    n = len(matrix)\n    sum_row = [sum(matrix[i]) for i in range(n)]\n    sum_col = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    sum_diag1 = sum(matrix[i][i] for i in range(n))\n    sum_diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return len(set(sum_row)) == 1 and len(set(sum_col)) == 1 and len(set([sum_diag1, sum_diag2])) == 1\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==\"exercises\""}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n*(2*n-1)\n\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "completion": "def zero_count(arr):\n    zero_count = sum(1 for i in arr if i == 0)\n    non_zero_count = sum(1 for i in arr if i != 0)\n    return zero_count / non_zero_count if non_zero_count != 0 else 0\n\nimport math\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    # Start from the largest power of 2\n    power = 1 << 30\n\n    # Continue until the power becomes 0\n    while power > 0:\n        # If the current power of 2 is greater than or equal to n, subtract it\n        if power <= n:\n            n -= power\n\n        # If n becomes 0, return True\n        if n == 0:\n            return True\n\n        # Reduce the power of 2\n        power >>= 1\n\n    # If n is not 0 after the loop, return False\n    return False\n\n# Test the function\nassert is_Sum_Of_Powers_Of_Two(10) == True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lst):\n    return [item for sublist in lst for item in sublist]\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    lst.sort()\n    return lst\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "completion": "def find_lists(t):\n    return sum(1 for i in t if isinstance(i, list))\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    # Calculate the area of the base\n    base_area = 0.5 * base * height\n    \n    # Calculate the volume\n    volume = base_area * length\n    \n    return volume\n\n# Test the function\nassert find_Volume(10,8,6) == 240"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)\n\nassert max_Abs_Diff((2,1,5,3)) == 4"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    def extended_euclidean(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            gcd, x, y = extended_euclidean(b % a, a)\n            return (gcd, y - (b // a) * x, x)\n\n    gcd, x, y = extended_euclidean(a, b)\n\n    if n % gcd != 0:\n        return None\n\n    x *= n // gcd\n    y *= n // gcd\n\n    return (x, y)\n\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(lst1, lst2):\n    return [i for i in lst1 if i not in lst2]\n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/164", "completion": "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef are_equivalent(a, b):\n    return sum_divisors(a) == sum_divisors(b)\n\nassert are_equivalent(36, 57) == False"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == chr(97 + i).lower():\n            count += 1\n    return count\n\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
