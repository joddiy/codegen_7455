{"task_id": "Mbpp/580", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef extract_even(nested_tuple):\n    return tuple(i if isinstance(i, int) and i % 2 == 0 else extract_even(i) for i in nested_tuple)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\nThis script defines a function `extract_even` that recursively traverses a nested tuple. If an element is an integer and even, it is kept; otherwise, the function is called recursively on the element. The result is a new tuple with only the even elements. The assertion at the end verifies that the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to remove uneven elements in the nested mixed tuple. Your code should satisfy the following assertion:\n```python\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef extract_even(nested_tuple):\n    return tuple(i if isinstance(i, int) and i % 2 == 0 else extract_even(i) for i in nested_tuple)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\nThis script defines a function `extract_even` that recursively traverses a nested tuple. If an element is an integer and even, it is kept; otherwise, the function is called recursively on the element. The result is a new tuple with only the even elements. The assertion at the end verifies that the function works correctly."}
