{"task_id": "Mbpp/799", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef left_rotate(n, d):\n    # In n<<d, last d bits are 0. To put first 32-d bits of n at last, do bitwise or of n<<d with n>>(32-d)\n    return (n << d)|(n >> (32 - d))\n\n# Test the function\nassert left_rotate(16, 2) == 64\n```\n\nIn the above code, `n<<d` shifts the bits of `n` to the left by `d` places, and `n>>(32-d)` shifts the bits of `n` to the right by `(32-d)` places. The bitwise OR operator `|` is used to combine these two operations.\n\nThe function `left_rotate` takes two arguments: `n`, the number to be rotated, and `d`, the number of bits to rotate. The function returns the result of the rotation.\n\nThe assertion at the end tests the function with the given example. If the function is implemented correctly, this assertion should pass without any error.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef left_rotate(n, d):\n    # In n<<d, last d bits are 0. To put first 32-d bits of n at last, do bitwise or of n<<d with n>>(32-d)\n    return (n << d)|(n >> (32 - d))\n\n# Test the function\nassert left_rotate(16, 2) == 64\n```\n\nIn the above code, `n<<d` shifts the bits of `n` to the left by `d` places, and `n>>(32-d)` shifts the bits of `n` to the right by `(32-d)` places. The bitwise OR operator `|` is used to combine these two operations.\n\nThe function `left_rotate` takes two arguments: `n`, the number to be rotated, and `d`, the number of bits to rotate. The function returns the result of the rotation.\n\nThe assertion at the end tests the function with the given example. If the function is implemented correctly, this assertion should pass without any error."}
