{"task_id": "Mbpp/611", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n```\n\nThis script defines a function `max_of_nth` that takes a matrix and an index `n` as input. It uses a generator expression to extract the `n`th element from each row of the matrix, and then uses the built-in `max` function to find the maximum value. The `assert` statement checks if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column. Your code should satisfy the following assertion:\n```python\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n```\n\nThis script defines a function `max_of_nth` that takes a matrix and an index `n` as input. It uses a generator expression to extract the `n`th element from each row of the matrix, and then uses the built-in `max` function to find the maximum value. The `assert` statement checks if the function works correctly."}
