{"task_id": "Mbpp/558", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    sum_diff = 0\n    for i in range(min(len(num1_str), len(num2_str))):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n    if len(num1_str) > len(num2_str):\n        sum_diff += sum(int(num1_str[i]) for i in range(len(num2_str), len(num1_str)))\n    elif len(num2_str) > len(num1_str):\n        sum_diff += sum(int(num2_str[i]) for i in range(len(num1_str), len(num2_str)))\n    return sum_diff\n```\n\nThis function works by converting the input integers to strings, then iterating over the characters in the strings. For each pair of characters, it calculates the absolute difference and adds it to the sum. If one number is longer than the other, it adds the remaining digits from the longer number to the sum.\n\nThe assertion `assert digit_distance_nums(1,2) == 1` is satisfied by this function.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    sum_diff = 0\n    for i in range(min(len(num1_str), len(num2_str))):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n    if len(num1_str) > len(num2_str):\n        sum_diff += sum(int(num1_str[i]) for i in range(len(num2_str), len(num1_str)))\n    elif len(num2_str) > len(num1_str):\n        sum_diff += sum(int(num2_str[i]) for i in range(len(num1_str), len(num2_str)))\n    return sum_diff\n```\n\nThis function works by converting the input integers to strings, then iterating over the characters in the strings. For each pair of characters, it calculates the absolute difference and adds it to the sum. If one number is longer than the other, it adds the remaining digits from the longer number to the sum.\n\nThe assertion `assert digit_distance_nums(1,2) == 1` is satisfied by this function."}
