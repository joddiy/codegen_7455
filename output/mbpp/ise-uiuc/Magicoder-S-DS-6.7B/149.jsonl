{"task_id": "Mbpp/281", "completion": "\nHere is a Python function that checks if all elements in a list are unique:\n\n```python\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n```\n\nThis function works by converting the list to a set (which automatically removes duplicates because sets only allow unique elements). Then it checks if the length of the list and the set are the same. If they are, all elements in the list are unique, so the function returns True. If not, there are duplicates, so the function returns False.\n\nYou can test this function with the provided assertion:\n\n```python\nassert all_unique([1,2,3]) == True\n```\n\nThis assertion should pass without any errors, indicating that the function is working correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function to check if the elements of a given list are unique or not. Your code should satisfy the following assertion:\n```python\nassert all_unique([1,2,3]) == True\n```\n\n### Response:\nHere is a Python function that checks if all elements in a list are unique:\n\n```python\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n```\n\nThis function works by converting the list to a set (which automatically removes duplicates because sets only allow unique elements). Then it checks if the length of the list and the set are the same. If they are, all elements in the list are unique, so the function returns True. If not, there are duplicates, so the function returns False.\n\nYou can test this function with the provided assertion:\n\n```python\nassert all_unique([1,2,3]) == True\n```\n\nThis assertion should pass without any errors, indicating that the function is working correctly."}
