{"task_id": "Mbpp/223", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef is_majority(arr, n, x):\n    i = _binary_search(arr, 0, n-1, x)\n    if (i == -1):\n        return False\n    if ((i + n//2) < n and arr[i + n//2] != x):\n        return False\n    return True\n\ndef _binary_search(arr, low, high, x):\n    if (high >= low):\n        mid = low + (high - low)//2\n        if ((mid == 0 or x > arr[mid-1]) and arr[mid] == x):\n            return mid\n        if (x > arr[mid]):\n            return _binary_search(arr, (mid + 1), high, x)\n        return _binary_search(arr, low, (mid -1), x)\n    return -1\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\nIn this script, the function `is_majority` checks if the given element `x` is the majority element in the sorted array `arr`. It first uses the `_binary_search` function to find the first occurrence of `x` in `arr`. If `x` is not present in `arr`, `_binary_search` returns `-1`. If `x` is present, it then checks if `x` is a majority element by checking if there is another `x` in the array that is at least `n/2` positions away from the first occurrence of `x`. If `x` is indeed a majority element, `is_majority` returns `True`. Otherwise, it returns `False`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.). Your code should satisfy the following assertion:\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef is_majority(arr, n, x):\n    i = _binary_search(arr, 0, n-1, x)\n    if (i == -1):\n        return False\n    if ((i + n//2) < n and arr[i + n//2] != x):\n        return False\n    return True\n\ndef _binary_search(arr, low, high, x):\n    if (high >= low):\n        mid = low + (high - low)//2\n        if ((mid == 0 or x > arr[mid-1]) and arr[mid] == x):\n            return mid\n        if (x > arr[mid]):\n            return _binary_search(arr, (mid + 1), high, x)\n        return _binary_search(arr, low, (mid -1), x)\n    return -1\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\nIn this script, the function `is_majority` checks if the given element `x` is the majority element in the sorted array `arr`. It first uses the `_binary_search` function to find the first occurrence of `x` in `arr`. If `x` is not present in `arr`, `_binary_search` returns `-1`. If `x` is present, it then checks if `x` is a majority element by checking if there is another `x` in the array that is at least `n/2` positions away from the first occurrence of `x`. If `x` is indeed a majority element, `is_majority` returns `True`. Otherwise, it returns `False`."}
