{"task_id": "Mbpp/133", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n```\n\nThis script defines a function `sum_negativenum` that takes a list of numbers as input. It uses a generator expression to iterate over the numbers in the list and only selects the numbers that are less than zero. The `sum` function then adds up these selected numbers. The `assert` statement checks if the result of the function is equal to -32. If the function works correctly, the `assert` statement will not raise an error.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to calculate the sum of the negative numbers of a given list of numbers. Your code should satisfy the following assertion:\n```python\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n```\n\nThis script defines a function `sum_negativenum` that takes a list of numbers as input. It uses a generator expression to iterate over the numbers in the list and only selects the numbers that are less than zero. The `sum` function then adds up these selected numbers. The `assert` statement checks if the result of the function is equal to -32. If the function works correctly, the `assert` statement will not raise an error."}
