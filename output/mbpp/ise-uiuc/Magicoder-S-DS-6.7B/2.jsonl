{"task_id": "Mbpp/4", "completion": "\nHere is a Python script that uses the heapq module to solve the problem:\n\n```python\nimport heapq\n\ndef heap_queue_largest(numbers, n):\n    # Use heapify to rearrange the elements\n    heapq.heapify(numbers)\n    \n    # Use nlargest to get the n largest numbers\n    largest_numbers = heapq.nlargest(n, numbers)\n    \n    # Reverse the list to get the numbers in descending order\n    largest_numbers.reverse()\n    \n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\nThis script first converts the list into a heap, which is a binary tree-based data structure where the parent node is greater than or equal to its child nodes. Then it uses the nlargest function to get the n largest numbers from the heap. Finally, it reverses the list to get the numbers in descending order.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order. Your code should satisfy the following assertion:\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n### Response:\nHere is a Python script that uses the heapq module to solve the problem:\n\n```python\nimport heapq\n\ndef heap_queue_largest(numbers, n):\n    # Use heapify to rearrange the elements\n    heapq.heapify(numbers)\n    \n    # Use nlargest to get the n largest numbers\n    largest_numbers = heapq.nlargest(n, numbers)\n    \n    # Reverse the list to get the numbers in descending order\n    largest_numbers.reverse()\n    \n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\nThis script first converts the list into a heap, which is a binary tree-based data structure where the parent node is greater than or equal to its child nodes. Then it uses the nlargest function to get the n largest numbers from the heap. Finally, it reverses the list to get the numbers in descending order."}
