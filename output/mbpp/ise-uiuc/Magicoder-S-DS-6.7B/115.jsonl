{"task_id": "Mbpp/239", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef get_total_number_of_sequences(m, n):\n    # Initialize the dp table\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n\n    # Fill the dp table\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            for k in range(1, i):\n                if 2 * k <= k and k <= m:\n                    dp[i][j] += dp[k][j - 1]\n\n    # Calculate the total number of sequences\n    total = 0\n    for i in range(1, m + 1):\n        total += dp[i][n]\n\n    return total\n\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\nThis script uses dynamic programming to solve the problem. It first initializes a 2D dp table where dp[i][j] is the number of sequences of length j that ends with i. Then it fills the dp table by iterating over all possible values of i and j and for each possible value of k, it adds the number of sequences of length j - 1 that ends with k to dp[i][j]. Finally, it calculates the total number of sequences by summing up the number of sequences of length n that ends with each value of i.\n\nThe assertion at the end checks if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. Your code should satisfy the following assertion:\n```python\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef get_total_number_of_sequences(m, n):\n    # Initialize the dp table\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n\n    # Fill the dp table\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            for k in range(1, i):\n                if 2 * k <= k and k <= m:\n                    dp[i][j] += dp[k][j - 1]\n\n    # Calculate the total number of sequences\n    total = 0\n    for i in range(1, m + 1):\n        total += dp[i][n]\n\n    return total\n\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\nThis script uses dynamic programming to solve the problem. It first initializes a 2D dp table where dp[i][j] is the number of sequences of length j that ends with i. Then it fills the dp table by iterating over all possible values of i and j and for each possible value of k, it adds the number of sequences of length j - 1 that ends with k to dp[i][j]. Finally, it calculates the total number of sequences by summing up the number of sequences of length n that ends with each value of i.\n\nThe assertion at the end checks if the function works correctly."}
