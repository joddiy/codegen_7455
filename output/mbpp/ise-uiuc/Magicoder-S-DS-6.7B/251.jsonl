{"task_id": "Mbpp/559", "completion": "\nHere is a Python function that uses Kadane's algorithm to solve this problem.\n\n```python\ndef max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(0, n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n```\n\nThis function works by initializing two variables, `max_so_far` and `max_ending_here`, to negative infinity and zero, respectively. It then iterates over the array, updating `max_ending_here` to be the sum of the current element and the previous `max_ending_here`. If `max_so_far` is less than `max_ending_here`, it updates `max_so_far` to be `max_ending_here`. If `max_ending_here` is negative, it resets `max_ending_here` to zero. Finally, it returns `max_so_far`, which is the sum of the largest contiguous sublist in the array.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the sum of the largest contiguous sublist in the given list. Your code should satisfy the following assertion:\n```python\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n```\n\n### Response:\nHere is a Python function that uses Kadane's algorithm to solve this problem.\n\n```python\ndef max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(0, n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n```\n\nThis function works by initializing two variables, `max_so_far` and `max_ending_here`, to negative infinity and zero, respectively. It then iterates over the array, updating `max_ending_here` to be the sum of the current element and the previous `max_ending_here`. If `max_so_far` is less than `max_ending_here`, it updates `max_so_far` to be `max_ending_here`. If `max_ending_here` is negative, it resets `max_ending_here` to zero. Finally, it returns `max_so_far`, which is the sum of the largest contiguous sublist in the array."}
