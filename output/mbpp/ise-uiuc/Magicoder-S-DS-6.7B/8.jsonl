{"task_id": "Mbpp/12", "completion": "\nHere is a Python function that sorts a given matrix in ascending order according to the sum of its rows:\n\n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\nThis function uses the built-in `sorted` function in Python, which sorts the elements of an iterable (like a list or a matrix) in ascending order. The `key` parameter of the `sorted` function specifies a function of one argument that is used to extract a comparison key from each element in the iterable. In this case, the `key` is the sum of each row in the matrix.\n\nThe `assert` statement checks if the function is working correctly. If the function returns the expected result, the assertion passes, otherwise it raises an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy the following assertion:\n```python\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n### Response:\nHere is a Python function that sorts a given matrix in ascending order according to the sum of its rows:\n\n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\nThis function uses the built-in `sorted` function in Python, which sorts the elements of an iterable (like a list or a matrix) in ascending order. The `key` parameter of the `sorted` function specifies a function of one argument that is used to extract a comparison key from each element in the iterable. In this case, the `key` is the sum of each row in the matrix.\n\nThe `assert` statement checks if the function is working correctly. If the function returns the expected result, the assertion passes, otherwise it raises an `AssertionError`."}
