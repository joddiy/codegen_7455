{"task_id": "Mbpp/232", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\nThis script defines a function `larg_nnum` that takes a list `lst` and an integer `n` as input. It sorts the list in descending order and returns the first `n` elements. The `assert` statement checks if the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list. Your code should satisfy the following assertion:\n```python\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\nThis script defines a function `larg_nnum` that takes a list `lst` and an integer `n` as input. It sorts the list in descending order and returns the first `n` elements. The `assert` statement checks if the function works as expected."}
