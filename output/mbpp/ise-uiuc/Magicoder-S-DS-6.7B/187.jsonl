{"task_id": "Mbpp/407", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the first digit that is smaller than the digit after it from the right\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        # If no such digit is found, the number is already the biggest possible\n        return -1\n    \n    # Find the smallest digit that is greater than the digit at i from the right\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the digits at i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after i\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))\n\nassert rearrange_bigger(12)==21\n```\n\nThis script works by first converting the number to a list of digits. It then finds the first pair of digits from the right that are in increasing order. If no such pair is found, the number is already the biggest possible, so it returns -1. If such a pair is found, it finds the smallest digit that is greater than the first digit and swaps them. Finally, it reverses the digits after the first digit to get the next bigger number.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the first digit that is smaller than the digit after it from the right\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        # If no such digit is found, the number is already the biggest possible\n        return -1\n    \n    # Find the smallest digit that is greater than the digit at i from the right\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the digits at i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after i\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))\n\nassert rearrange_bigger(12)==21\n```\n\nThis script works by first converting the number to a list of digits. It then finds the first pair of digits from the right that are in increasing order. If no such pair is found, the number is already the biggest possible, so it returns -1. If such a pair is found, it finds the smallest digit that is greater than the first digit and swaps them. Finally, it reverses the digits after the first digit to get the next bigger number."}
