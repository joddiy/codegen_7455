{"task_id": "Mbpp/392", "completion": "\nHere is a Python script that uses dynamic programming to solve the problem:\n\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i)\n    return dp[n]\n\nassert get_max_sum(60) == 106\n```\n\nThis script uses a list `dp` to store the maximum sum for each number up to `n`. It then fills this list up using the formula `f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)`. Finally, it returns the maximum sum for `n`.\n\nThe assertion at the end checks that the function is working correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should satisfy the following assertion:\n```python\nassert get_max_sum(60) == 106\n```\n\n### Response:\nHere is a Python script that uses dynamic programming to solve the problem:\n\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i)\n    return dp[n]\n\nassert get_max_sum(60) == 106\n```\n\nThis script uses a list `dp` to store the maximum sum for each number up to `n`. It then fills this list up using the formula `f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)`. Finally, it returns the maximum sum for `n`.\n\nThe assertion at the end checks that the function is working correctly."}
