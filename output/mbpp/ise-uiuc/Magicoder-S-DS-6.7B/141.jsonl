{"task_id": "Mbpp/272", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\nThis script defines a function `rear_extract` that takes a list of tuples as input. It uses a list comprehension to iterate over each tuple in the list and extract the last element (which is the rear element of the tuple). The extracted rear elements are then returned as a list. The assertion at the end verifies that the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Your code should satisfy the following assertion:\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\nThis script defines a function `rear_extract` that takes a list of tuples as input. It uses a list comprehension to iterate over each tuple in the list and extract the last element (which is the rear element of the tuple). The extracted rear elements are then returned as a list. The assertion at the end verifies that the function works as expected."}
