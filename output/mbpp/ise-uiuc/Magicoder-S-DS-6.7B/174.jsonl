{"task_id": "Mbpp/389", "completion": "\nHere is a Python script that defines a function `find_lucas(n)` to find the n'th Lucas number.\n\n```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = [2, 1]\n        for i in range(2, n + 1):\n            lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n        return lucas_numbers[n]\n\n# Test the function\nassert find_lucas(9) == 76\n```\n\nIn this script, we first handle the base cases where n is 0 or 1. For n > 1, we use a list `lucas_numbers` to store the Lucas numbers. We then iterate from 2 to n, appending the sum of the last two numbers in the list to the list. Finally, we return the n'th Lucas number.\n\nThe assertion at the end checks that the function works correctly for the given test case.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the n'th lucas number. Your code should satisfy the following assertion:\n```python\nassert find_lucas(9) == 76\n```\n\n### Response:\nHere is a Python script that defines a function `find_lucas(n)` to find the n'th Lucas number.\n\n```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = [2, 1]\n        for i in range(2, n + 1):\n            lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n        return lucas_numbers[n]\n\n# Test the function\nassert find_lucas(9) == 76\n```\n\nIn this script, we first handle the base cases where n is 0 or 1. For n > 1, we use a list `lucas_numbers` to store the Lucas numbers. We then iterate from 2 to n, appending the sum of the last two numbers in the list to the list. Finally, we return the n'th Lucas number.\n\nThe assertion at the end checks that the function works correctly for the given test case."}
