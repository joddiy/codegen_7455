{"task_id": "Mbpp/620", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef largest_subset(nums):\n    nums.sort()\n    subsets = [[] for _ in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                if len(subsets[i]) < len(subsets[j]) + 1:\n                    subsets[i] = subsets[j] + [nums[i]]\n    return max(len(subset) for subset in subsets)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\nThis script works by creating a list of subsets, where each subset is a list of numbers that can be divided by each other. It starts by sorting the list of numbers. Then, for each number, it checks all previous numbers to see if the current number is divisible by the previous number. If it is, it checks if the current subset is larger than the previous subset plus the current number. If it is, it updates the current subset. Finally, it returns the size of the largest subset.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef largest_subset(nums):\n    nums.sort()\n    subsets = [[] for _ in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                if len(subsets[i]) < len(subsets[j]) + 1:\n                    subsets[i] = subsets[j] + [nums[i]]\n    return max(len(subset) for subset in subsets)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\nThis script works by creating a list of subsets, where each subset is a list of numbers that can be divided by each other. It starts by sorting the list of numbers. Then, for each number, it checks all previous numbers to see if the current number is divisible by the previous number. If it is, it checks if the current subset is larger than the previous subset plus the current number. If it is, it updates the current subset. Finally, it returns the size of the largest subset."}
