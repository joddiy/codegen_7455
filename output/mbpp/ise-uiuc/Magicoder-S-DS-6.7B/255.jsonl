{"task_id": "Mbpp/564", "completion": "\nHere is a Python function that solves the problem:\n\n```python\ndef count_Pairs(lst):\n    unique_elements = set(lst)\n    return len(unique_elements) * (len(unique_elements) - 1) // 2\n\nassert count_Pairs([1,2,1]) == 2\n```\n\nThis function works by first converting the list to a set, which automatically removes any duplicate elements. Then, it calculates the number of possible unordered pairs by using the formula for the sum of an arithmetic series. This formula is `n*(n-1)/2`, where `n` is the number of unique elements in the list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. Your code should satisfy the following assertion:\n```python\nassert count_Pairs([1,2,1],3) == 2\n```\n\n### Response:\nHere is a Python function that solves the problem:\n\n```python\ndef count_Pairs(lst):\n    unique_elements = set(lst)\n    return len(unique_elements) * (len(unique_elements) - 1) // 2\n\nassert count_Pairs([1,2,1]) == 2\n```\n\nThis function works by first converting the list to a set, which automatically removes any duplicate elements. Then, it calculates the number of possible unordered pairs by using the formula for the sum of an arithmetic series. This formula is `n*(n-1)/2`, where `n` is the number of unique elements in the list."}
