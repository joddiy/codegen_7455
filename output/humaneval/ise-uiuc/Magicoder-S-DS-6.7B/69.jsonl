{"task_id": "HumanEval/69", "completion": "\nHere is a Python solution for the problem:\n\n```python\ndef search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            return num\n    return -1\n```\n\nThis script uses the `Counter` class from the `collections` module to count the frequency of each number in the list. It then iterates over the keys of the `Counter` object in reverse order (from largest to smallest), and returns the first number that has a frequency greater than or equal to its value. If no such number is found, it returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\ndef search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            return num\n    return -1\n```\n\nThis script uses the `Counter` class from the `collections` module to count the frequency of each number in the list. It then iterates over the keys of the `Counter` object in reverse order (from largest to smallest), and returns the first number that has a frequency greater than or equal to its value. If no such number is found, it returns -1."}
