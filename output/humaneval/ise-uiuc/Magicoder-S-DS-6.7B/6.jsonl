{"task_id": "HumanEval/6", "completion": "\nHere is a Python solution for the problem:\n\n```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\nThis script works by iterating over each group of parentheses in the input string. For each group, it maintains a stack of open parentheses and keeps track of the maximum depth of nesting. When it encounters an open parenthesis, it pushes it onto the stack and updates the maximum depth if necessary. When it encounters a close parenthesis, it pops the corresponding open parenthesis from the stack. The maximum depth is the length of the stack at the end of the group. This maximum depth is then added to the result list.\n\nThe output of this script for the given input string '(()()) ((())) () ((())()())' is [2, 3, 1, 3], which is the expected output.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\nThis script works by iterating over each group of parentheses in the input string. For each group, it maintains a stack of open parentheses and keeps track of the maximum depth of nesting. When it encounters an open parenthesis, it pushes it onto the stack and updates the maximum depth if necessary. When it encounters a close parenthesis, it pops the corresponding open parenthesis from the stack. The maximum depth is the length of the stack at the end of the group. This maximum depth is then added to the result list.\n\nThe output of this script for the given input string '(()()) ((())) () ((())()())' is [2, 3, 1, 3], which is the expected output."}
