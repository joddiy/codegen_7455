{"task_id": "HumanEval/156", "completion": "\nHere is a Python solution for the problem:\n\n```python\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n```\n\nThis function works by iterating over the keys of the `roman_numerals` dictionary in descending order. For each key, it checks if the input number is greater than or equal to the current key. If it is, it appends the corresponding value to the result string and subtracts the key from the number. This process repeats until the number is reduced to zero. The result is then returned as the roman numeral equivalent of the input number.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n```\n\nThis function works by iterating over the keys of the `roman_numerals` dictionary in descending order. For each key, it checks if the input number is greater than or equal to the current key. If it is, it appends the corresponding value to the result string and subtracts the key from the number. This process repeats until the number is reduced to zero. The result is then returned as the roman numeral equivalent of the input number."}
