{"task_id": "HumanEval/39", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number that is also prime.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        fib_number = fib(i)\n        if is_prime(fib_number):\n            count += 1\n        i += 1\n    return fib_number\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89\n```\n\nThis script first defines a helper function `is_prime` to check if a number is prime. Then it defines another helper function `fib` to calculate the n-th Fibonacci number. Finally, it defines the `prime_fib` function to find the n-th Fibonacci number that is also prime. The function iterates over Fibonacci numbers, checking if each one is prime. When it finds the n-th prime Fibonacci number, it returns it.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number that is also prime.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        fib_number = fib(i)\n        if is_prime(fib_number):\n            count += 1\n        i += 1\n    return fib_number\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89\n```\n\nThis script first defines a helper function `is_prime` to check if a number is prime. Then it defines another helper function `fib` to calculate the n-th Fibonacci number. Finally, it defines the `prime_fib` function to find the n-th Fibonacci number that is also prime. The function iterates over Fibonacci numbers, checking if each one is prime. When it finds the n-th prime Fibonacci number, it returns it."}
