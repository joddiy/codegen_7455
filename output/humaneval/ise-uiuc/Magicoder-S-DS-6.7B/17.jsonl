{"task_id": "HumanEval/17", "completion": "\nHere is a Python solution for the problem:\n\n```python\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))\n```\n\nThis script splits the input string into a list of notes, then iterates over each note, appending the corresponding number of beats to the `beats` list. Finally, it returns the `beats` list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))\n```\n\nThis script splits the input string into a list of notes, then iterates over each note, appending the corresponding number of beats to the `beats` list. Finally, it returns the `beats` list."}
