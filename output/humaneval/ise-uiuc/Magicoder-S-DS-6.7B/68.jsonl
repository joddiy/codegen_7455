{"task_id": "HumanEval/68", "completion": "\nHere is a Python solution for the problem:\n\n```python\ndef pluck(arr):\n    even_values = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if even_values:\n        return min(even_values, key=lambda x: (x[1], x[0]))\n    else:\n        return []\n```\n\nThis solution works by first creating a list of tuples, where each tuple contains the index and value of each even number in the array. If there are no even numbers, it returns an empty list. If there are even numbers, it returns the tuple with the smallest value and the smallest index. If there are multiple numbers with the same smallest value, it returns the one with the smallest index.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\ndef pluck(arr):\n    even_values = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if even_values:\n        return min(even_values, key=lambda x: (x[1], x[0]))\n    else:\n        return []\n```\n\nThis solution works by first creating a list of tuples, where each tuple contains the index and value of each even number in the array. If there are no even numbers, it returns an empty list. If there are even numbers, it returns the tuple with the smallest value and the smallest index. If there are multiple numbers with the same smallest value, it returns the one with the smallest index."}
