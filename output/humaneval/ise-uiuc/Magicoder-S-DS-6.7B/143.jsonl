{"task_id": "HumanEval/143", "completion": "\nHere is a Python solution for the problem:\n\n```python\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n```\n\nThis script first defines a helper function `is_prime(n)` to check if a number is prime. Then it splits the input sentence into words, and for each word, it checks if the length of the word is a prime number. If it is, the word is added to the list of prime words. Finally, it joins the prime words into a string with spaces in between and returns this string.\n\nThe time complexity of this solution is O(n*sqrt(m)), where n is the number of words in the sentence and m is the length of the longest word. The space complexity is O(n), where n is the number of words in the sentence.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n```\n\nThis script first defines a helper function `is_prime(n)` to check if a number is prime. Then it splits the input sentence into words, and for each word, it checks if the length of the word is a prime number. If it is, the word is added to the list of prime words. Finally, it joins the prime words into a string with spaces in between and returns this string.\n\nThe time complexity of this solution is O(n*sqrt(m)), where n is the number of words in the sentence and m is the length of the longest word. The space complexity is O(n), where n is the number of words in the sentence."}
