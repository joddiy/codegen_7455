{"task_id": "HumanEval/119", "completion": "\nHere is a Python solution for the problem:\n\n```python\ndef match_parens(lst):\n    s = lst[0] + lst[1]\n    count = 0\n    for i in s:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'\n```\n\nThis solution works by concatenating the two strings and then iterating through the characters in the resulting string. If at any point the count of open parentheses goes below zero, it means there are more close parentheses than open ones, so the string is not balanced and 'No' is returned. If the count of open parentheses is zero at the end, the string is balanced and 'Yes' is returned. Otherwise, 'No' is returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\ndef match_parens(lst):\n    s = lst[0] + lst[1]\n    count = 0\n    for i in s:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'\n```\n\nThis solution works by concatenating the two strings and then iterating through the characters in the resulting string. If at any point the count of open parentheses goes below zero, it means there are more close parentheses than open ones, so the string is not balanced and 'No' is returned. If the count of open parentheses is zero at the end, the string is balanced and 'Yes' is returned. Otherwise, 'No' is returned."}
