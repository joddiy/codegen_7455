{"task_id": "HumanEval/115", "completion": "\nHere is a Python solution for the problem:\n\n```python\ndef max_fill(grid, capacity):\n    total_wells = sum(sum(row) for row in grid)\n    return math.ceil(total_wells / capacity)\n```\n\nThis solution works by first summing up all the wells in the grid, and then dividing that sum by the capacity of the bucket. The result is then rounded up to the nearest whole number, as we need to fill the bucket at least once for each well.\n\nThis solution assumes that the grid is a 2D list of 0s and 1s, where 0 represents an empty well and 1 represents a full well. The capacity is the maximum amount of water that can be stored in the bucket.\n\nPlease note that this solution assumes that the grid is a 2D list of 0s and 1s, where 0 represents an empty well and 1 represents a full well. The capacity is the maximum amount of water that can be stored in the bucket.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```\n\n### Response:\nHere is a Python solution for the problem:\n\n```python\ndef max_fill(grid, capacity):\n    total_wells = sum(sum(row) for row in grid)\n    return math.ceil(total_wells / capacity)\n```\n\nThis solution works by first summing up all the wells in the grid, and then dividing that sum by the capacity of the bucket. The result is then rounded up to the nearest whole number, as we need to fill the bucket at least once for each well.\n\nThis solution assumes that the grid is a 2D list of 0s and 1s, where 0 represents an empty well and 1 represents a full well. The capacity is the maximum amount of water that can be stored in the bucket.\n\nPlease note that this solution assumes that the grid is a 2D list of 0s and 1s, where 0 represents an empty well and 1 represents a full well. The capacity is the maximum amount of water that can be stored in the bucket."}
