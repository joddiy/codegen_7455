{"task_id": "HumanEval/61", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n```\n\nThis script uses a stack to keep track of the brackets. When it encounters an opening bracket, it pushes it onto the stack. When it encounters a closing bracket, it checks if the stack is empty. If it is, it means there is no matching opening bracket for this closing bracket, so it returns False. If the stack is not empty, it pops the top element from the stack, which is the matching opening bracket for the current closing bracket.\n\nAfter checking all the brackets, if the stack is empty, it means all brackets are correctly matched, so it returns True. If the stack is not empty, it means there are unmatched opening brackets, so it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n```\n\nThis script uses a stack to keep track of the brackets. When it encounters an opening bracket, it pushes it onto the stack. When it encounters a closing bracket, it checks if the stack is empty. If it is, it means there is no matching opening bracket for this closing bracket, so it returns False. If the stack is not empty, it pops the top element from the stack, which is the matching opening bracket for the current closing bracket.\n\nAfter checking all the brackets, if the stack is empty, it means all brackets are correctly matched, so it returns True. If the stack is not empty, it means there are unmatched opening brackets, so it returns False."}
