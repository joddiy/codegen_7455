{"task_id": "HumanEval/12", "completion": "\nHere is a Python script that solves the problem:\n\n```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n```\n\nThis script first checks if the input list is empty. If it is, it returns None. If it's not, it uses the built-in `max` function to find the longest string. The `key=len` argument tells `max` to use the length of each string as the criterion for comparison.\n\nYou can test the function with the following code:\n\n```python\nprint(longest([]))  # Output: None\nprint(longest(['a', 'b', 'c']))  # Output: 'a'\nprint(longest(['a', 'bb', 'ccc']))  # Output: 'ccc'\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n```\n\nThis script first checks if the input list is empty. If it is, it returns None. If it's not, it uses the built-in `max` function to find the longest string. The `key=len` argument tells `max` to use the length of each string as the criterion for comparison.\n\nYou can test the function with the following code:\n\n```python\nprint(longest([]))  # Output: None\nprint(longest(['a', 'b', 'c']))  # Output: 'a'\nprint(longest(['a', 'bb', 'ccc']))  # Output: 'ccc'\n```"}
