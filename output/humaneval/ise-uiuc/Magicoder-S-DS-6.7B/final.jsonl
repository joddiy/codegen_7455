{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result\n\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n\n# Test cases\nprint(make_palindrome(''))  # Output: ''\nprint(make_palindrome('cat'))  # Output: 'catac'\nprint(make_palindrome('cata'))  # Output: 'catac'"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + (2 * i))\n        else:\n            pile.append(n + (2 * i))\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(\",\", \"\").split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if x and y are positive\n    if x < 0 or y < 0:\n        return \"Error: Both x and y must be positive integers.\"\n\n    # Check if x is greater than y\n    if x > y:\n        return \"Error: x must be less than or equal to y.\"\n\n    # Check if x is even\n    if x % 2 != 0:\n        x += 1\n\n    # Check if there's an even number in the range\n    for i in range(x, y+1, 2):\n        return i\n\n    # If no even number is found\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Create a dictionary to map numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter out numbers not in the range 1-9\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Map numbers to their names and return\n    return [num_to_name[num] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    def sum_to_i(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # check if the number is palindrome\n            if i % 2 == 0:  # check if the number is even\n                even_count += 1\n            else:  # the number is odd\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] > arr[(i+1)%len(arr)]:\n                return False\n        return True"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1 and lst2\n    odd_lst1 = sum(x % 2 for x in lst1)\n    odd_lst2 = sum(x % 2 for x in lst2)\n\n    # If the total number of odd numbers in both lists is even,\n    # it is possible to exchange elements to make all numbers even\n    if (odd_lst1 + odd_lst2) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Create a dictionary to store the count of each letter\n    letter_count = {}\n\n    # Split the string into a list of words\n    words = test.split()\n\n    # Iterate over each word in the list\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in letter_count:\n            letter_count[word] += 1\n        # Otherwise, add the word to the dictionary with a count of 1\n        else:\n            letter_count[word] = 1\n\n    # Find the maximum count\n    max_count = max(letter_count.values()) if letter_count else 0\n\n    # Create a new dictionary to store the letters with the maximum count\n    max_letters = {k: v for k, v in letter_count.items() if v == max_count}\n\n    return max_letters"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = ''.join([i for i in s if i not in c])\n    return (result, result == result[::-1])\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, string in enumerate(lst):\n        odd_count = sum(int(digit) % 2 for digit in string)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_wells = sum(sum(row) for row in grid)\n    return math.ceil(total_wells / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    count = 0\n    for i in s:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 1 <= len(str(x)) <= 2)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return sorted([i for i in collatz_sequence if i % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nprint(valid_date('03-11-2000')) # True\nprint(valid_date('15-01-2012')) # False\nprint(valid_date('04-0-2040')) # False\nprint(valid_date('06-04-2020')) # True\nprint(valid_date('06/04/2020')) # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)\n\n# Test cases\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # Check if the intervals intersect\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # Calculate the intersection\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        product = 1\n        sum_magnitudes = 0\n        for num in arr:\n            if num > 0:\n                product *= 1\n                sum_magnitudes += num\n            elif num < 0:\n                product *= -1\n                sum_magnitudes += abs(num)\n            else:\n                product *= 0\n                sum_magnitudes += 0\n        return product * sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[[float('inf')] * (k+1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n\n    for l in range(1, k+1):\n        for i in range(n):\n            for j in range(n):\n                for x in range(n):\n                    for y in range(n):\n                        if abs(i-x) + abs(j-y) == 1:\n                            dp[i][j][l] = min(dp[i][j][l], dp[x][y][l-1] + grid[i][j])\n\n    min_path = min(dp[i][j][k] for i in range(n) for j in range(n))\n    path = []\n    i, j, l = 0, 0, k\n    while l > 0:\n        for x in range(n):\n            for y in range(n):\n                if abs(i-x) + abs(j-y) == 1 and dp[x][y][l-1] + grid[i][j] == min_path:\n                    path.append(grid[i][j])\n                    i, j, l = x, y, l-1\n                    break\n    return path"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nprint(greatest_common_divisor(3, 5))  # Output: 1\nprint(greatest_common_divisor(25, 15))  # Output: 5"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tribonacci = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i])\n        return tribonacci"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return bool(stack)\n\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(int(abs(num) + 0.5) ** 2 for num in lst)\n\n# Test cases\nprint(sum_squares([1,2,3]))  # Output: 14\nprint(sum_squares([1,4,9]))  # Output: 98\nprint(sum_squares([1,3,5,7]))  # Output: 84\nprint(sum_squares([1.4,4.2,0]))  # Output: 29\nprint(sum_squares([-2.4,1,1]))  # Output: 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and txt[-2] == ' ':\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    \n    if not neg_integers:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n    \n    if not pos_integers:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n    \n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Check if a and b are of the same type\n    if type(a) != type(b):\n        return None\n\n    # Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(n, 0, -1):\n            factorial *= i\n        return factorial"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n\n# Test the function\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text\n\nprint(fix_spaces(\"Example\")) # \"Example\"\nprint(fix_spaces(\"Example 1\")) # \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # \"_Example_2\"\nprint(fix_spaces(\" Example   3\")) # \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('0') + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9') > 3:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    product = x_num * n_num / (x_den * n_den)\n    \n    # Check if the product is a whole number\n    if product.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        if start > end:\n            start, end = end, start\n        return tuple(planets[start+1:end])\n\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if i > 0 and i % 2 != 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)  # Convert to absolute value to handle negative numbers\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test the function\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))  # Output: 4"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Test the function\nprint(string_to_md5('Hello world'))  # Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Ensure a and b are in ascending order\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even integers\n    even_integers = []\n\n    # Iterate over the range from a to b (inclusive)\n    for i in range(a, b + 1):\n        # Convert the integer to a string to easily iterate over its digits\n        str_i = str(i)\n\n        # Iterate over the digits of the integer\n        for digit in str_i:\n            # If the digit is even, append it to the list of even integers\n            if int(digit) % 2 == 0:\n                even_integers.append(i)\n                break  # Break the inner loop after finding an even digit\n\n    # Return the list of even integers\n    return even_integers"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Create a dictionary to map the number names to their corresponding numbers\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numbers\n    number_list = numbers.split()\n\n    # Convert each number from its name to its corresponding number\n    number_list = [number_dict[num] for num in number_list]\n\n    # Sort the list of numbers\n    number_list.sort()\n\n    # Convert each number back to its name\n    number_list = [list(number_dict.keys())[list(number_dict.values()).index(num)] for num in number_list]\n\n    # Join the list of numbers back into a string\n    sorted_numbers = ' '.join(number_list)\n\n    return sorted_numbers"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # Using the modulus operator to get the decimal part\n    return number % 1\n\n# Testing the function\nprint(truncate_number(3.5))  # Output: 0.5"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n\n# Test the function\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\nprint(filter_integers(['a', 3.14, 5]))  # Output: [5]\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\nprint(largest_divisor(15))"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor:\n            divisor += 1\n        else:\n            n //= divisor\n            factors.append(divisor)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n\nprint(remove_duplicates([1, 2, 3, 2, 4]))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string\n\nprint(flip_case('Hello'))  # Output: 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n\n# Test cases\nprint(concatenate([]))  # Expected output: ''\nprint(concatenate(['a', 'b', 'c']))  # Expected output: 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n\n# Test the function\nprint(filter_by_prefix([], 'a'))  # Expected output: []\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # Expected output: ['abc', 'array']"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\n# Test cases\nprint(below_zero([1, 2, 3]))  # False\nprint(below_zero([1, 2, -4, 5]))  # True"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i > 0]\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(6))\nprint(is_prime(101))\nprint(is_prime(11))\nprint(is_prime(13441))\nprint(is_prime(61))\nprint(is_prime(4))\nprint(is_prime(1))"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Initial guess for the root\n    x = 0\n    # Tolerance for the difference between the current and previous guess\n    tolerance = 0.00001\n    # Maximum number of iterations\n    max_iterations = 1000\n    # Iterate until the difference between the current and previous guess is less than the tolerance\n    for _ in range(max_iterations):\n        # Calculate the value of the polynomial at the current guess\n        y = poly(xs, x)\n        # If the value is close to zero, return the current guess as the root\n        if abs(y) < tolerance:\n            return x\n        # Calculate the derivative of the polynomial at the current guess\n        dy = sum([i * math.pow(x, i - 1) for i, _ in enumerate(xs)])\n        # Update the guess using Newton-Raphson method\n        x = x - y / dy\n    # If the maximum number of iterations is reached, return None\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Create a list of indices that are divisible by 3\n    divisible_by_three = [i for i in range(len(l)) if (i+1) % 3 == 0]\n\n    # Sort the values at the indices that are divisible by 3\n    sorted_values = sorted([l[i] for i in divisible_by_three])\n\n    # Create a new list with the sorted values at the indices that are divisible by 3\n    sorted_list = l.copy()\n    for i in divisible_by_three:\n        sorted_list[i] = sorted_values.pop(0)\n\n    return sorted_list"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = l[:]\n    for i in range(0, len(l), 2):\n        result[i] = even_values.pop(0)\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number that is also prime.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        fib_number = fib(i)\n        if is_prime(fib_number):\n            count += 1\n        i += 1\n    return fib_number\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return mad\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s < 0:\n                left += 1\n            elif s > 0:\n                right -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function calculates the number of collisions that would occur in a car race scenario.\n    \"\"\"\n    # The number of collisions is equal to the number of cars.\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Create an empty set to store the elements we have seen so far\n    seen = set()\n\n    # Iterate over the elements in the list\n    for num in l:\n        # If the opposite of the current number is in the set, we have found a pair that sums to zero\n        if -num in seen:\n            return True\n        # Add the current number to the set of seen numbers\n        seen.add(num)\n\n    # If we have gone through the entire list and not found a pair that sums to zero, return False\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n\n# Test cases\nprint(change_base(8, 3))  # '22'\nprint(change_base(8, 2))  # '1000'\nprint(change_base(7, 2))  # '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h\n\nprint(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib_nums = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2] + fib_nums[i-3] + fib_nums[i-4])\n        return fib_nums[n]\n\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\nprint(median([3, 1, 2, 4, 5]))\nprint(median([-10, 4, 6, 1000, 10, 20]))"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n\nprint(modp(3, 5))  # Output: 3\nprint(modp(1101, 101))  # Output: 2\nprint(modp(0, 101))  # Output: 1\nprint(modp(3, 11))  # Output: 8\nprint(modp(100, 101))  # Output: 1"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\nprint(intersperse([], 4))  # Output: []\nprint(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n\nprint(fib(10))  # Output: 34\nprint(fib(1))   # Output: 0\nprint(fib(8))   # Output: 13"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0 or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_sequence = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n        return fibfib_sequence[n]\n\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"YELLOW\"))  # Output: 2\nprint(vowels_count(\"\"))  # Output: 0\nprint(vowels_count(\"Y\"))  # Output: 1"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\nprint(circular_shift(12345, 3))  # Output: \"34512\"\nprint(circular_shift(12345, 6))  # Output: \"54321\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # Split the string to get the number of apples and oranges\n    apples, oranges = map(int, s.split()[::2])\n    # Subtract the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    return mangoes\n\n# Test the function\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) # Expected output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\",3)) # Expected output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Expected output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\",120)) # Expected output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if even_values:\n        return min(even_values, key=lambda x: (x[1], x[0]))\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))  # Output: 6.0\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    # Check if the sum of elements is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n    \n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of 3 prime numbers\"\"\"\n    if a <= 1:\n        return False\n    prime_factors = [i for i in range(2, a) if a % i == 0 and is_prime(i)]\n    if len(prime_factors) != 3:\n        return False\n    product = 1\n    for factor in prime_factors:\n        product *= factor\n    return product == a\n\n# Test the function\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(40))  # False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        i = 2\n        while i * i <= x:\n            if x % i:\n                i += 1\n            else:\n                x //= i\n        return x == n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    else:\n        return round(a ** (1. / 3)) ** 3 == a\n\n# Test cases\nprint(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = ['A', 'B', 'C', 'D', 'E', 'F']\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return sum_numbers, product_numbers"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello')) # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange')) # False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # If n is 1, there is only one number that starts or ends with 1\n    if n == 1:\n        return 2\n    # If n is greater than 1, there are 10^(n-1) numbers that start with 1\n    # and 10^(n-1) numbers that end with 1\n    else:\n        return 10**(n-1) * 2"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the integer to binary\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            shift = 2\n            char = i.lower()\n            ascii_offset = 97\n            new_char = chr((((ord(char) - ascii_offset) + shift) % 26) + ascii_offset)\n            result += new_char\n        else:\n            result += i\n    return result"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.replace('!', '.').replace('?', '.').split('.')\n    \n    # Initialize the count of boredoms\n    boredom_count = 0\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Remove leading and trailing spaces and convert to lower case\n        sentence = sentence.strip().lower()\n        \n        # Check if the sentence starts with \"i\"\n        if sentence.startswith('i'):\n            boredom_count += 1\n    \n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                encoded_message += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                encoded_message += char.upper() if char.islower() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value and return the sum of its digits.\"\"\"\n    primes = [n for n in lst if is_prime(n)]\n    if primes:\n        return sum_of_digits(max(primes))\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:  # if the dictionary is empty\n        return False\n    keys = list(dict.keys())\n    if all(isinstance(key, str) for key in keys):  # if all keys are strings\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):  # if all keys are lower or upper case\n            return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]\n\nprint(count_up_to(5))  # [2, 3]\nprint(count_up_to(11))  # [2, 3, 5, 7]\nprint(count_up_to(0))  # []\nprint(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # []\nprint(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of the numbers\n    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = a_unit_digit * b_unit_digit\n    \n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
