{"task_id": "HumanEval/56", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False\n```\n\nThis script uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the last bracket in the stack is an opening bracket. If it is, it removes it from the stack. If not, it returns False. If there are any leftover opening brackets in the stack after processing all the closing brackets, it returns False. Otherwise, it returns True.\n\nThe time complexity of this script is O(n), where n is the length of the input string. This is because it processes each character in the string exactly once. The space complexity is also O(n) because in the worst case, all the characters in the string could be opening brackets and they would all be pushed onto the stack.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False\n```\n\nThis script uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the last bracket in the stack is an opening bracket. If it is, it removes it from the stack. If not, it returns False. If there are any leftover opening brackets in the stack after processing all the closing brackets, it returns False. Otherwise, it returns True.\n\nThe time complexity of this script is O(n), where n is the length of the input string. This is because it processes each character in the string exactly once. The space complexity is also O(n) because in the worst case, all the characters in the string could be opening brackets and they would all be pushed onto the stack.\n"}
