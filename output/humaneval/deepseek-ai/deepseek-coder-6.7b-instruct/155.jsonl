{"task_id": "HumanEval/155", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\n```\n\nIn this script, we first initialize two variables `even_count` and `odd_count` to 0. We then convert the absolute value of the input number to a string, so we can iterate over each digit. For each digit, we convert it back to an integer and check if it is even or odd by checking if the remainder when divided by 2 is 0 or 1, respectively. If it's even, we increment `even_count`; if it's odd, we increment `odd_count`. Finally, we return a tuple of `even_count` and `odd_count`.\n\nThis script works for positive and negative integers.\n\nNote: The absolute value of the number is used to handle negative numbers. This is because the problem statement does not specify how to handle negative numbers. In the given example, `even_odd_count(-12)` returns `(1, 1)`, which means there is 1 even digit and 1 odd digit in the number `-12`.\n\nAlso, the problem statement does not specify what to do if the input number is 0. In this script, we assume that 0 is an even number, so `even_odd_count(0)` returns `(1, 0)`, which means there is 1 even digit and 0 odd digits in the number 0.\n\nIf you want to handle the case where the input number is 0 differently, you can add a special case for it in the script.\n\n```python\ndef even_odd_count(num):\n    if num == 0:\n        return (1, 0)\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(0))  # Output: (1, 0)\n```\n\nIn this updated script, if the input number is 0, we return `(1, 0)` immediately, without going through the loop.\n\nThis script works for positive and negative integers, and it handles the case where the input number is 0.\n\n```python\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\nprint(even_odd_count(0))  # Output: (1, 0)\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\n```\n\nIn this script, we first initialize two variables `even_count` and `odd_count` to 0. We then convert the absolute value of the input number to a string, so we can iterate over each digit. For each digit, we convert it back to an integer and check if it is even or odd by checking if the remainder when divided by 2 is 0 or 1, respectively. If it's even, we increment `even_count`; if it's odd, we increment `odd_count`. Finally, we return a tuple of `even_count` and `odd_count`.\n\nThis script works for positive and negative integers.\n\nNote: The absolute value of the number is used to handle negative numbers. This is because the problem statement does not specify how to handle negative numbers. In the given example, `even_odd_count(-12)` returns `(1, 1)`, which means there is 1 even digit and 1 odd digit in the number `-12`.\n\nAlso, the problem statement does not specify what to do if the input number is 0. In this script, we assume that 0 is an even number, so `even_odd_count(0)` returns `(1, 0)`, which means there is 1 even digit and 0 odd digits in the number 0.\n\nIf you want to handle the case where the input number is 0 differently, you can add a special case for it in the script.\n\n```python\ndef even_odd_count(num):\n    if num == 0:\n        return (1, 0)\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(0))  # Output: (1, 0)\n```\n\nIn this updated script, if the input number is 0, we return `(1, 0)` immediately, without going through the loop.\n\nThis script works for positive and negative integers, and it handles the case where the input number is 0.\n\n```python\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\nprint(even_odd_count(0))  # Output: (1, 0)\n```\n"}
