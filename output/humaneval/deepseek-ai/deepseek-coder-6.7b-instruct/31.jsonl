{"task_id": "HumanEval/31", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))  # False\nprint(is_prime(101))  # True\nprint(is_prime(11))  # True\nprint(is_prime(13441))  # False\nprint(is_prime(61))  # True\nprint(is_prime(4))  # False\nprint(is_prime(1))  # False\n```\n\nThis script defines a function `is_prime(n)` that checks if a given number `n` is prime. It first handles the special cases where `n` is less than or equal to 1, or where `n` is 2 or 3. Then it checks if `n` is divisible by 2 or 3. If `n` is not divisible by 2 or 3, it checks the remaining possible factors starting from 5. The loop increments by 6 each time because all primes are of the form 6k \u00b1 1, k \u2208 N. If `n` is not divisible by any of these, it is prime and the function returns True. Otherwise, it returns False.\n\nThe script then tests the function with the given test cases.\n\nNote: The function `is_prime(n)` returns True for composite numbers that are not prime, such as 13441. This is because 13441 is not a prime number, but it is a composite number (a number that has more than two positive divisors). If you want the function to only return True for prime numbers, you can add an additional check to return False if `n` is less than or equal to 1.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))  # False\nprint(is_prime(101))  # True\nprint(is_prime(11))  # True\nprint(is_prime(13441))  # False\nprint(is_prime(61))  # True\nprint(is_prime(4))  # False\nprint(is_prime(1))  # False\n```\n\nThis script defines a function `is_prime(n)` that checks if a given number `n` is prime. It first handles the special cases where `n` is less than or equal to 1, or where `n` is 2 or 3. Then it checks if `n` is divisible by 2 or 3. If `n` is not divisible by 2 or 3, it checks the remaining possible factors starting from 5. The loop increments by 6 each time because all primes are of the form 6k \u00b1 1, k \u2208 N. If `n` is not divisible by any of these, it is prime and the function returns True. Otherwise, it returns False.\n\nThe script then tests the function with the given test cases.\n\nNote: The function `is_prime(n)` returns True for composite numbers that are not prime, such as 13441. This is because 13441 is not a prime number, but it is a composite number (a number that has more than two positive divisors). If you want the function to only return True for prime numbers, you can add an additional check to return False if `n` is less than or equal to 1.\n"}
