{"task_id": "HumanEval/49", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases\nprint(modp(3, 5))  # 3\nprint(modp(1101, 101))  # 2\nprint(modp(0, 101))  # 1\nprint(modp(3, 11))  # 8\nprint(modp(100, 101))  # 1\n```\n\nIn this script, we use the built-in `pow` function in Python which allows us to calculate the power of a number modulo another number. The syntax is `pow(x, y, z)`, which calculates `(x**y) % z`. This function is more efficient than calculating the power and then taking the modulus, especially for large numbers.\n\nThe test cases are provided to validate the solution.\n\nPlease note that the function `modp` returns the result of `2**n % p`. If you want to calculate `2**n` and then take the modulus, you can use the following code:\n\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return (2**n) % p\n```\n\nBoth codes will give the same results, but the second one may be slower for large `n` because it calculates `2**n` first and then takes the modulus.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases\nprint(modp(3, 5))  # 3\nprint(modp(1101, 101))  # 2\nprint(modp(0, 101))  # 1\nprint(modp(3, 11))  # 8\nprint(modp(100, 101))  # 1\n```\n\nIn this script, we use the built-in `pow` function in Python which allows us to calculate the power of a number modulo another number. The syntax is `pow(x, y, z)`, which calculates `(x**y) % z`. This function is more efficient than calculating the power and then taking the modulus, especially for large numbers.\n\nThe test cases are provided to validate the solution.\n\nPlease note that the function `modp` returns the result of `2**n % p`. If you want to calculate `2**n` and then take the modulus, you can use the following code:\n\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return (2**n) % p\n```\n\nBoth codes will give the same results, but the second one may be slower for large `n` because it calculates `2**n` first and then takes the modulus.\n"}
