{"task_id": "HumanEval/69", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater \n    than zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the keys of the dictionary in descending order\n    for num in sorted(freq.keys(), reverse=True):\n        # If the frequency of the current number is greater than or equal to the number itself,\n        # return the number\n        if freq[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1\n```\n\nThis script first creates a dictionary to store the frequency of each integer in the list. Then it iterates over the keys of the dictionary in descending order. For each key, it checks if the frequency of the key is greater than or equal to the key itself. If it is, it returns the key. If no such key is found after checking all keys, it returns -1.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater \n    than zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the keys of the dictionary in descending order\n    for num in sorted(freq.keys(), reverse=True):\n        # If the frequency of the current number is greater than or equal to the number itself,\n        # return the number\n        if freq[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1\n```\n\nThis script first creates a dictionary to store the frequency of each integer in the list. Then it iterates over the keys of the dictionary in descending order. For each key, it checks if the frequency of the key is greater than or equal to the key itself. If it is, it returns the key. If no such key is found after checking all keys, it returns -1.\n"}
