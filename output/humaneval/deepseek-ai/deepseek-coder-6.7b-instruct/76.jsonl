{"task_id": "HumanEval/76", "completion": "\nHere is the Python script for the problem:\n\n```python\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n    return x == 1\n\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n```\n\nThis script defines a function `is_simple_power(x, n)` that checks if `x` is a simple power of `n`. The function uses a while loop to divide `x` by `n` until `x` becomes 1. If `x` is 1 at the end of the loop, the function returns `True`, indicating that `x` is a simple power of `n`. If `x` is not 1 at the end of the loop, the function returns `False`, indicating that `x` is not a simple power of `n`.\n\nThe script then tests the function with the examples provided in the problem statement.\n\nNote: This script assumes that `n` is not 0 or 1, as these are special cases that do not make sense for this problem. If `n` can be 0 or 1, you should add additional checks at the beginning of the function to handle these cases.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n```\n\n### Response:\nHere is the Python script for the problem:\n\n```python\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n    return x == 1\n\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n```\n\nThis script defines a function `is_simple_power(x, n)` that checks if `x` is a simple power of `n`. The function uses a while loop to divide `x` by `n` until `x` becomes 1. If `x` is 1 at the end of the loop, the function returns `True`, indicating that `x` is a simple power of `n`. If `x` is not 1 at the end of the loop, the function returns `False`, indicating that `x` is not a simple power of `n`.\n\nThe script then tests the function with the examples provided in the problem statement.\n\nNote: This script assumes that `n` is not 0 or 1, as these are special cases that do not make sense for this problem. If `n` can be 0 or 1, you should add additional checks at the beginning of the function to handle these cases.\n"}
