{"task_id": "HumanEval/77", "completion": "\nHere is the Python script for the problem:\n\n```python\ndef iscube(a):\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n# Test cases\nprint(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False\n```\n\nThis script works by taking the cube root of the input number (`a ** (1. / 3)`), rounding it to the nearest integer (`int(round(...))`), and then cubing that result (`... ** 3`). If the original number `a` is a perfect cube, this will equal `a` and the function will return `True`. Otherwise, it will return `False`.\n\nThe `int(round(...))` part is necessary because the cube root of a number can be a decimal, and we need to round to the nearest integer. For example, the cube root of 8 is 2.199..., but we only care about the 2.\n\nThe `** 3` part is necessary because we want to cube the rounded number. For example, if we round 2.199... to 2, we want to cube that to get 8, not 3.\n\nThe `print` statements at the end are used to test the function with the provided examples.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n```\n\n### Response:\nHere is the Python script for the problem:\n\n```python\ndef iscube(a):\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n# Test cases\nprint(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False\n```\n\nThis script works by taking the cube root of the input number (`a ** (1. / 3)`), rounding it to the nearest integer (`int(round(...))`), and then cubing that result (`... ** 3`). If the original number `a` is a perfect cube, this will equal `a` and the function will return `True`. Otherwise, it will return `False`.\n\nThe `int(round(...))` part is necessary because the cube root of a number can be a decimal, and we need to round to the nearest integer. For example, the cube root of 8 is 2.199..., but we only care about the 2.\n\nThe `** 3` part is necessary because we want to cube the rounded number. For example, if we round 2.199... to 2, we want to cube that to get 8, not 3.\n\nThe `print` statements at the end are used to test the function with the provided examples.\n"}
