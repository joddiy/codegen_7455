{"task_id": "HumanEval/104", "completion": "\nHere is the Python script for the problem:\n\n```python\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # []\n```\n\nIn this script, we define a function `unique_digits` that takes a list of positive integers `x` as input. We initialize an empty list `result` to store the numbers that have all odd digits. For each number in the input list, we convert it to a string and check if all its digits are odd by using a generator expression with the `all` function. If all digits are odd, we add the number to the `result` list. Finally, we return the `result` list sorted in increasing order.\n\nThe `all` function returns `True` if all elements of the iterable (in this case, the generator expression) are `True`. If any element is `False`, `all` returns `False`. In this case, it checks if the digit is odd by converting it to an integer and checking if the remainder of the division by 2 is not 0.\n\nThe `sorted` function returns a new sorted list from the elements of the iterable. In this case, it sorts the `result` list in increasing order.\n\nThe `print` statements at the end are used to test the function with the provided examples.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n```\n\n### Response:\nHere is the Python script for the problem:\n\n```python\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # []\n```\n\nIn this script, we define a function `unique_digits` that takes a list of positive integers `x` as input. We initialize an empty list `result` to store the numbers that have all odd digits. For each number in the input list, we convert it to a string and check if all its digits are odd by using a generator expression with the `all` function. If all digits are odd, we add the number to the `result` list. Finally, we return the `result` list sorted in increasing order.\n\nThe `all` function returns `True` if all elements of the iterable (in this case, the generator expression) are `True`. If any element is `False`, `all` returns `False`. In this case, it checks if the digit is odd by converting it to an integer and checking if the remainder of the division by 2 is not 0.\n\nThe `sorted` function returns a new sorted list from the elements of the iterable. In this case, it sorts the `result` list in increasing order.\n\nThe `print` statements at the end are used to test the function with the provided examples.\n"}
