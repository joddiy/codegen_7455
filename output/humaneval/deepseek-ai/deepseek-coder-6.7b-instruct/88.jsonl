{"task_id": "HumanEval/88", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef sort_array(array):\n    if not array:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n```\n\nThis script first checks if the array is empty. If it is, it returns the array as it is. If the array is not empty, it checks if the sum of the first and last elements of the array is even or odd. If it's odd, it sorts the array in ascending order. If it's even, it sorts the array in descending order.\n\nThe `sorted` function is used to sort the array. The `reverse=True` argument is used to sort the array in descending order. If `reverse=False` or not provided, the array is sorted in ascending order.\n\nThe `%` operator is used to check if the sum of the first and last elements of the array is even or odd. If the sum is divisible by 2 with no remainder, it's even. If there's a remainder, it's odd.\n\nThe first and last elements of the array are accessed using `array[0]` and `array[-1]` respectively. The `0` index is used to access the first element and `-1` index is used to access the last element.\n\nHere are some examples of how to use the function:\n\n```python\nprint(sort_array([]))  # Output: []\nprint(sort_array([5]))  # Output: [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # Output: [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1, 0]\n```\n\nThese examples demonstrate that the function works as expected.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef sort_array(array):\n    if not array:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n```\n\nThis script first checks if the array is empty. If it is, it returns the array as it is. If the array is not empty, it checks if the sum of the first and last elements of the array is even or odd. If it's odd, it sorts the array in ascending order. If it's even, it sorts the array in descending order.\n\nThe `sorted` function is used to sort the array. The `reverse=True` argument is used to sort the array in descending order. If `reverse=False` or not provided, the array is sorted in ascending order.\n\nThe `%` operator is used to check if the sum of the first and last elements of the array is even or odd. If the sum is divisible by 2 with no remainder, it's even. If there's a remainder, it's odd.\n\nThe first and last elements of the array are accessed using `array[0]` and `array[-1]` respectively. The `0` index is used to access the first element and `-1` index is used to access the last element.\n\nHere are some examples of how to use the function:\n\n```python\nprint(sort_array([]))  # Output: []\nprint(sort_array([5]))  # Output: [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # Output: [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1, 0]\n```\n\nThese examples demonstrate that the function works as expected.\n"}
