{"task_id": "HumanEval/157", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test the function\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False\n```\n\nThis script works by first sorting the lengths of the sides of the triangle. This ensures that `sides[2]` is the longest side, which is the hypotenuse of the triangle. Then it checks if the square of the hypotenuse is equal to the sum of the squares of the other two sides. If this is true, then the three sides form a right-angled triangle, and the function returns True. Otherwise, it returns False.\n\nThe test cases at the end of the script verify that the function works correctly.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test the function\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False\n```\n\nThis script works by first sorting the lengths of the sides of the triangle. This ensures that `sides[2]` is the longest side, which is the hypotenuse of the triangle. Then it checks if the square of the hypotenuse is equal to the sum of the squares of the other two sides. If this is true, then the three sides form a right-angled triangle, and the function returns True. Otherwise, it returns False.\n\nThe test cases at the end of the script verify that the function works correctly.\n"}
