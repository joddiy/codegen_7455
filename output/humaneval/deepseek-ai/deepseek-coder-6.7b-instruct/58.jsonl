{"task_id": "HumanEval/58", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]\n```\n\nThis script uses Python's built-in set data type to find the intersection of the two lists (i.e., the common elements). The `&` operator is used to find the intersection of two sets. The result is then sorted and returned.\n\nPlease note that the order of elements in the output list may not match the order in which they appear in the input lists.\n\nAlso, the function assumes that the input lists are lists of hashable types (i.e., types that can be used as dictionary keys). If the input lists contain unhashable types, you will need to modify the function to handle those cases.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]\n```\n\nThis script uses Python's built-in set data type to find the intersection of the two lists (i.e., the common elements). The `&` operator is used to find the intersection of two sets. The result is then sorted and returned.\n\nPlease note that the order of elements in the output list may not match the order in which they appear in the input lists.\n\nAlso, the function assumes that the input lists are lists of hashable types (i.e., types that can be used as dictionary keys). If the input lists contain unhashable types, you will need to modify the function to handle those cases.\n"}
