{"task_id": "HumanEval/158", "completion": "\nHere is the Python script for the problem:\n\n```python\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word\n```\n\nThis script works by iterating over each word in the list of words. For each word, it calculates the number of unique characters in the word by converting the word to a set (which removes duplicate characters) and then taking the length of the set. If the number of unique characters is greater than the current maximum number of unique characters, it updates the maximum number of unique characters and the word with that many unique characters. If the number of unique characters is equal to the current maximum, it chooses the word that comes first in lexicographical order. Finally, it returns the word with the maximum number of unique characters.\n\nLet's test the function with the provided test cases:\n\n```python\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\"\n```\n\nAll the outputs are as expected.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n```\n\n### Response:\nHere is the Python script for the problem:\n\n```python\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word\n```\n\nThis script works by iterating over each word in the list of words. For each word, it calculates the number of unique characters in the word by converting the word to a set (which removes duplicate characters) and then taking the length of the set. If the number of unique characters is greater than the current maximum number of unique characters, it updates the maximum number of unique characters and the word with that many unique characters. If the number of unique characters is equal to the current maximum, it chooses the word that comes first in lexicographical order. Finally, it returns the word with the maximum number of unique characters.\n\nLet's test the function with the provided test cases:\n\n```python\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\"\n```\n\nAll the outputs are as expected.\n"}
