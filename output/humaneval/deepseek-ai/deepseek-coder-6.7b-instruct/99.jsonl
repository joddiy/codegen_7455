{"task_id": "HumanEval/99", "completion": "\nHere is a Python script that solves the problem:\n\n```python\ndef closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n```\n\nThis script works by converting the input string to a float, then adding or subtracting 0.5 depending on whether the number is positive or negative. The result is then converted back to an integer, which rounds the float to the nearest integer.\n\nFor example, `closest_integer(\"15.3\")` returns `15`, and `closest_integer(\"-14.5\")` returns `-15`.\n\nNote that this script assumes that the input string can be converted to a float without raising an exception. If this is not the case, you may want to add error handling to deal with invalid inputs.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n```\n\n### Response:\nHere is a Python script that solves the problem:\n\n```python\ndef closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n```\n\nThis script works by converting the input string to a float, then adding or subtracting 0.5 depending on whether the number is positive or negative. The result is then converted back to an integer, which rounds the float to the nearest integer.\n\nFor example, `closest_integer(\"15.3\")` returns `15`, and `closest_integer(\"-14.5\")` returns `-15`.\n\nNote that this script assumes that the input string can be converted to a float without raising an exception. If this is not the case, you may want to add error handling to deal with invalid inputs.\n"}
