{"task_id": "HumanEval/79", "completion": "\n```python\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n```\n\n### Explanation:\nThe function takes in a decimal number as an argument and returns a string in binary format. The function first initializes an empty string called binary. Then, it uses a while loop to repeatedly divide the decimal number by 2 and append the remainder to the binary string. Finally, it returns the binary string with the extra characters 'db' at the beginning and end.\n\n### Test Cases:\n```python\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\ndecimal_to_binary(0)    # returns \"db0db\"\ndecimal_to_binary(1)    # returns \"db1db\"\ndecimal_to_binary(2)    # returns \"db10db\"\ndecimal_to_binary(3)    # returns \"db11db\"\ndecimal_to_binary(4)    # returns \"db100db\"\ndecimal_to_binary(5)    # returns \"db101db\"\ndecimal_to_binary(6)    # returns \"db110db\"\ndecimal_to_binary(7)    # returns \"db111db\"\ndecimal_to_binary(8)    # returns \"db1000db\"\ndecimal_to_binary(9)    # returns \"db1001db\"\ndecimal_to_binary(10)   # returns \"db1010db\"\ndecimal_to_binary(11)   # returns \"db1011db\"\ndecimal_to_binary(12)   # returns \"db1100db\"\ndecimal_to_binary(13)   # returns \"db1101db\"\ndecimal_to_binary(14)   # returns \"db1110db\"\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(16)   # returns \"db10000db\"\ndecimal_to_binary(17)   # returns \"db10001db\"\ndecimal_to_binary(18)   # returns \"db10010db\"\ndecimal_to_binary(19)   # returns \"db10011db\"\ndecimal_to_binary(20)   # returns \"db10100db\"\ndecimal_to_binary(21)   # returns \"db10", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n```\n\n### Response:\n```python\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n```\n\n### Explanation:\nThe function takes in a decimal number as an argument and returns a string in binary format. The function first initializes an empty string called binary. Then, it uses a while loop to repeatedly divide the decimal number by 2 and append the remainder to the binary string. Finally, it returns the binary string with the extra characters 'db' at the beginning and end.\n\n### Test Cases:\n```python\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\ndecimal_to_binary(0)    # returns \"db0db\"\ndecimal_to_binary(1)    # returns \"db1db\"\ndecimal_to_binary(2)    # returns \"db10db\"\ndecimal_to_binary(3)    # returns \"db11db\"\ndecimal_to_binary(4)    # returns \"db100db\"\ndecimal_to_binary(5)    # returns \"db101db\"\ndecimal_to_binary(6)    # returns \"db110db\"\ndecimal_to_binary(7)    # returns \"db111db\"\ndecimal_to_binary(8)    # returns \"db1000db\"\ndecimal_to_binary(9)    # returns \"db1001db\"\ndecimal_to_binary(10)   # returns \"db1010db\"\ndecimal_to_binary(11)   # returns \"db1011db\"\ndecimal_to_binary(12)   # returns \"db1100db\"\ndecimal_to_binary(13)   # returns \"db1101db\"\ndecimal_to_binary(14)   # returns \"db1110db\"\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(16)   # returns \"db10000db\"\ndecimal_to_binary(17)   # returns \"db10001db\"\ndecimal_to_binary(18)   # returns \"db10010db\"\ndecimal_to_binary(19)   # returns \"db10011db\"\ndecimal_to_binary(20)   # returns \"db10100db\"\ndecimal_to_binary(21)   # returns \"db10"}
