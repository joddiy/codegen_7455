{"task_id": "HumanEval/80", "completion": "\n```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n```\n\n### Explanation:\nThe function `is_happy` takes a string `s` as input and returns a boolean value.\n\nThe function first checks if the length of the string `s` is less than 3. If it is, it returns `False`.\n\nThen, the function iterates over the string `s` with a for loop. For each iteration, it checks if the current character `s[i]` is equal to the next character `s[i + 1]` and the character after that `s[i + 2]`. If any of these conditions is true, the function returns `False`.\n\nIf the function completes the loop without returning `False`, it means that the string `s` is happy and the function returns `True`.\n\n### Test Cases:\n```python\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False\n```\n\n### Reflection:\nThe function `is_happy` takes a string `s` as input and returns a boolean value.\n\nThe function first checks if the length of the string `s` is less than 3. If it is, it returns `False`.\n\nThen, the function iterates over the string `s` with a for loop. For each iteration, it checks if the current character `s[i]` is equal to the next character `s[i + 1]` and the character after that `s[i + 2]`. If any of these conditions is true, the function returns `False`.\n\nIf the function completes the loop without returning `False`, it means that the string `s` is happy and the function returns `True`.\n\nThe function is tested with a series of assert statements. Each assert statement checks if the function returns the expected boolean value for a given input string. If all assert statements pass, it means that the function is working correctly.\n\n### Conclusion:\nThe function `is_happy` takes a string `s` as input and returns a boolean value.\n\nThe function first checks if the length of the string `s` is less than 3. If it is, it returns `False`.\n\nThen, the function iterates over the string `s` with a for loop. For each iteration, it checks if the current character `s[i]` is equal to the next character `s[i + 1]` and the character after that `s[i + 2]`. If any of these conditions is true, the function returns `False`.\n\nIf the function completes the loop without returning `False`, it means that the string `s` is happy and the function returns `True`.\n\nThe function is tested with a series of assert statements. Each assert statement checks if the function returns the expected boolean value for a given input string. If all assert statements pass, it means that the function is working correctly.\n\n### References:\nNone\n\n### Tags:\nPython, string, loop, condition\n\n### Author:\n[Your Name]\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n```\n\n### Response:\n```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n```\n\n### Explanation:\nThe function `is_happy` takes a string `s` as input and returns a boolean value.\n\nThe function first checks if the length of the string `s` is less than 3. If it is, it returns `False`.\n\nThen, the function iterates over the string `s` with a for loop. For each iteration, it checks if the current character `s[i]` is equal to the next character `s[i + 1]` and the character after that `s[i + 2]`. If any of these conditions is true, the function returns `False`.\n\nIf the function completes the loop without returning `False`, it means that the string `s` is happy and the function returns `True`.\n\n### Test Cases:\n```python\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False\n```\n\n### Reflection:\nThe function `is_happy` takes a string `s` as input and returns a boolean value.\n\nThe function first checks if the length of the string `s` is less than 3. If it is, it returns `False`.\n\nThen, the function iterates over the string `s` with a for loop. For each iteration, it checks if the current character `s[i]` is equal to the next character `s[i + 1]` and the character after that `s[i + 2]`. If any of these conditions is true, the function returns `False`.\n\nIf the function completes the loop without returning `False`, it means that the string `s` is happy and the function returns `True`.\n\nThe function is tested with a series of assert statements. Each assert statement checks if the function returns the expected boolean value for a given input string. If all assert statements pass, it means that the function is working correctly.\n\n### Conclusion:\nThe function `is_happy` takes a string `s` as input and returns a boolean value.\n\nThe function first checks if the length of the string `s` is less than 3. If it is, it returns `False`.\n\nThen, the function iterates over the string `s` with a for loop. For each iteration, it checks if the current character `s[i]` is equal to the next character `s[i + 1]` and the character after that `s[i + 2]`. If any of these conditions is true, the function returns `False`.\n\nIf the function completes the loop without returning `False`, it means that the string `s` is happy and the function returns `True`.\n\nThe function is tested with a series of assert statements. Each assert statement checks if the function returns the expected boolean value for a given input string. If all assert statements pass, it means that the function is working correctly.\n\n### References:\nNone\n\n### Tags:\nPython, string, loop, condition\n\n### Author:\n[Your Name]\n"}
