{"task_id": "HumanEval/61", "completion": "\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n```\n\n### Explanation:\nThe function `correct_bracketing` takes a string `brackets` as input and returns `True` if every opening bracket `(` has a corresponding closing bracket `)`.\n\nThe function uses a stack to keep track of the opening brackets. It iterates over each character in the string `brackets`. If the character is an opening bracket `(`, it is pushed onto the stack. If the character is a closing bracket `)`, it checks if the stack is empty. If the stack is empty, it means there is no corresponding opening bracket for the closing bracket, so the function returns `False`. If the stack is not empty, it pops the top element from the stack, which corresponds to the opening bracket that was just matched with the closing bracket.\n\nAfter iterating over all the characters in the string, the function checks if the stack is empty. If the stack is empty, it means that all the opening brackets have been matched with their corresponding closing brackets, so the function returns `True`. If the stack is not empty, it means there are unmatched opening brackets, so the function returns `False`.\n\n### Test Cases:\nThe function is tested with the following test cases:\n\n- `correct_bracketing(\"(\")`: returns `False`\n- `correct_bracketing(\"()\")`: returns `True`\n- `correct_bracketing(\"(()())\")`: returns `True`\n- `correct_bracketing(\")(()\")`: returns `False`\n\n### Time Complexity:\nThe time complexity of the function is `O(n)`, where `n` is the length of the input string `brackets`. This is because the function iterates over each character in the string once, and the operations inside the loop are constant time.\n\n### Space Complexity:\nThe space complexity of the function is `O(n)`, where `n` is the length of the input string `brackets`. This is because the function uses a stack to keep track of the opening brackets, and the size of the stack is proportional to the number of opening brackets in the input string.\n\n### Conclusion:\nThe function `correct_bracketing` takes a string of brackets as input and returns `True` if every opening bracket has a corresponding closing bracket, and `False` otherwise. The function uses a stack to keep track of the opening brackets and iterates over the input string once. The time complexity of the function is `O(n)` and the space complexity is `O(n)`, where `n` is the length of the input string.\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n```\n\n### Response:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n```\n\n### Explanation:\nThe function `correct_bracketing` takes a string `brackets` as input and returns `True` if every opening bracket `(` has a corresponding closing bracket `)`.\n\nThe function uses a stack to keep track of the opening brackets. It iterates over each character in the string `brackets`. If the character is an opening bracket `(`, it is pushed onto the stack. If the character is a closing bracket `)`, it checks if the stack is empty. If the stack is empty, it means there is no corresponding opening bracket for the closing bracket, so the function returns `False`. If the stack is not empty, it pops the top element from the stack, which corresponds to the opening bracket that was just matched with the closing bracket.\n\nAfter iterating over all the characters in the string, the function checks if the stack is empty. If the stack is empty, it means that all the opening brackets have been matched with their corresponding closing brackets, so the function returns `True`. If the stack is not empty, it means there are unmatched opening brackets, so the function returns `False`.\n\n### Test Cases:\nThe function is tested with the following test cases:\n\n- `correct_bracketing(\"(\")`: returns `False`\n- `correct_bracketing(\"()\")`: returns `True`\n- `correct_bracketing(\"(()())\")`: returns `True`\n- `correct_bracketing(\")(()\")`: returns `False`\n\n### Time Complexity:\nThe time complexity of the function is `O(n)`, where `n` is the length of the input string `brackets`. This is because the function iterates over each character in the string once, and the operations inside the loop are constant time.\n\n### Space Complexity:\nThe space complexity of the function is `O(n)`, where `n` is the length of the input string `brackets`. This is because the function uses a stack to keep track of the opening brackets, and the size of the stack is proportional to the number of opening brackets in the input string.\n\n### Conclusion:\nThe function `correct_bracketing` takes a string of brackets as input and returns `True` if every opening bracket has a corresponding closing bracket, and `False` otherwise. The function uses a stack to keep track of the opening brackets and iterates over the input string once. The time complexity of the function is `O(n)` and the space complexity is `O(n)`, where `n` is the length of the input string.\n"}
