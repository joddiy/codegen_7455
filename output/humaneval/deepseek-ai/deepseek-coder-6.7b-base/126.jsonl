{"task_id": "HumanEval/126", "completion": "\n```python\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # check if list is empty\n    if len(lst) == 0:\n        return True\n    # check if list has more than 1 duplicate of the same number\n    if len(lst) != len(set(lst)):\n        return False\n    # check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```\n\n### Explanation:\nThe function `is_sorted` takes a list of numbers as input and returns a boolean value indicating whether or not the list is sorted in ascending order.\n\nThe function first checks if the list is empty. If it is, it returns `True`.\n\nNext, the function checks if the list has more than 1 duplicate of the same number. If it does, it returns `False`.\n\nThe function then checks if the list is sorted in ascending order. It does this by iterating through the list and comparing each element to the next one. If the current element is greater than the next one, it returns `False`.\n\nIf the list passes all of these checks, the function returns `True`.\n\n### Test Cases:\n```python\n# test cases\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n```\n\n### Response:\n```python\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # check if list is empty\n    if len(lst) == 0:\n        return True\n    # check if list has more than 1 duplicate of the same number\n    if len(lst) != len(set(lst)):\n        return False\n    # check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```\n\n### Explanation:\nThe function `is_sorted` takes a list of numbers as input and returns a boolean value indicating whether or not the list is sorted in ascending order.\n\nThe function first checks if the list is empty. If it is, it returns `True`.\n\nNext, the function checks if the list has more than 1 duplicate of the same number. If it does, it returns `False`.\n\nThe function then checks if the list is sorted in ascending order. It does this by iterating through the list and comparing each element to the next one. If the current element is greater than the next one, it returns `False`.\n\nIf the list passes all of these checks, the function returns `True`.\n\n### Test Cases:\n```python\n# test cases\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, "}
