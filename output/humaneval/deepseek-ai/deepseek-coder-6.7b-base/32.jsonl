{"task_id": "HumanEval/32", "completion": "\n\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    largest_coeff = max(xs)\n    largest_coeff_index = xs.index(largest_coeff)\n    xs = xs[largest_coeff_index:]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs =", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n```\n\n### Response:\n\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    largest_coeff = max(xs)\n    largest_coeff_index = xs.index(largest_coeff)\n    xs = xs[largest_coeff_index:]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs = xs[::-1]\n    xs = xs[1:]\n    xs = xs[::-1]\n    xs = xs[::2]\n    xs ="}
