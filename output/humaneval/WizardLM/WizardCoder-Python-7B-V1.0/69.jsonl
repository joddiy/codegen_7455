{"task_id": "HumanEval/69", "completion": "Here's one possible solution:\r\n\r\n```python\r\ndef search(lst):\r\n    from collections import Counter\r\n    \r\n    # Count the frequency of each integer in the list\r\n    freq = Counter(lst)\r\n    \r\n    # Find the maximum frequency\r\n    max_freq = max(freq.values())\r\n    \r\n    # Find the maximum integer with the maximum frequency\r\n    max_int = max(filter(lambda x: freq[x] == max_freq, freq.keys()))\r\n    \r\n    # Find the first integer in the list that is greater than zero and has the maximum frequency\r\n    result = next((x for x in lst if x > 0 and freq[x] >= x), -1)\r\n    \r\n    return result\r\n```\r\n\r\nExplanation:\r\n\r\nWe first use the `Counter` class from the `collections` module to count the frequency of each integer in the list. We then find the maximum frequency and the maximum integer with that frequency. We then iterate through the list and return the first integer that is greater than zero and has a frequency greater than or equal to its value.\r\n\r\nFor example, if the list is `[4, 1, 2, 2, 3, 1]`, the frequency of each integer is:\r\n\r\n```\r\n{4: 1, 1: 2, 2: 2, 3: 1}\r\n```\r\n\r\nThe maximum frequency is 2, and the maximum integer with that frequency is 2. We then iterate through the list and return the first integer that is greater than zero and has a frequency greater than or equal to 2, which is 2. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n```\n\n### Response:Here's one possible solution:\r\n\r\n```python\r\ndef search(lst):\r\n    from collections import Counter\r\n    \r\n    # Count the frequency of each integer in the list\r\n    freq = Counter(lst)\r\n    \r\n    # Find the maximum frequency\r\n    max_freq = max(freq.values())\r\n    \r\n    # Find the maximum integer with the maximum frequency\r\n    max_int = max(filter(lambda x: freq[x] == max_freq, freq.keys()))\r\n    \r\n    # Find the first integer in the list that is greater than zero and has the maximum frequency\r\n    result = next((x for x in lst if x > 0 and freq[x] >= x), -1)\r\n    \r\n    return result\r\n```\r\n\r\nExplanation:\r\n\r\nWe first use the `Counter` class from the `collections` module to count the frequency of each integer in the list. We then find the maximum frequency and the maximum integer with that frequency. We then iterate through the list and return the first integer that is greater than zero and has a frequency greater than or equal to its value.\r\n\r\nFor example, if the list is `[4, 1, 2, 2, 3, 1]`, the frequency of each integer is:\r\n\r\n```\r\n{4: 1, 1: 2, 2: 2, 3: 1}\r\n```\r\n\r\nThe maximum frequency is 2, and the maximum integer with that frequency is 2. We then iterate through the list and return the first integer that is greater than zero and has a frequency greater than or equal to 2, which is 2. "}
