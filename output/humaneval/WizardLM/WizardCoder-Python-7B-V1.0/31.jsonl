{"task_id": "HumanEval/31", "completion": "Here's a possible solution to the problem:\r\n\r\n```python\r\ndef is_prime(n):\r\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n ** 0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n```\r\n\r\nThis solution uses a simple algorithm to check if a number is prime. It first checks if the number is less than 2, in which case it is not prime. Then, it iterates over all the numbers from 2 to the square root of the given number (inclusive) and checks if any of them divide the number evenly. If it finds a divisor, it returns False. If it reaches the end of the loop without finding a divisor, it returns True.\r\n\r\nNote that this algorithm is not the most efficient possible, as it only checks divisors up to the square root of the number. There are more efficient algorithms that can be used to check for prime numbers, but this one is simple and easy to understand. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n```\n\n### Response:Here's a possible solution to the problem:\r\n\r\n```python\r\ndef is_prime(n):\r\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n ** 0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n```\r\n\r\nThis solution uses a simple algorithm to check if a number is prime. It first checks if the number is less than 2, in which case it is not prime. Then, it iterates over all the numbers from 2 to the square root of the given number (inclusive) and checks if any of them divide the number evenly. If it finds a divisor, it returns False. If it reaches the end of the loop without finding a divisor, it returns True.\r\n\r\nNote that this algorithm is not the most efficient possible, as it only checks divisors up to the square root of the number. There are more efficient algorithms that can be used to check for prime numbers, but this one is simple and easy to understand. "}
