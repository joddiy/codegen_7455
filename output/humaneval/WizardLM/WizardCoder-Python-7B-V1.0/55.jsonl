{"task_id": "HumanEval/55", "completion": "Here's a possible solution to the problem:\r\n\r\n```python\r\ndef fib(n: int):\r\n    \"\"\"Return n-th Fibonacci number.\"\"\"\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return fib(n-1) + fib(n-2)\r\n```\r\n\r\nThis solution uses recursion to compute the n-th Fibonacci number. The base cases are when n is 0 or 1, in which case the function simply returns n. Otherwise, it computes the n-th Fibonacci number by adding the (n-1)-th and (n-2)-th Fibonacci numbers. This is done by calling the `fib` function recursively with n-1 and n-2 as arguments, respectively. The function will keep calling itself until it reaches the base cases, and then return the result. The time complexity of this solution is O(2^n), which is not very efficient for large values of n. However, it is simple and easy to understand. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n```\n\n### Response:Here's a possible solution to the problem:\r\n\r\n```python\r\ndef fib(n: int):\r\n    \"\"\"Return n-th Fibonacci number.\"\"\"\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return fib(n-1) + fib(n-2)\r\n```\r\n\r\nThis solution uses recursion to compute the n-th Fibonacci number. The base cases are when n is 0 or 1, in which case the function simply returns n. Otherwise, it computes the n-th Fibonacci number by adding the (n-1)-th and (n-2)-th Fibonacci numbers. This is done by calling the `fib` function recursively with n-1 and n-2 as arguments, respectively. The function will keep calling itself until it reaches the base cases, and then return the result. The time complexity of this solution is O(2^n), which is not very efficient for large values of n. However, it is simple and easy to understand. "}
