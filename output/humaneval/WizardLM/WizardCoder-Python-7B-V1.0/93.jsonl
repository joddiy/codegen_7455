{"task_id": "HumanEval/93", "completion": "Here's the solution to the problem:\r\n\r\n```python\r\ndef encode(message):\r\n    \"\"\"\r\n    This function takes a message as input and returns the encoded message.\r\n    It swaps the case of all letters and replaces all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\r\n    \"\"\"\r\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\r\n    encoded_message = ''\r\n    for char in message:\r\n        if char.lower() in vowels:\r\n            index = vowels.index(char.lower())\r\n            if index == 0:\r\n                encoded_message += vowels[-1].upper() if char.isupper() else vowels[-1]\r\n            elif index == len(vowels) - 1:\r\n                encoded_message += vowels[0].upper() if char.isupper() else vowels[0]\r\n            else:\r\n                encoded_message += vowels[index+2].upper() if char.isupper() else vowels[index+2]\r\n        else:\r\n            encoded_message += char.swapcase()\r\n    return encoded_message\r\n```\r\n\r\nWe start by defining a list of vowels and initializing an empty string to store the encoded message. We then loop through each character in the message and check if it is a vowel or not. If it is a vowel, we find its index in the list of vowels and add the letter that appears 2 places ahead of it in the English alphabet to the encoded message. If it is not a vowel, we swap the case of the character using the `swapcase()` method and add it to the encoded message. Finally, we return the encoded message. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n```\n\n### Response:Here's the solution to the problem:\r\n\r\n```python\r\ndef encode(message):\r\n    \"\"\"\r\n    This function takes a message as input and returns the encoded message.\r\n    It swaps the case of all letters and replaces all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\r\n    \"\"\"\r\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\r\n    encoded_message = ''\r\n    for char in message:\r\n        if char.lower() in vowels:\r\n            index = vowels.index(char.lower())\r\n            if index == 0:\r\n                encoded_message += vowels[-1].upper() if char.isupper() else vowels[-1]\r\n            elif index == len(vowels) - 1:\r\n                encoded_message += vowels[0].upper() if char.isupper() else vowels[0]\r\n            else:\r\n                encoded_message += vowels[index+2].upper() if char.isupper() else vowels[index+2]\r\n        else:\r\n            encoded_message += char.swapcase()\r\n    return encoded_message\r\n```\r\n\r\nWe start by defining a list of vowels and initializing an empty string to store the encoded message. We then loop through each character in the message and check if it is a vowel or not. If it is a vowel, we find its index in the list of vowels and add the letter that appears 2 places ahead of it in the English alphabet to the encoded message. If it is not a vowel, we swap the case of the character using the `swapcase()` method and add it to the encoded message. Finally, we return the encoded message. "}
