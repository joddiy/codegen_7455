{"task_id": "HumanEval/80", "completion": "Here's a possible solution to the problem:\r\n\r\n```python\r\ndef is_happy(s):\r\n    if len(s) < 3:\r\n        return False\r\n    for i in range(len(s)-2):\r\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\r\n            return False\r\n    return True\r\n```\r\n\r\nThis function takes a string `s` as input and returns `True` if it is happy and `False` otherwise. It first checks if the length of the string is less than 3, in which case it is not happy. Then, it iterates over the string and checks if any three consecutive letters are the same. If it finds any, it returns `False`. If it reaches the end of the string without finding any repeated letters, it returns `True`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n```\n\n### Response:Here's a possible solution to the problem:\r\n\r\n```python\r\ndef is_happy(s):\r\n    if len(s) < 3:\r\n        return False\r\n    for i in range(len(s)-2):\r\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\r\n            return False\r\n    return True\r\n```\r\n\r\nThis function takes a string `s` as input and returns `True` if it is happy and `False` otherwise. It first checks if the length of the string is less than 3, in which case it is not happy. Then, it iterates over the string and checks if any three consecutive letters are the same. If it finds any, it returns `False`. If it reaches the end of the string without finding any repeated letters, it returns `True`. "}
