{"task_id": "HumanEval/59", "completion": "Here's one possible solution:\r\n\r\n```python\r\ndef largest_prime_factor(n: int):\r\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\r\n    i = 2\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n    return n\r\n```\r\n\r\nThis solution works by iterating over all possible factors of `n` from 2 to the square root of `n`. If `n` is divisible by `i`, then `i` is a factor of `n`, so we divide `n` by `i` and continue the loop. If `n` is not divisible by `i`, we move on to the next value of `i`. Once we reach a value of `i` where `i * i > n`, we know that `n` has no more factors, so we return `n`. This is because any factors of `n` that are greater than the square root of `n` must be less than `i`, so we can stop iterating. If `n` is prime, the function will return `n` itself. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n```\n\n### Response:Here's one possible solution:\r\n\r\n```python\r\ndef largest_prime_factor(n: int):\r\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\r\n    i = 2\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n    return n\r\n```\r\n\r\nThis solution works by iterating over all possible factors of `n` from 2 to the square root of `n`. If `n` is divisible by `i`, then `i` is a factor of `n`, so we divide `n` by `i` and continue the loop. If `n` is not divisible by `i`, we move on to the next value of `i`. Once we reach a value of `i` where `i * i > n`, we know that `n` has no more factors, so we return `n`. This is because any factors of `n` that are greater than the square root of `n` must be less than `i`, so we can stop iterating. If `n` is prime, the function will return `n` itself. "}
