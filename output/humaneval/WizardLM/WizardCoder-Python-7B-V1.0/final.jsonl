{"task_id": "HumanEval/0", "completion": "from typing import List\r\n\r\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\r\n    for i in range(len(numbers)):\r\n        for j in range(i+1, len(numbers)):\r\n            if abs(numbers[i] - numbers[j]) < threshold:\r\n                return True\r\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\r\n\r\ndef separate_paren_groups(paren_string: str) -> List[str]:\r\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\r\n    separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace\r\n    is properly closed) and not nested within each other. Ignore any spaces in the input string.\r\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\r\n    ['()', '(())', '(()())']\r\n    \"\"\"\r\n    # Initialize an empty list to store the separate groups\r\n    groups = []\r\n    # Initialize a variable to keep track of the current group\r\n    current_group = ''\r\n    # Initialize a counter to keep track of the number of open parentheses\r\n    open_count = 0\r\n    # Loop through each character in the input string\r\n    for char in paren_string:\r\n        # If the character is an open parenthesis, increment the open count\r\n        if char == '(':\r\n            open_count += 1\r\n        # If the character is a close parenthesis, decrement the open count\r\n        elif char == ')':\r\n            open_count -= 1\r\n        # If the open count reaches zero, we have found the end of a group\r\n        if open_count == 0:\r\n            # Add the current group to the list of groups and reset it\r\n            groups.append(current_group)\r\n            current_group = ''\r\n        # Add the character to the current group\r\n        current_group += char\r\n    # Add the last group to the list of groups\r\n    groups.append(current_group)\r\n    # Return the list of groups\r\n    return groups"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\r\n    \"\"\" Test if given string is a palindrome \"\"\"\r\n    return string == string[::-1]\r\n\r\n\r\ndef make_palindrome(string: str) -> str:\r\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \r\n    Algorithm idea is simple:\r\n    - Find the longest postfix of supplied string that is a palindrome.\r\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\r\n    >>> make_palindrome('')\r\n    ''\r\n    >>> make_palindrome('cat')\r\n    'catac'\r\n    >>> make_palindrome('cata')\r\n    'catac'\r\n    \"\"\"\r\n    if not string:\r\n        return ''\r\n    \r\n    if is_palindrome(string):\r\n        return string\r\n    \r\n    for i in range(len(string)-1, -1, -1):\r\n        prefix = string[:i+1]\r\n        suffix = string[i+1:]\r\n        if is_palindrome(suffix):\r\n            return prefix + suffix[::-1]\r\n    \r\n    return string + string[::-1]"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\r\n    \"\"\"\r\n    Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones.\r\n    The number of stones in the next level is:\r\n        - the next odd number if n is odd.\r\n        - the next even number if n is even.\r\n    Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\r\n\r\n    Examples:\r\n    >>> make_a_pile(3)\r\n    [3, 5, 7]\r\n    \"\"\"\r\n    pile = []\r\n    for i in range(n):\r\n        if n % 2 == 0:\r\n            pile.append(n+2*i)\r\n        else:\r\n            pile.append(n+2*i+1)\r\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\r\n    # Split the string by spaces or commas and return the resulting list of words\r\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\r\n    \"\"\"This function takes two positive numbers x and y and returns the\r\n    biggest even integer number that is in the range [x, y] inclusive. If \r\n    there's no such number, then the function should return -1.\r\n    \r\n    For example:\r\n    choose_num(12, 15) = 14\r\n    choose_num(13, 12) = -1\r\n    \"\"\"\r\n    \r\n    # Initialize the biggest even number to -1\r\n    biggest_even = -1\r\n    \r\n    # Loop through all the numbers in the range [x, y] inclusive\r\n    for num in range(x, y+1):\r\n        # Check if the number is even\r\n        if num % 2 == 0:\r\n            # If the number is even and greater than the current biggest even number,\r\n            # update the biggest even number\r\n            if num > biggest_even:\r\n                biggest_even = num\r\n    \r\n    # Return the biggest even number found, or -1 if no even number was found\r\n    return biggest_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\r\n    if n > m:\r\n        return -1\r\n    else:\r\n        avg = round((n + m) / 2)\r\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\r\n    \"\"\"Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit.\r\n    \r\n    Note: Returned list should be sorted in increasing order.\r\n    \r\n    For example:\r\n    >>> unique_digits([15, 33, 1422, 1])\r\n    [1, 15, 33]\r\n    >>> unique_digits([152, 323, 1422, 10])\r\n    []\r\n    \"\"\"\r\n    # Initialize an empty list to store the unique digits\r\n    unique_digits_list = []\r\n    \r\n    # Loop through each element in the input list\r\n    for num in x:\r\n        # Convert the number to a string to check each digit\r\n        num_str = str(num)\r\n        \r\n        # Check if any digit is even\r\n        for digit in num_str:\r\n            if int(digit) % 2 == 0:\r\n                # If even digit is found, break out of the loop and move to the next number\r\n                break\r\n        else:\r\n            # If no even digit is found, add the number to the unique digits list\r\n            unique_digits_list.append(num)\r\n    \r\n    # Sort the list and return it\r\n    return sorted(unique_digits_list)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\r\n    # Check if the array is empty\r\n    if not arr:\r\n        return []\r\n    \r\n    # Filter out the numbers that are not between 1 and 9 inclusive\r\n    arr = [x for x in arr if x >= 1 and x <= 9]\r\n    \r\n    # Sort the array in descending order\r\n    arr.sort(reverse=True)\r\n    \r\n    # Define a dictionary to map numbers to their corresponding names\r\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\r\n    \r\n    # Convert the numbers to their corresponding names and return the result\r\n    return [num_to_name[x] for x in arr if x in num_to_name]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\r\n    result = []\r\n    for i in range(1, n+1):\r\n        if i % 2 == 0:\r\n            result.append(i)\r\n        else:\r\n            fact = 1\r\n            for j in range(1, i+1):\r\n                fact *= j\r\n            result.append(fact)\r\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\r\n    even_count = 0\r\n    odd_count = 0\r\n    for i in range(1, n+1):\r\n        if str(i) == str(i)[::-1]:\r\n            if i % 2 == 0:\r\n                even_count += 1\r\n            else:\r\n                odd_count += 1\r\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\r\n    count = 0\r\n    for num in arr:\r\n        if sum(int(digit) for digit in str(abs(num))) > 0:\r\n            count += 1\r\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\r\n    if not arr:\r\n        return True\r\n    \r\n    # Sort the array in non-decreasing order\r\n    arr.sort()\r\n    \r\n    # Check if the sorted array is the same as the original array\r\n    for i in range(len(arr)):\r\n        if arr[i] != i+1:\r\n            return False\r\n    \r\n    return True"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\r\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s. \r\n    Perform binary XOR on these inputs and return result also as a string. \r\n    >>> string_xor('010', '110')\r\n    '100'\r\n    \"\"\"\r\n    # Convert the strings to lists of characters\r\n    a_list = list(a)\r\n    b_list = list(b)\r\n    \r\n    # Initialize an empty list to store the result\r\n    result = []\r\n    \r\n    # Loop through the characters in both lists and perform XOR operation on them\r\n    for i in range(len(a_list)):\r\n        if a_list[i] == b_list[i]:\r\n            result.append('0')\r\n        else:\r\n            result.append('1')\r\n    \r\n    # Convert the result list to a string and return it\r\n    return ''.join(result)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\r\n    # create a set of odd numbers from lst1\r\n    odd_numbers = set(num for num in lst1 if num % 2 == 1)\r\n    # create a set of even numbers from lst2\r\n    even_numbers = set(num for num in lst2 if num % 2 == 0)\r\n    # check if there is any overlap between the two sets\r\n    if odd_numbers.intersection(even_numbers):\r\n        return \"NO\"\r\n    else:\r\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\r\n    # Split the string into a list of characters\r\n    chars = list(test)\r\n    # Create an empty dictionary to store the counts\r\n    counts = {}\r\n    # Iterate over each character in the list\r\n    for char in chars:\r\n        # If the character is already in the dictionary, increment its count\r\n        if char in counts:\r\n            counts[char] += 1\r\n        # Otherwise, add it to the dictionary with a count of 1\r\n        else:\r\n            counts[char] = 1\r\n    # Find the maximum count and return the dictionary with only the characters that have that count\r\n    max_count = max(counts.values())\r\n    return {char: count for char, count in counts.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\r\n    # Remove all characters in s that are in c\r\n    s = ''.join([char for char in s if char not in c])\r\n    # Reverse the string\r\n    s = s[::-1]\r\n    # Check if the reversed string is equal to the original string\r\n    result = s == s[::-1]\r\n    return s, result"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\r\n    result = []\r\n    for i in range(len(lst)):\r\n        count = 0\r\n        for digit in lst[i]:\r\n            if int(digit) % 2 != 0:\r\n                count += 1\r\n        result.append(\"the number of odd elements in the string \" + str(count) + \" of the input.\")\r\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\r\n    \"\"\"\r\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\r\n    of nums.\r\n    \"\"\"\r\n    min_sum = float('inf')\r\n    current_sum = 0\r\n    for i in range(len(nums)):\r\n        current_sum += nums[i]\r\n        min_sum = min(min_sum, current_sum)\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    if min_sum == float('inf'):\r\n        return 0\r\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\r\n    # Initialize variables\r\n    rows = len(grid)\r\n    cols = len(grid[0])\r\n    buckets = []\r\n    count = 0\r\n    \r\n    # Iterate through each row and count the number of water units in each well\r\n    for row in grid:\r\n        count += row.count(1)\r\n    \r\n    # If there are no water units, return 0\r\n    if count == 0:\r\n        return 0\r\n    \r\n    # Calculate the number of buckets needed\r\n    num_buckets = math.ceil(count / capacity)\r\n    \r\n    # Iterate through each row and add the number of water units to the buckets\r\n    for row in grid:\r\n        for well in row:\r\n            if well == 1:\r\n                buckets.append(1)\r\n    \r\n    # Iterate through each row and extract water from the wells\r\n    for i in range(rows):\r\n        for j in range(cols):\r\n            if grid[i][j] == 1:\r\n                # If there is enough water in the bucket, extract it and move to the next well\r\n                if sum(buckets) >= capacity:\r\n                    buckets[j] -= capacity\r\n                # If there is not enough water in the bucket, extract as much as possible and move to the next well\r\n                else:\r\n                    buckets[j] = 0\r\n                    count -= sum(buckets)\r\n                    buckets.append(1)\r\n                    count += 1\r\n    \r\n    # Return the number of times the buckets need to be lowered\r\n    return math.ceil(count / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\r\n    # Convert each element to binary and count the number of ones\r\n    binary_count = [(bin(x)[2:].count('1'), x) for x in arr]\r\n    # Sort the array based on the number of ones and then decimal value\r\n    binary_count.sort()\r\n    # Extract the original values from the sorted binary count list\r\n    return [x[1] for x in binary_count]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\r\n    # Split the string into a list of words\r\n    words = s.split()\r\n    # Initialize an empty list to store the words that meet the criteria\r\n    result = []\r\n    # Loop through each word in the list of words\r\n    for word in words:\r\n        # Initialize a counter for the number of consonants in the word\r\n        consonant_count = 0\r\n        # Loop through each character in the word\r\n        for char in word:\r\n            # If the character is a consonant, increment the counter\r\n            if char.lower() not in \"aeiou\":\r\n                consonant_count += 1\r\n        # If the word has exactly n consonants, add it to the result list\r\n        if consonant_count == n:\r\n            result.append(word)\r\n    # Return the result list\r\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\r\n    vowels = \"AEIOU\"\r\n    for i in range(len(word)-1, 0, -1):\r\n        if word[i].upper() in vowels and word[i-1].upper() not in vowels:\r\n            return word[i].upper()\r\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\r\n    # Initialize a stack to keep track of open parentheses\r\n    stack = []\r\n    \r\n    # Iterate through each character in the list\r\n    for char in lst:\r\n        # If the character is an open parenthesis, push it onto the stack\r\n        if char == '(':\r\n            stack.append(char)\r\n        # If the character is a close parenthesis, check if there is a matching open parenthesis\r\n        # on the stack. If there is, pop it. If there isn't, return 'No'\r\n        elif char == ')':\r\n            if not stack:\r\n                return 'No'\r\n            stack.pop()\r\n    \r\n    # If the stack is empty, all parentheses are matched. Return 'Yes'\r\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\r\n\r\ndef longest(strings: List[str]) -> Optional[str]:\r\n    if not strings:\r\n        return None\r\n    longest_str = strings[0]\r\n    for string in strings:\r\n        if len(string) > len(longest_str):\r\n            longest_str = string\r\n    return longest_str"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\r\n    # Sort the array in descending order\r\n    arr.sort(reverse=True)\r\n    # Create an empty list to store the k maximum numbers\r\n    max_k = []\r\n    # Iterate through the sorted array and add the first k elements to the list\r\n    for i in range(k):\r\n        max_k.append(arr[i])\r\n    # Return the list of k maximum numbers\r\n    return max_k"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\r\n    # Initialize a variable to store the sum of odd elements in even positions\r\n    sum_of_odds = 0\r\n    \r\n    # Loop through each element in the list\r\n    for i in range(len(lst)):\r\n        # Check if the element is at an even position (i.e. i is even)\r\n        if i % 2 == 0:\r\n            # Check if the element is odd (i.e. not divisible by 2)\r\n            if lst[i] % 2 != 0:\r\n                # If both conditions are true, add the element to the sum\r\n                sum_of_odds += lst[i]\r\n    \r\n    # Return the final sum\r\n    return sum_of_odds"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\r\n    # Initialize sum to 0\r\n    total_sum = 0\r\n    # Loop through the first k elements of the array\r\n    for i in range(k):\r\n        # Check if the current element has two digits or less\r\n        if len(str(arr[i])) <= 2:\r\n            # Add the current element to the sum\r\n            total_sum += arr[i]\r\n    # Return the sum\r\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\r\n    \"\"\"\r\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\r\n\r\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\r\n    as follows: start with any positive integer n. Then each term is obtained from the \r\n    previous term as follows: if the previous term is even, the next term is one half of \r\n    the previous term. If the previous term is odd, the next term is 3 times the previous\r\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\r\n\r\n    Note:\r\n        1. Collatz(1) is [1].\r\n        2. returned list sorted in increasing order.\r\n\r\n    For example:\r\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\r\n    \"\"\"\r\n    if n == 1:\r\n        return [1]\r\n    else:\r\n        sequence = []\r\n        while n != 1:\r\n            if n % 2 == 0:\r\n                n //= 2\r\n            else:\r\n                n = 3 * n + 1\r\n            sequence.append(n)\r\n        return sorted(set(sequence))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\r\n    try:\r\n        # split the date string into month, day, and year\r\n        month, day, year = map(int, date.split('-'))\r\n        \r\n        # check if the date is not empty\r\n        if not date:\r\n            return False\r\n        \r\n        # check if the month is valid\r\n        if month < 1 or month > 12:\r\n            return False\r\n        \r\n        # check if the day is valid\r\n        if month in [1, 3, 5, 7, 8, 10, 12]:\r\n            if day < 1 or day > 31:\r\n                return False\r\n        elif month in [4, 6, 9, 11]:\r\n            if day < 1 or day > 30:\r\n                return False\r\n        elif month == 2:\r\n            # check if the year is a leap year\r\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\r\n                if day < 1 or day > 29:\r\n                    return False\r\n            else:\r\n                if day < 1 or day > 28:\r\n                    return False\r\n        \r\n        # check if the year is valid\r\n        if year < 1:\r\n            return False\r\n        \r\n        return True\r\n    except ValueError:\r\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\r\n    if ' ' in txt:\r\n        return txt.split()\r\n    elif ',' in txt:\r\n        return txt.split(',')\r\n    else:\r\n        count = 0\r\n        for i in range(len(txt)):\r\n            if ord(txt[i]) % 2 == 1:\r\n                count += 1\r\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\r\n    # Check if list has more than 1 duplicate of the same number\r\n    if len(lst) != len(set(lst)):\r\n        return False\r\n    \r\n    # Check if list is sorted in ascending order\r\n    for i in range(len(lst)-1):\r\n        if lst[i] > lst[i+1]:\r\n            return False\r\n    \r\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\r\n    \"\"\"Helper function to check if a number is prime\"\"\"\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n**0.5)+1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef intersection(interval1, interval2):\r\n    \"\"\"\r\n    Determine whether the length of the intersection of two intervals is a prime number.\r\n    \"\"\"\r\n    # Check if the intervals intersect\r\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\r\n        return \"NO\"\r\n    # Find the intersection of the intervals\r\n    start = max(interval1[0], interval2[0])\r\n    end = min(interval1[1], interval2[1])\r\n    length = end - start + 1\r\n    # Check if the length is a prime number\r\n    if is_prime(length):\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\r\n    if not arr:\r\n        return None\r\n    \r\n    product = 1\r\n    magnitude = 0\r\n    for num in arr:\r\n        if num > 0:\r\n            magnitude += 1\r\n        elif num < 0:\r\n            magnitude -= 1\r\n        else:\r\n            magnitude += 0\r\n            \r\n    return magnitude * sum(arr)"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\r\n    n = len(grid)\r\n    # Initialize a set of visited cells and a set of paths\r\n    visited = set()\r\n    paths = set()\r\n    # Initialize the queue with the starting cell (0, 0) and the empty path\r\n    queue = [(0, 0, [grid[0][0]])]\r\n    # Loop until the queue is empty\r\n    while queue:\r\n        # Get the next cell to visit\r\n        i, j, path = queue.pop(0)\r\n        # If the path length is equal to k, add it to the set of paths\r\n        if len(path) == k:\r\n            paths.add(tuple(path))\r\n            continue\r\n        # If the cell is out of bounds, skip it\r\n        if i < 0 or i >= n or j < 0 or j >= n:\r\n            continue\r\n        # If the cell has already been visited, skip it\r\n        if (i, j) in visited:\r\n            continue\r\n        # Mark the cell as visited\r\n        visited.add((i, j))\r\n        # Add the cell to the path\r\n        path.append(grid[i][j])\r\n        # Add the neighbors to the queue\r\n        queue.append((i-1, j, path)\r\n                    if i > 0 else None)\r\n        queue.append((i+1, j, path)\r\n                    if i < n-1 else None)\r\n        queue.append((i, j-1, path)\r\n                    if j > 0 else None)\r\n        queue.append((i, j+1, path)\r\n                    if j < n-1 else None)\r\n    # Find the minimum path\r\n    min_path = min(paths, key=lambda x: x[k-1])\r\n    # Return the list of values on the cells that the minimum path goes through\r\n    return list(min_path)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\r\n    \"\"\"Return the greatest common divisor of two integers a and b\"\"\"\r\n    if a == 0:\r\n        return b\r\n    elif b == 0:\r\n        return a\r\n    else:\r\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\r\n    \"\"\"\r\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence.\r\n    Tribonacci sequence is defined by the recurrence:\r\n    tri(1) = 3\r\n    tri(n) = 1 + n / 2, if n is even.\r\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\r\n    For example:\r\n    tri(2) = 1 + (2 / 2) = 2\r\n    tri(4) = 3\r\n    tri(3) = tri(2) + tri(1) + tri(4)\r\n           = 2 + 3 + 3 = 8\r\n    You are given a non-negative integer number n, you have to a return a list of the first n + 1 numbers of the Tribonacci sequence.\r\n    Examples:\r\n    tri(3) = [1, 3, 2, 8]\r\n    \"\"\"\r\n    if n == 0:\r\n        return []\r\n    elif n == 1:\r\n        return [1]\r\n    elif n == 2:\r\n        return [1, 3]\r\n    elif n == 3:\r\n        return [1, 3, 2]\r\n    else:\r\n        sequence = [1, 3, 2]\r\n        for i in range(3, n + 1):\r\n            if i % 2 == 0:\r\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\r\n            else:\r\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3] + sequence[i - 1])\r\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\r\n    product = 1\r\n    for digit in str(n):\r\n        if int(digit) % 2 == 1:\r\n            product *= int(digit)\r\n    return product if product != 0 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\r\n    stack = []\r\n    for char in string:\r\n        if char == '[':\r\n            stack.append(char)\r\n        elif char == ']':\r\n            if not stack:\r\n                return False\r\n            stack.pop()\r\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\r\n    \"\"\"You are given a list of numbers.\r\n    You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.\r\n    Examples:\r\n    For lst = [1,2,3] the output should be 14\r\n    For lst = [1,4,9] the output should be 98\r\n    For lst = [1,3,5,7] the output should be 84\r\n    For lst = [1.4,4.2,0] the output should be 29\r\n    For lst = [-2.4,1,1] the output should be 6\r\n    \"\"\"\r\n    \r\n    # Initialize the sum variable to 0\r\n    total = 0\r\n    \r\n    # Loop through each element in the list\r\n    for num in lst:\r\n        # Round the number to the upper int(Ceiling) using math.ceil() function\r\n        num = math.ceil(num)\r\n        # Square the number and add it to the total\r\n        total += num ** 2\r\n        \r\n    # Return the total sum of squared numbers\r\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\r\n    # remove all spaces from the string\r\n    txt = txt.replace(\" \", \"\")\r\n    # get the last character of the string\r\n    last_char = txt[-1]\r\n    # check if the last character is a letter\r\n    if last_char.isalpha():\r\n        # check if the last character is not a part of a word\r\n        if last_char.isalpha() and last_char.islower():\r\n            return False\r\n        elif last_char.isalpha() and last_char.isupper():\r\n            return False\r\n        else:\r\n            return True\r\n    else:\r\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\r\n    \"\"\"\r\n    Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it.\r\n    If no such element exists then return -1.\r\n    \"\"\"\r\n    for i in range(len(arr)-1):\r\n        if arr[i] >= arr[i+1]:\r\n            return i\r\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\r\n    if not lst:\r\n        return (None, None)\r\n    \r\n    largest_negative = None\r\n    smallest_positive = None\r\n    \r\n    for num in lst:\r\n        if num < 0:\r\n            if largest_negative is None or num > largest_negative:\r\n                largest_negative = num\r\n        elif num > 0:\r\n            if smallest_positive is None or num < smallest_positive:\r\n                smallest_positive = num\r\n    \r\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\r\n    # Convert a and b to floats if they are strings representing real numbers\r\n    if isinstance(a, str) and ',' in a:\r\n        a = float(a.replace(',', '.'))\r\n    if isinstance(b, str) and ',' in b:\r\n        b = float(b.replace(',', '.'))\r\n    \r\n    # Convert a and b to floats if they are integers\r\n    if isinstance(a, int):\r\n        a = float(a)\r\n    if isinstance(b, int):\r\n        b = float(b)\r\n    \r\n    # Compare the values and return the larger one\r\n    if a == b:\r\n        return None\r\n    elif a > b:\r\n        return a\r\n    else:\r\n        return b"}
{"task_id": "HumanEval/138", "completion": "\r\ndef is_equal_to_sum_even(n):\r\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\r\n    # Check if n is even\r\n    if n % 2 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 4\r\n    if n % 4 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 6\r\n    if n % 6 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 8\r\n    if n % 8 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 12\r\n    if n % 12 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 16\r\n    if n % 16 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 20\r\n    if n % 20 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 24\r\n    if n % 24 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 28\r\n    if n % 28 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 30\r\n    if n % 30 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 32\r\n    if n % 32 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 36\r\n    if n % 36 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 40\r\n    if n % 40 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 44\r\n    if n % 44 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 48\r\n    if n % 48 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 52\r\n    if n % 52 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 56\r\n    if n % 56 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 60\r\n    if n % 60 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 64\r\n    if n % 64 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 68\r\n    if n % 68 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 72\r\n    if n % 72 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 76\r\n    if n % 76 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 80\r\n    if n % 80 != 0:\r\n        return False\r\n    \r\n    # Check if n is divisible by 84\r\n    if n % 8"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\r\n    \"\"\"\r\n    The Brazilian factorial is defined as:\r\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\r\n    where n > 0\r\n\r\n    This function will receive an integer as input and return the special factorial of this integer.\r\n    \"\"\"\r\n    if n <= 0:\r\n        return 1\r\n    else:\r\n        return n * special_factorial(n-1)\r\n\r\nprint(special_factorial(4)) # Output: 288"}
{"task_id": "HumanEval/14", "completion": "from typing import List\r\n\r\ndef all_prefixes(string: str) -> List[str]:\r\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\r\n    return [string[i:] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\r\n    # Replace all spaces with underscores\r\n    text = text.replace(\" \", \"_\")\r\n    # Replace all consecutive spaces with -\r\n    while \"  \" in text:\r\n        text = text.replace(\"  \", \"-\")\r\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\r\n    # Check if there are more than three digits in the file name\r\n    if sum(c.isdigit() for c in file_name) > 3:\r\n        return 'No'\r\n    \r\n    # Check if there is exactly one dot in the file name\r\n    if file_name.count('.') != 1:\r\n        return 'No'\r\n    \r\n    # Check if the substring before the dot starts with a letter and is not empty\r\n    if not file_name.split('.')[0] or not file_name.split('.')[0][0].isalpha():\r\n        return 'No'\r\n    \r\n    # Check if the substring after the dot is one of the allowed extensions\r\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\r\n        return 'No'\r\n    \r\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\r\n    \"\"\"\r\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \r\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \r\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\r\n    \r\n    Examples:\r\n    For lst = [1,2,3] the output should be 6\r\n    For lst = []  the output should be 0\r\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\r\n    \"\"\"\r\n    total = 0\r\n    for i in range(len(lst)):\r\n        if i % 3 == 0:\r\n            total += lst[i] ** 2\r\n        elif i % 4 == 0 and i % 3 != 0:\r\n            total += lst[i] ** 3\r\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\r\n    \"\"\"\r\n    Helper function to check if a number is prime or not.\r\n    \"\"\"\r\n    if n <= 1:\r\n        return False\r\n    for i in range(2, n):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef words_in_sentence(sentence):\r\n    # Split the sentence into words\r\n    words = sentence.split()\r\n    # Create an empty list to store the words with prime length\r\n    result = []\r\n    # Iterate over the words and check if the length is prime\r\n    for word in words:\r\n        if is_prime(len(word)):\r\n            result.append(word)\r\n    # Join the words with a space and return the result\r\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\r\n    # Convert the input strings to fractions\r\n    x_frac = Fraction(x)\r\n    n_frac = Fraction(n)\r\n    # Multiply the fractions\r\n    product = x_frac * n_frac\r\n    # Check if the result is an integer\r\n    return product.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\r\n    \"\"\"\r\n    Sorts the given list of integers in ascending order according to the sum of their digits.\r\n    If there are several items with the same sum of their digits, order them based on their index in the original list.\r\n    \"\"\"\r\n    def digit_sum(n):\r\n        \"\"\"\r\n        Returns the sum of the digits of the given integer.\r\n        \"\"\"\r\n        return sum(int(d) for d in str(abs(n)))\r\n    \r\n    # Sort the list based on the sum of digits and index in the original list\r\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\r\n    count = 0\r\n    for num in nums:\r\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\r\n            count += 1\r\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\r\n    a = [i * i - i + 1 for i in range(1, n + 1)]\r\n    count = 0\r\n    for i in range(n - 2):\r\n        for j in range(i + 1, n - 1):\r\n            for k in range(j + 1, n):\r\n                if (a[i] + a[j] + a[k]) % 3 == 0:\r\n                    count += 1\r\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\r\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\r\n    if planet1 not in planets or planet2 not in planets:\r\n        return ()\r\n    index1 = planets.index(planet1)\r\n    index2 = planets.index(planet2)\r\n    if index1 > index2:\r\n        return planets[index2+1:index1]\r\n    else:\r\n        return planets[index1+1:index2]"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\r\n    # Create a new list to store the filtered words\r\n    result = []\r\n    # Iterate through the input list\r\n    for word in lst:\r\n        # Check if the length of the word is even\r\n        if len(word) % 2 == 0:\r\n            # If it's even, add it to the result list\r\n            result.append(word)\r\n    # Sort the result list by length and then alphabetically\r\n    result.sort(key=lambda x: (len(x), x))\r\n    return result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\r\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\r\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\r\n    \"\"\"A simple program which should return the value of x if n is \r\n    a prime number and should return the value of y otherwise.\r\n    \r\n    Examples:\r\n    for x_or_y(7, 34, 12) == 34\r\n    for x_or_y(15, 8, 5) == 5\r\n    \"\"\"\r\n    \r\n    # function to check if a number is prime or not\r\n    def is_prime(num):\r\n        if num < 2:\r\n            return False\r\n        for i in range(2, num):\r\n            if num % i == 0:\r\n                return False\r\n        return True\r\n    \r\n    # check if n is prime or not\r\n    if is_prime(n):\r\n        return x\r\n    else:\r\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\r\n    # Initialize a variable to store the sum of squares of odd numbers\r\n    sum_of_squares = 0\r\n    \r\n    # Loop through each number in the list\r\n    for num in lst:\r\n        # Check if the number is an integer and positive\r\n        if isinstance(num, int) and num >= 0:\r\n            # Check if the number is odd\r\n            if num % 2 == 1:\r\n                # Add the square of the number to the sum_of_squares variable\r\n                sum_of_squares += num ** 2\r\n    \r\n    # Return the sum_of_squares variable\r\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\r\n    result = []\r\n    for i in range(len(game)):\r\n        if game[i] == guess[i]:\r\n            result.append(0)\r\n        else:\r\n            result.append(abs(game[i] - guess[i]))\r\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\r\n    # Initialize variables to keep track of the strongest extension and its strength\r\n    strongest_extension = \"\"\r\n    strongest_strength = -1\r\n    \r\n    # Loop through each extension in the list\r\n    for extension in extensions:\r\n        # Calculate the strength of the extension\r\n        cap_count = 0\r\n        sm_count = 0\r\n        for char in extension:\r\n            if char.isupper():\r\n                cap_count += 1\r\n            elif char.islower():\r\n                sm_count += 1\r\n        strength = cap_count - sm_count\r\n        \r\n        # If the strength is greater than the current strongest strength, update the strongest extension and strength\r\n        if strength > strongest_strength:\r\n            strongest_extension = extension\r\n            strongest_strength = strength\r\n    \r\n    # Return the class name and the strongest extension in the format ClassName.StrongestExtensionName\r\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\r\n    # Check if b is a substring of a\r\n    if b in a:\r\n        return True\r\n    \r\n    # Check if any rotation of b is a substring of a\r\n    for i in range(len(b)):\r\n        rotated_b = b[i:] + b[:i]\r\n        if rotated_b in a:\r\n            return True\r\n    \r\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\r\n    \"\"\"\r\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\r\n    \r\n    Example:\r\n        even_odd_count(-12) ==> (1, 1)\r\n        even_odd_count(123) ==> (1, 2)\r\n    \"\"\"\r\n    even = 0\r\n    odd = 0\r\n    for digit in str(abs(num)):\r\n        if int(digit) % 2 == 0:\r\n            even += 1\r\n        else:\r\n            odd += 1\r\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\r\n    roman_numerals = {\r\n        10000: 'm',\r\n        900: 'cm',\r\n        500: 'd',\r\n        400: 'cd',\r\n        100: 'c',\r\n        90: 'xc',\r\n        50: 'l',\r\n        40: 'xl',\r\n        10: 'x',\r\n        9: 'ix',\r\n        5: 'v',\r\n        4: 'iv',\r\n        1: 'i'\r\n    }\r\n    roman_num = ''\r\n    for value, numeral in roman_numerals.items():\r\n        while number >= value:\r\n            roman_num += numeral\r\n            number -= value\r\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\r\n    \"\"\"\r\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\r\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\r\n    \"\"\"\r\n    # Check if the sum of the lengths of any two sides is greater than the third side\r\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2 or b**2 + a**2 == c**2 or c**2 + a**2 == b**2 or c**2 + b**2 == a**2:\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\r\n    max_word = \"\"\r\n    max_count = 0\r\n    for word in words:\r\n        count = len(set(word))\r\n        if count > max_count:\r\n            max_count = count\r\n            max_word = word\r\n        elif count == max_count and word < max_word:\r\n            max_word = word\r\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\r\n    if number + remaining >= need:\r\n        return [need, 0]\r\n    else:\r\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\r\n    \"\"\"\r\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\r\n    \"\"\"\r\n    # Convert the string to lowercase to ignore case\r\n    string = string.lower()\r\n    # Create a set to store unique characters\r\n    unique_chars = set()\r\n    # Iterate through each character in the string\r\n    for char in string:\r\n        # Add the character to the set if it's not already there\r\n        if char not in unique_chars:\r\n            unique_chars.add(char)\r\n    # Return the length of the set\r\n    return len(unique_chars)"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\r\n    # Initialize the result variable\r\n    result = operand[0]\r\n    \r\n    # Iterate over the operator and operand lists\r\n    for i in range(1, len(operator)):\r\n        # Get the current operator and operand\r\n        op = operator[i-1]\r\n        num = operand[i]\r\n        \r\n        # Perform the operation based on the operator\r\n        if op == '+':\r\n            result += num\r\n        elif op == '-':\r\n            result -= num\r\n        elif op == '*':\r\n            result *= num\r\n        elif op == '//':\r\n            result //= num\r\n        elif op == '**':\r\n            result **= num\r\n    \r\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\r\n    result = \"\"\r\n    for char in s:\r\n        if char.isalpha():\r\n            if char.islower():\r\n                result += char.upper()\r\n            else:\r\n                result += char.lower()\r\n        else:\r\n            result += char\r\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\r\n\r\ndef string_to_md5(text):\r\n    if text == '':\r\n        return None\r\n    else:\r\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\r\n    # Ensure a and b are positive integers\r\n    if a < 0 or b < 0 or not isinstance(a, int) or not isinstance(b, int):\r\n        return []\r\n    \r\n    # Initialize an empty list to store even digits\r\n    even_digits = []\r\n    \r\n    # Loop through all integers between a and b (inclusive)\r\n    for num in range(a, b+1):\r\n        # Convert the integer to a string so we can check each digit\r\n        num_str = str(num)\r\n        \r\n        # Loop through each digit in the string\r\n        for digit in num_str:\r\n            # If the digit is even, add it to the list\r\n            if int(digit) % 2 == 0:\r\n                even_digits.append(int(digit))\r\n    \r\n    # Sort the list in ascending order\r\n    even_digits.sort()\r\n    \r\n    # Return the list of even digits\r\n    return even_digits"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\r\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\r\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\r\n    note last.\r\n\r\n    Here is a legend:\r\n    'o' - whole note, lasts four beats\r\n    'o|' - half note, lasts two beats\r\n    '.|' - quater note, lasts one beat\r\n\r\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\r\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\r\n    \"\"\"\r\n    beats = []\r\n    for note in music_string.split():\r\n        if note == 'o':\r\n            beats.append(4)\r\n        elif note == 'o|':\r\n            beats.append(2)\r\n        elif note == '.|':\r\n            beats.append(1)\r\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\r\n    count = 0\r\n    for i in range(len(string) - len(substring) + 1):\r\n        if string[i:i+len(substring)] == substring:\r\n            count += 1\r\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\r\n    # Convert the string to a list of numbers\r\n    num_list = numbers.split()\r\n    # Create a dictionary to map each number to its corresponding integer\r\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\r\n    # Sort the list of numbers using the integer values\r\n    num_list.sort(key=lambda x: num_dict[x])\r\n    # Join the sorted list of numbers back into a string and return it\r\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\r\n    \"\"\" Given a positive floating point number, it can be decomposed into\r\n    and integer part (largest integer smaller than given number) and decimals\r\n    (leftover part always smaller than 1).\r\n    \r\n    Return the decimal part of the number.\r\n    \r\n    >>> truncate_number(3.5)\r\n    0.5\r\n    \"\"\"\r\n    decimal_part = number - int(number)\r\n    return decimal_part"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\r\n\r\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\r\n    \"\"\"\r\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order\r\n    (smaller number, larger number).\r\n    \"\"\"\r\n    if len(numbers) < 2:\r\n        raise ValueError(\"List must have at least two elements\")\r\n    \r\n    min_diff = float('inf')\r\n    closest_pair = (float('inf'), float('inf'))\r\n    for i in range(len(numbers)):\r\n        for j in range(i+1, len(numbers)):\r\n            diff = abs(numbers[i] - numbers[j])\r\n            if diff < min_diff:\r\n                min_diff = diff\r\n                closest_pair = (numbers[i], numbers[j])\r\n    \r\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\r\n\r\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\r\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\r\n    such that the smallest number will become 0 and the largest will become 1\r\n    \"\"\"\r\n    if len(numbers) < 2:\r\n        raise ValueError(\"List must have at least two elements\")\r\n    \r\n    min_num = min(numbers)\r\n    max_num = max(numbers)\r\n    \r\n    if min_num == max_num:\r\n        return [0.0] * len(numbers)\r\n    \r\n    scale = 1 / (max_num - min_num)\r\n    \r\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\r\n\r\ndef filter_integers(values: List[Any]) -> List[int]:\r\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\r\n    \"\"\"\r\n    Return length of given string\r\n    \r\n    >>> strlen('')\r\n    0\r\n    \r\n    >>> strlen('abc')\r\n    3\r\n    \"\"\"\r\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\r\n    \"\"\"\r\n    For a given number n, find the largest number that divides n evenly, smaller than n\r\n    \"\"\"\r\n    for i in range(n-1, 1, -1):\r\n        if n % i == 0:\r\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\r\n\r\ndef factorize(n: int) -> List[int]:\r\n    factors = []\r\n    i = 2\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n            factors.append(i)\r\n    if n > 1:\r\n        factors.append(n)\r\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\r\n\r\ndef remove_duplicates(numbers: List[int]) -> List[int]:\r\n    \"\"\" From a list of integers, remove all elements that occur more than once.\r\n    Keep order of elements left the same as in the input.\r\n    >>> remove_duplicates([1, 2, 3, 2, 4])\r\n    [1, 3, 4]\r\n    \"\"\"\r\n    counts = {}\r\n    for num in numbers:\r\n        counts[num] = counts.get(num, 0) + 1\r\n    return [num for num in numbers if counts[num] == 1]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\r\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            new_string += char.upper()\r\n        elif char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char\r\n    return new_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\r\n\r\ndef concatenate(strings: List[str]) -> str:\r\n    \"\"\" Concatenate list of strings into a single string\r\n    >>> concatenate([])\r\n    ''\r\n    >>> concatenate(['a', 'b', 'c'])\r\n    'abc'\r\n    \"\"\"\r\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\r\n\r\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\r\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\r\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/3", "completion": "from typing import List\r\n\r\ndef below_zero(operations: List[int]) -> bool:\r\n    balance = 0\r\n    for op in operations:\r\n        balance += op\r\n        if balance < 0:\r\n            return True\r\n    return False"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\r\n    \"\"\"Return only positive numbers in the list.\"\"\"\r\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\r\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n ** 0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\r\n\r\ndef poly(xs: list, x: float):\r\n    \"\"\"\r\n    Evaluates polynomial with coefficients xs at point x.\r\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\r\n    \"\"\"\r\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\r\n\r\ndef find_zero(xs: list):\r\n    \"\"\" xs are coefficients of a polynomial. \r\n    find_zero find x such that poly(x) = 0. \r\n    find_zero returns only only zero point, even if there are many. \r\n    Moreover, find_zero only takes list xs having even number of coefficients\r\n    and largest non zero coefficient as it guarantees \r\n    a solution. \r\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\r\n    -0.5\r\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\r\n    1.0\r\n    \"\"\"\r\n    if len(xs) % 2 == 1:\r\n        raise ValueError(\"Polynomial must have even number of coefficients\")\r\n    \r\n    # Find the largest non-zero coefficient\r\n    max_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\r\n    \r\n    # Find the index of the largest non-zero coefficient\r\n    max_coeff_index = xs.index(max_coeff)\r\n    \r\n    # Find the corresponding root of the polynomial\r\n    root = -max_coeff / xs[max_coeff_index]\r\n    \r\n    return root"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\r\n    \"\"\"This function takes a list l and returns a list l' such that\r\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\r\n    to the values of the corresponding indicies of l, but sorted.\r\n    \"\"\"\r\n    l_sorted = sorted(l[2::3]) # sort the values at indicies that are divisible by three\r\n    l_new = []\r\n    for i in range(len(l)):\r\n        if i % 3 != 0: # if the index is not divisible by 3, add the value from l to l_new\r\n            l_new.append(l[i])\r\n        else: # if the index is divisible by 3, add the value from l_sorted to l_new\r\n            l_new.append(l_sorted.pop(0))\r\n    return l_new"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\r\n    \"\"\"Return sorted unique elements in a list\"\"\"\r\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\r\n    \"\"\"Return maximum element in the list.\"\"\"\r\n    max_num = l[0]\r\n    for i in l:\r\n        if i > max_num:\r\n            max_num = i\r\n    return max_num"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\r\n    count = 0\r\n    for i in range(1, n):\r\n        if i % 11 == 0 or i % 13 == 0:\r\n            if '7' in str(i):\r\n                count += 1\r\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\r\n    \"\"\"This function takes a list l and returns a list l' such that\r\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\r\n    to the values of the even indicies of l, but sorted.\r\n    >>> sort_even([1, 2, 3])\r\n    [1, 2, 3]\r\n    >>> sort_even([5, 6, 3, 4])\r\n    [3, 6, 5, 4]\r\n    \"\"\"\r\n    l_even = sorted([x for i, x in enumerate(l) if i % 2 == 0])\r\n    l_odd = [x for i, x in enumerate(l) if i % 2 == 1]\r\n    return l_odd + l_even"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\r\n    \"\"\"\r\n    returns encoded string by cycling groups of three characters.\r\n    \"\"\"\r\n    # split string to groups. Each of length 3.\r\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\r\n    # cycle elements in each group. Unless group has fewer elements than 3.\r\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\r\n    return \"\".join(groups)\r\n\r\ndef decode_cyclic(s: str):\r\n    \"\"\"\r\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\r\n    \"\"\"\r\n    # split string to groups. Each of length 3.\r\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\r\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\r\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\r\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\r\n    \"\"\"\r\n    Checks if a number is prime or not.\r\n    \"\"\"\r\n    if num < 2:\r\n        return False\r\n    for i in range(2, int(num**0.5)+1):\r\n        if num % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef prime_fib(n: int) -> int:\r\n    \"\"\"\r\n    Returns the n-th number that is both a Fibonacci number and a prime.\r\n    \"\"\"\r\n    fib = [1, 1]\r\n    for i in range(2, n):\r\n        fib.append(fib[-1] + fib[-2])\r\n    \r\n    for num in fib:\r\n        if is_prime(num):\r\n            return num"}
{"task_id": "HumanEval/4", "completion": "from typing import List\r\n\r\ndef mean_absolute_deviation(numbers: List[float]) -> float:\r\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\r\n    around the mean of this dataset.\r\n    Mean Absolute Deviation is the average absolute difference between each\r\n    element and a centerpoint (mean in this case):\r\n    MAD = average | x - x_mean |\r\n    \"\"\"\r\n    n = len(numbers)\r\n    mean = sum(numbers) / n\r\n    deviation = [abs(x - mean) for x in numbers]\r\n    return sum(deviation) / n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\r\n    if len(l) < 3:\r\n        return False\r\n    \r\n    for i in range(len(l)):\r\n        for j in range(i+1, len(l)):\r\n            for k in range(j+1, len(l)):\r\n                if l[i] + l[j] + l[k] == 0:\r\n                    return True\r\n    \r\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\r\n    \"\"\"\r\n    Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; \r\n    simultaneously, a different set of n cars are driving right to left.  All cars move in the same speed.\r\n    Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.\r\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory\r\n    as if they did not collide. This function outputs the number of such collisions.\r\n    \"\"\"\r\n    # Initialize the positions of the cars\r\n    left_cars = [i for i in range(n)]\r\n    right_cars = [i for i in range(n, 2*n)]\r\n    \r\n    # Initialize the number of collisions to 0\r\n    collisions = 0\r\n    \r\n    # Loop through each car in the left set of cars\r\n    for i in range(n):\r\n        # Loop through each car in the right set of cars\r\n        for j in range(n):\r\n            # If the two cars overlap, increment the collision counter\r\n            if left_cars[i] == right_cars[j]:\r\n                collisions += 1\r\n    \r\n    # Return the number of collisions\r\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\r\n    \"\"\"Return list with elements incremented by 1.\"\"\"\r\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\r\n    \"\"\"\r\n    pairs_sum_to_zero takes a list of integers as an input.\r\n    it returns True if there are two distinct elements in the list that\r\n    sum to zero, and False otherwise.\r\n    \"\"\"\r\n    # create a set of the list to remove duplicates\r\n    s = set(l)\r\n    # iterate over the set and check if there are two elements that sum to zero\r\n    for i in s:\r\n        if -i in s:\r\n            return True\r\n    # if no such pair is found, return False\r\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\r\n    \"\"\"Change numerical base of input number x to base.\r\n    return string representation after the conversion.\r\n    base numbers are less than 10.\r\n    >>> change_base(8, 3)\r\n    '22'\r\n    >>> change_base(8, 2)\r\n    '100'\r\n    >>> change_base(7, 2)\r\n    '111'\r\n    \"\"\"\r\n    if x == 0:\r\n        return '0'\r\n    result = ''\r\n    while x > 0:\r\n        result = str(x % base) + result\r\n        x //= base\r\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\r\n    \"\"\"\r\n    Given length of a side and high return area for a triangle.\r\n    \"\"\"\r\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 2\r\n    elif n == 3:\r\n        return 0\r\n    else:\r\n        a, b, c = 0, 2, 0\r\n        for i in range(4, n+1):\r\n            a, b, c = b, c, a + b + c\r\n        return c"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\r\n    \"\"\"Return median of elements in the list l.\"\"\"\r\n    n = len(l)\r\n    sorted_list = sorted(l)\r\n    if n % 2 == 0:\r\n        # if the list has an even number of elements, return the average of the two middle values\r\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\r\n    else:\r\n        # if the list has an odd number of elements, return the middle value\r\n        return sorted_list[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\r\n    \"\"\"\r\n    Checks if given string is a palindrome\r\n    \"\"\"\r\n    # Convert the string to lowercase and remove all non-alphanumeric characters\r\n    text = ''.join(c for c in text.lower() if c.isalnum())\r\n    # Reverse the string and compare it with the original string\r\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\r\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (2 ** n) % p"}
{"task_id": "HumanEval/5", "completion": "from typing import List\r\n\r\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\r\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'\r\n    >>> intersperse([], 4)\r\n    []\r\n    >>> intersperse([1, 2, 3], 4)\r\n    [1, 4, 2, 4, 3]\r\n    \"\"\"\r\n    if not numbers:\r\n        return []\r\n    \r\n    result = [numbers[0]]\r\n    for i in range(1, len(numbers)):\r\n        result.append(delimeter)\r\n        result.append(numbers[i])\r\n    \r\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\r\n    \"\"\"\r\n    returns encoded string by shifting every character by 5 in the alphabet.\r\n    \"\"\"\r\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\r\n\r\ndef decode_shift(s: str):\r\n    \"\"\"\r\n    takes as input string encoded with encode_shift function. Returns decoded string.\r\n    \"\"\"\r\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\r\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\r\n    new_text = ''\r\n    for char in text:\r\n        if char not in vowels:\r\n            new_text += char\r\n    return new_text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\r\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\r\n    for num in l:\r\n        if num >= t:\r\n            return False\r\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\r\n    \"\"\"Add two numbers x and y\"\"\"\r\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\r\n    \"\"\"\r\n    Check if two words have the same characters.\r\n    \"\"\"\r\n    # Convert both strings to sets of characters\r\n    set_s0 = set(s0)\r\n    set_s1 = set(s1)\r\n    \r\n    # Check if the two sets have the same length\r\n    if len(set_s0) != len(set_s1):\r\n        return False\r\n    \r\n    # Check if all characters in s0 are present in s1\r\n    for char in set_s0:\r\n        if char not in set_s1:\r\n            return False\r\n    \r\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\r\n    \"\"\"Return n-th Fibonacci number.\"\"\"\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\r\n    stack = []\r\n    for b in brackets:\r\n        if b == \"<\":\r\n            stack.append(b)\r\n        elif b == \">\":\r\n            if not stack:\r\n                return False\r\n            stack.pop()\r\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\r\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\r\n    if len(l) <= 1:\r\n        return True\r\n    \r\n    increasing = True\r\n    decreasing = True\r\n    \r\n    for i in range(1, len(l)):\r\n        if l[i] < l[i-1]:\r\n            increasing = False\r\n        elif l[i] > l[i-1]:\r\n            decreasing = False\r\n        \r\n        if not increasing and not decreasing:\r\n            return False\r\n    \r\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\r\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\r\n    set1 = set(l1)\r\n    set2 = set(l2)\r\n    common_elements = set1.intersection(set2)\r\n    return sorted(list(common_elements))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\r\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\r\n    i = 2\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n    return n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\r\n\r\ndef parse_nested_parens(paren_string: str) -> List[int]:\r\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\r\n    For each of the group, output the deepest level of nesting of parentheses.\r\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\r\n    \r\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\r\n    [2, 3, 1, 3]\r\n    \"\"\"\r\n    \r\n    # Initialize a list to store the deepest level of nesting for each group\r\n    deepest_levels = []\r\n    \r\n    # Split the input string into groups using spaces as the delimiter\r\n    groups = paren_string.split()\r\n    \r\n    # Iterate through each group\r\n    for group in groups:\r\n        # Initialize a variable to keep track of the current level of nesting\r\n        current_level = 0\r\n        \r\n        # Iterate through each character in the group\r\n        for char in group:\r\n            # If we encounter an opening parenthesis, increment the level\r\n            if char == '(':\r\n                current_level += 1\r\n            # If we encounter a closing parenthesis, decrement the level\r\n            elif char == ')':\r\n                current_level -= 1\r\n                \r\n        # Add the deepest level of nesting for this group to the list of deepest levels\r\n        deepest_levels.append(current_level)\r\n    \r\n    return deepest_levels"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\r\n    \"\"\"\r\n    sum_to_n is a function that sums numbers from 1 to n.\r\n    \"\"\"\r\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\r\n    stack = []\r\n    for b in brackets:\r\n        if b == '(':\r\n            stack.append(b)\r\n        elif b == ')':\r\n            if not stack:\r\n                return False\r\n            stack.pop()\r\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\r\n    \"\"\"\r\n    xs represent coefficients of a polynomial.\r\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\r\n    Return derivative of this polynomial in the same form.\r\n    \"\"\"\r\n    if len(xs) == 0:\r\n        return []\r\n    elif len(xs) == 1:\r\n        return []\r\n    elif len(xs) == 2:\r\n        return [2 * xs[1]]\r\n    else:\r\n        result = [2 * xs[1]]\r\n        for i in range(2, len(xs)):\r\n            result.append(2 * xs[i] * i)\r\n        return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\r\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\r\n    fibfib(0) == 0\r\n    fibfib(1) == 0\r\n    fibfib(2) == 1\r\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\r\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\r\n    \"\"\"\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        memo = [0, 1, 1]\r\n        for i in range(3, n+1):\r\n            memo.append(memo[i-1] + memo[i-2] + memo[i-3])\r\n        return memo[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\r\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\r\n    count = 0\r\n    for letter in s:\r\n        if letter.lower() in vowels:\r\n            count += 1\r\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\r\n    # Convert the integer to a string\r\n    x_str = str(x)\r\n    # Get the length of the string\r\n    length = len(x_str)\r\n    # If shift is greater than the length of the string, reverse the string and return it\r\n    if shift >= length:\r\n        return x_str[::-1]\r\n    # Otherwise, circular shift the digits by shifting the string and returning it\r\n    else:\r\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\r\n    # Initialize the sum to 0\r\n    sum = 0\r\n    \r\n    # Loop through each character in the string\r\n    for char in s:\r\n        # Check if the character is uppercase\r\n        if char.isupper():\r\n            # Add the ASCII code of the character to the sum\r\n            sum += ord(char)\r\n    \r\n    # Return the sum\r\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\r\n    # Split the string into two parts using the word \"and\" as the delimiter\r\n    parts = s.split(\" and \")\r\n    # Convert the first part to an integer and store it in apples variable\r\n    apples = int(parts[0])\r\n    # Convert the second part to an integer and store it in oranges variable\r\n    oranges = int(parts[1].split()[0])\r\n    # Calculate the total number of fruits in the basket\r\n    total_fruits = apples + oranges\r\n    # Calculate the number of mango fruits by subtracting the total number of apples and oranges from the given number of fruits\r\n    mango_fruits = n - total_fruits\r\n    # Return the number of mango fruits\r\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\r\n    smallest_even = float('inf')\r\n    smallest_index = -1\r\n    smallest_value = float('inf')\r\n    for i, node in enumerate(arr):\r\n        if node % 2 == 0 and node < smallest_even:\r\n            smallest_even = node\r\n            smallest_index = i\r\n        elif node % 2 == 0 and node == smallest_even and i < smallest_index:\r\n            smallest_index = i\r\n    if smallest_even == float('inf'):\r\n        return []\r\n    else:\r\n        return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\r\n    from collections import Counter\r\n    \r\n    # Count the frequency of each integer in the list\r\n    freq = Counter(lst)\r\n    \r\n    # Find the maximum frequency\r\n    max_freq = max(freq.values())\r\n    \r\n    # Find the maximum integer with the maximum frequency\r\n    max_int = max(filter(lambda x: freq[x] == max_freq, freq.keys()))\r\n    \r\n    # Find the first integer in the list that is greater than zero and has the maximum frequency\r\n    result = next((x for x in lst if x > 0 and freq[x] >= x), -1)\r\n    \r\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\r\n\r\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\r\n    \"\"\" Filter an input list of strings only for ones that contain given substring\r\n    >>> filter_by_substring([], 'a')\r\n    []\r\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\r\n    ['abc', 'bacd', 'array']\r\n    \"\"\"\r\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\r\n    if not lst:\r\n        return []\r\n    \r\n    min_val = min(lst)\r\n    max_val = max(lst)\r\n    result = [min_val]\r\n    \r\n    while lst:\r\n        lst.remove(min_val)\r\n        if lst:\r\n            max_val = max(lst)\r\n            result.append(max_val)\r\n            lst.remove(max_val)\r\n            min_val = min(lst)\r\n        else:\r\n            break\r\n    \r\n    result.extend(lst)\r\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\r\n    # Check if the sides form a valid triangle\r\n    if a + b > c and a + c > b and b + c > a:\r\n        # Calculate the semi-perimeter\r\n        s = (a + b + c) / 2\r\n        # Calculate the area using Heron's formula\r\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\r\n        # Round the area to 2 decimal points\r\n        return round(area, 2)\r\n    else:\r\n        # If the sides do not form a valid triangle, return -1\r\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\r\n    # Check if the list is balanced\r\n    if sum(q) != sum(q[::-1]):\r\n        return False\r\n    \r\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\r\n    if sum(q) <= w:\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\r\n    n = len(arr)\r\n    # Calculate the sum of the elements in the array\r\n    total_sum = sum(arr)\r\n    # Calculate the sum of the elements in the reversed array\r\n    reversed_sum = sum(arr[::-1])\r\n    # Calculate the absolute difference between the sums\r\n    diff = abs(total_sum - reversed_sum)\r\n    # Calculate the number of elements that need to be changed to make the array palindromic\r\n    return diff // 2"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\r\n    if len(lst1) == 0 or len(lst2) == 0:\r\n        return []\r\n    \r\n    total_chars_lst1 = sum([len(s) for s in lst1])\r\n    total_chars_lst2 = sum([len(s) for s in lst2])\r\n    \r\n    if total_chars_lst1 == total_chars_lst2:\r\n        return lst1\r\n    elif total_chars_lst1 < total_chars_lst2:\r\n        return lst1\r\n    else:\r\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\r\n    \"\"\"\r\n    Returns True if the given number is the multiplication of 3 prime numbers and False otherwise.\r\n    \"\"\"\r\n    # Check if a is less than 100\r\n    if a >= 100:\r\n        return False\r\n    \r\n    # Check if a is divisible by 2 or 5\r\n    if a % 2 == 0 or a % 5 == 0:\r\n        return False\r\n    \r\n    # Check if a is divisible by any prime number between 3 and 10\r\n    for i in range(3, 11):\r\n        if a % i == 0:\r\n            return False\r\n    \r\n    # Check if a is the product of 3 prime numbers\r\n    for i in range(2, int(a/2)+1):\r\n        if a % i == 0:\r\n            count = 0\r\n            for j in range(2, i):\r\n                if i % j == 0:\r\n                    count += 1\r\n            if count == 0:\r\n                continue\r\n            for j in range(i+1, int(a/i)+1):\r\n                if a % j == 0:\r\n                    count += 1\r\n                if count == 0:\r\n                    continue\r\n                for k in range(j+1, int(a/(i*j)+1):\r\n                    if a % k == 0:\r\n                        count += 1\r\n                    if count == 0:\r\n                        continue\r\n                    if count == 3:\r\n                        return True\r\n    \r\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\r\n    \"\"\"\r\n    This function takes two arguments x and n and returns True if x is a simple power of n, and False otherwise.\r\n    A number x is a simple power of n if n**int(x) equals x.\r\n    \"\"\"\r\n    if n == 1:\r\n        return True\r\n    elif x == 1:\r\n        return False\r\n    elif n == 2:\r\n        return x % 2 == 0\r\n    else:\r\n        return x % (n**(x-1) == 0 and x % n == 0"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\r\n    \"\"\"\r\n    This function takes an integer a and returns True if it is a cube of some integer number, False otherwise.\r\n    \"\"\"\r\n    # Convert the input integer to a float to handle negative numbers\r\n    a = float(a)\r\n    # Find the cube root of the input integer\r\n    cube_root = round(a ** (1/3))\r\n    # Check if the cube root is an integer\r\n    if cube_root == int(cube_root):\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\r\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5)+1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n    \r\n    count = 0\r\n    for digit in num:\r\n        if digit in ['2', '3', '5', 'B', 'D']:\r\n            if is_prime(int(digit, 16)):\r\n                count += 1\r\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\r\n    binary = bin(decimal)[2:]\r\n    binary = 'db' + binary + 'db'\r\n    return binary"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\r\n\r\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\r\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\r\n    Empty sum should be equal to 0 and empty product should be equal to 1.\r\n    >>> sum_product([])\r\n    (0, 1)\r\n    >>> sum_product([1, 2, 3, 4])\r\n    (10, 24)\r\n    \"\"\"\r\n    if not numbers:\r\n        return (0, 1)\r\n    else:\r\n        return (sum(numbers), 1)\r\n    \r\n    product = 1\r\n    for num in numbers:\r\n        product *= num\r\n    return (sum(numbers), product)"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\r\n    if len(s) < 3:\r\n        return False\r\n    for i in range(len(s)-2):\r\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\r\n            return False\r\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\r\n    letter_grades = []\r\n    for grade in grades:\r\n        if grade >= 4.0:\r\n            letter_grades.append('A+')\r\n        elif grade >= 3.7:\r\n            letter_grades.append('A')\r\n        elif grade >= 3.3:\r\n            letter_grades.append('A-')\r\n        elif grade >= 3.0:\r\n            letter_grades.append('B+')\r\n        elif grade >= 2.7:\r\n            letter_grades.append('B')\r\n        elif grade >= 2.3:\r\n            letter_grades.append('B-')\r\n        elif grade >= 2.0:\r\n            letter_grades.append('C+')\r\n        elif grade >= 1.7:\r\n            letter_grades.append('C')\r\n        elif grade >= 1.3:\r\n            letter_grades.append('D+')\r\n        elif grade >= 1.0:\r\n            letter_grades.append('D')\r\n        else:\r\n            letter_grades.append('E')\r\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\r\n    \"\"\"\r\n    This function takes a string as input and returns True if the length of the string is a prime number, and False otherwise.\r\n    \"\"\"\r\n    # Convert the string to a list of characters and get its length\r\n    string_list = list(string)\r\n    string_length = len(string_list)\r\n    \r\n    # Check if the length is a prime number\r\n    if string_length == 1:\r\n        return False\r\n    elif string_length == 2:\r\n        return True\r\n    else:\r\n        for i in range(2, string_length):\r\n            if string_length % i == 0:\r\n                return False\r\n        return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\r\n    \"\"\"\r\n    Given a positive integer n, return the count of the numbers of n-digit\r\n    positive integers that start or end with 1.\r\n    \"\"\"\r\n    # Define a function to check if a number starts or ends with 1\r\n    def starts_or_ends_with_one(num):\r\n        return num[0] == '1' or num[-1] == '1'\r\n    \r\n    # Define a function to count the number of n-digit numbers that satisfy the condition\r\n    def count_numbers(n):\r\n        # Define the range of numbers to check\r\n        start = 10**(n-1)\r\n        end = 10**n - 1\r\n        \r\n        # Count the number of numbers that start or end with 1\r\n        count = 0\r\n        for num in range(start, end+1):\r\n            if starts_or_ends_with_one(str(num)):\r\n                count += 1\r\n        \r\n        return count\r\n    \r\n    # Call the count_numbers function for n = 1 to 9 and add the results together\r\n    total = 0\r\n    for i in range(1, 10):\r\n        total += count_numbers(i)\r\n        \r\n    return total"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\r\n    # Convert the given integer to binary\r\n    binary_N = bin(N)[2:]\r\n    # Initialize a variable to store the sum of digits\r\n    binary_sum = 0\r\n    # Iterate through each digit in the binary number and add it to the sum\r\n    for digit in binary_N:\r\n        binary_sum += int(digit)\r\n    # Convert the sum to binary and return it as a string\r\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\r\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\r\n    \r\n    Examples:\r\n        add([4, 2, 6, 7]) ==> 2\r\n    \"\"\"\r\n    # Initialize the sum to 0\r\n    total = 0\r\n    \r\n    # Loop through the list and add the even elements at odd indices\r\n    for i in range(1, len(lst), 2):\r\n        if lst[i] % 2 == 0:\r\n            total += lst[i]\r\n    \r\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\r\n    words = s.split()\r\n    result = []\r\n    for word in words:\r\n        if word == '':\r\n            result.append('')\r\n        else:\r\n            result.append(''.join(sorted(word)))\r\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\r\n    result = []\r\n    for i, row in enumerate(lst):\r\n        for j, val in enumerate(row):\r\n            if val == x:\r\n                result.append((i, len(row) - j - 1))\r\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\r\n    if not array:\r\n        return []\r\n    \r\n    first_index = array[0]\r\n    last_index = array[-1]\r\n    \r\n    if (first_index + last_index) % 2 == 0:\r\n        sorted_array = sorted(array)\r\n    else:\r\n        sorted_array = sorted(array, reverse=True)\r\n    \r\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\r\n    \"\"\"Create a function encrypt that takes a string as an argument and\r\n    returns a string encrypted with the alphabet being rotated. \r\n    The alphabet should be rotated in a manner such that the letters \r\n    shift down by two multiplied to two places.\r\n    For example:\r\n    encrypt('hi') returns 'lm'\r\n    encrypt('asdfghjkl') returns 'ewhjklnop'\r\n    encrypt('gf') returns 'kj'\r\n    encrypt('et') returns 'ix'\r\n    \"\"\"\r\n    \r\n    # Define the alphabet and the rotation amount\r\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n    rotation = 2 * 2\r\n    \r\n    # Initialize an empty string to store the encrypted message\r\n    encrypted_message = ''\r\n    \r\n    # Loop through each character in the input string\r\n    for char in s:\r\n        # If the character is a letter, shift it down by the rotation amount\r\n        if char.isalpha():\r\n            # Convert the character to lowercase to handle both uppercase and lowercase letters\r\n            char = char.lower()\r\n            # Find the index of the character in the alphabet\r\n            index = alphabet.index(char)\r\n            # Shift the index down by the rotation amount\r\n            index = (index - rotation) % 26\r\n            # Convert the index back to a character and add it to the encrypted message\r\n            encrypted_message += alphabet[index]\r\n        # If the character is not a letter, add it to the encrypted message as is\r\n        else:\r\n            encrypted_message += char\r\n    \r\n    # Return the encrypted message\r\n    return encrypted_message"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\r\n\r\ndef rolling_max(numbers: List[int]) -> List[int]:\r\n    \"\"\"\r\n    From a given list of integers, generate a list of rolling maximum element found until given moment\r\n    in the sequence.\r\n    \"\"\"\r\n    max_list = []\r\n    max_so_far = float('-inf')\r\n    for num in numbers:\r\n        if num > max_so_far:\r\n            max_so_far = num\r\n        max_list.append(max_so_far)\r\n    return max_list"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\r\n    if len(lst) < 2:\r\n        return None\r\n    \r\n    # Find the smallest element in the list\r\n    smallest = min(lst)\r\n    lst.remove(smallest)\r\n    \r\n    # Find the second smallest element in the list\r\n    second_smallest = min(lst)\r\n    \r\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\r\n    \"\"\"\r\n    You'll be given a string of words, and your task is to count the number\r\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\r\n    Sentences are delimited by '.', '?' or '!'.\r\n    \r\n    For example:\r\n    >>> is_bored(\"Hello world\")\r\n    0\r\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\r\n    1\r\n    \"\"\"\r\n    \r\n    # Split the string into sentences using the delimiters '.', '?' or '!'\r\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\r\n    \r\n    # Initialize a counter for the number of boredoms\r\n    boredoms = 0\r\n    \r\n    # Loop through each sentence\r\n    for sentence in sentences:\r\n        # If the sentence starts with \"I\", increment the counter\r\n        if sentence.strip().startswith(\"I\"):\r\n            boredoms += 1\r\n    \r\n    # Return the number of boredoms\r\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\r\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\r\n        if x == y + z or y == x + z or z == x + y:\r\n            return True\r\n    else:\r\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\r\n    \"\"\"\r\n    This function takes a message as input and returns the encoded message.\r\n    It swaps the case of all letters and replaces all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\r\n    \"\"\"\r\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\r\n    encoded_message = ''\r\n    for char in message:\r\n        if char.lower() in vowels:\r\n            index = vowels.index(char.lower())\r\n            if index == 0:\r\n                encoded_message += vowels[-1].upper() if char.isupper() else vowels[-1]\r\n            elif index == len(vowels) - 1:\r\n                encoded_message += vowels[0].upper() if char.isupper() else vowels[0]\r\n            else:\r\n                encoded_message += vowels[index+2].upper() if char.isupper() else vowels[index+2]\r\n        else:\r\n            encoded_message += char.swapcase()\r\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\r\n    def is_prime(n):\r\n        \"\"\"Helper function to check if a number is prime\"\"\"\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_of_digits(n):\r\n        \"\"\"Helper function to sum the digits of a number\"\"\"\r\n        return sum(int(d) for d in str(n))\r\n\r\n    # Find the largest prime number in the list\r\n    max_prime = max(filter(is_prime, lst))\r\n\r\n    # If there are no prime numbers, return 0\r\n    if max_prime == 0:\r\n        return 0\r\n\r\n    # Sum the digits of the largest prime number\r\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\r\n    if not d:\r\n        return False\r\n    else:\r\n        keys = d.keys()\r\n        if all(isinstance(k, str) for k in keys):\r\n            if all(k.islower() for k in keys) or all(k.isupper() for k in keys):\r\n                return True\r\n            else:\r\n                return False\r\n        else:\r\n            return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\r\n    if n < 1:\r\n        return []\r\n    primes = []\r\n    for i in range(2, n):\r\n        is_prime = True\r\n        for j in range(2, i):\r\n            if i % j == 0:\r\n                is_prime = False\r\n                break\r\n        if is_prime:\r\n            primes.append(i)\r\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\r\n    \"\"\"\r\n    This function takes two integers as input and returns the product of their unit digits.\r\n    \"\"\"\r\n    # Convert the integers to strings to extract the unit digits\r\n    a_str = str(a)\r\n    b_str = str(b)\r\n    \r\n    # Extract the unit digits of each number\r\n    a_unit_digit = int(a_str[-1])\r\n    b_unit_digit = int(b_str[-1])\r\n    \r\n    # Multiply the unit digits and return the result\r\n    return a_unit_digit * b_unit_digit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\r\n    count = 0\r\n    for i in range(0, len(s), 2):\r\n        if s[i].isupper():\r\n            count += 1\r\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\r\n    # Convert the input string to a float\r\n    value = float(value)\r\n    # Check if the value is positive or negative\r\n    if value >= 0:\r\n        # If positive, round up to the nearest integer\r\n        return int(value + 0.5)\r\n    else:\r\n        # If negative, round down to the nearest integer\r\n        return int(value - 0.5)"}
