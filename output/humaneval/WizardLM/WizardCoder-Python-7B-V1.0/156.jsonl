{"task_id": "HumanEval/156", "completion": "Here's a possible solution:\r\n\r\n```python\r\ndef int_to_mini_roman(number):\r\n    roman_numerals = {\r\n        10000: 'm',\r\n        900: 'cm',\r\n        500: 'd',\r\n        400: 'cd',\r\n        100: 'c',\r\n        90: 'xc',\r\n        50: 'l',\r\n        40: 'xl',\r\n        10: 'x',\r\n        9: 'ix',\r\n        5: 'v',\r\n        4: 'iv',\r\n        1: 'i'\r\n    }\r\n    roman_num = ''\r\n    for value, numeral in roman_numerals.items():\r\n        while number >= value:\r\n            roman_num += numeral\r\n            number -= value\r\n    return roman_num.lower()\r\n```\r\n\r\nThis function takes a positive integer `number` as input and returns its roman numeral equivalent as a string in lowercase. It uses a dictionary to map each integer value to its corresponding roman numeral, and then iterates through the dictionary to find the largest possible values that can be subtracted from the input number. For example, if the input is 19, it first subtracts 10000 (the largest multiple of 10000 that is less than or equal to 19), then 900, then 500, and so on until it reaches 1. The resulting string is returned in lowercase.\r\n\r\nHere's how it works:\r\n\r\n```python\r\n>>> int_to_mini_roman(19)\r\n'xix'\r\n>>> int_to_mini_roman(152)\r\n'clii'\r\n>>> int_to_mini_roman(426)\r\n'cdxxvi'\r\n```\r\n\r\nNote that this solution assumes that the input is a positive integer between 1 and 1000. If the input is outside that range, it will raise an error. To handle other cases, you could add additional checks or modify the dictionary to include additional values. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n```\n\n### Response:Here's a possible solution:\r\n\r\n```python\r\ndef int_to_mini_roman(number):\r\n    roman_numerals = {\r\n        10000: 'm',\r\n        900: 'cm',\r\n        500: 'd',\r\n        400: 'cd',\r\n        100: 'c',\r\n        90: 'xc',\r\n        50: 'l',\r\n        40: 'xl',\r\n        10: 'x',\r\n        9: 'ix',\r\n        5: 'v',\r\n        4: 'iv',\r\n        1: 'i'\r\n    }\r\n    roman_num = ''\r\n    for value, numeral in roman_numerals.items():\r\n        while number >= value:\r\n            roman_num += numeral\r\n            number -= value\r\n    return roman_num.lower()\r\n```\r\n\r\nThis function takes a positive integer `number` as input and returns its roman numeral equivalent as a string in lowercase. It uses a dictionary to map each integer value to its corresponding roman numeral, and then iterates through the dictionary to find the largest possible values that can be subtracted from the input number. For example, if the input is 19, it first subtracts 10000 (the largest multiple of 10000 that is less than or equal to 19), then 900, then 500, and so on until it reaches 1. The resulting string is returned in lowercase.\r\n\r\nHere's how it works:\r\n\r\n```python\r\n>>> int_to_mini_roman(19)\r\n'xix'\r\n>>> int_to_mini_roman(152)\r\n'clii'\r\n>>> int_to_mini_roman(426)\r\n'cdxxvi'\r\n```\r\n\r\nNote that this solution assumes that the input is a positive integer between 1 and 1000. If the input is outside that range, it will raise an error. To handle other cases, you could add additional checks or modify the dictionary to include additional values. "}
