{"task_id": "HumanEval/9", "completion": "Here's a possible solution to the problem:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\ndef rolling_max(numbers: List[int]) -> List[int]:\r\n    \"\"\"\r\n    From a given list of integers, generate a list of rolling maximum element found until given moment\r\n    in the sequence.\r\n    \"\"\"\r\n    max_list = []\r\n    max_so_far = float('-inf')\r\n    for num in numbers:\r\n        if num > max_so_far:\r\n            max_so_far = num\r\n        max_list.append(max_so_far)\r\n    return max_list\r\n```\r\n\r\nThis solution uses a simple loop to iterate through the input list of numbers and keeps track of the maximum value seen so far\r\nusing the variable `max_so_far`. At each iteration, it updates the maximum value seen so far if the current number is greater\r\nthan it. Finally, it appends the maximum value seen so far to the output list `max_list` and returns it.\r\n\r\nExample usage:\r\n\r\n```python\r\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\r\n[1, 2, 3, 3, 3, 4, 4]\r\n```\r\n\r\nNote that this solution assumes that the input list is non-empty. If the input list is empty, it will raise an error. To handle\r\nthis case, you could add a check at the beginning of the function to raise an exception if the list is empty:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\ndef rolling_max(numbers: List[int]) -> List[int]:\r\n    \"\"\"\r\n    From a given list of integers, generate a list of rolling maximum element found until given moment\r\n    in the sequence.\r\n    \"\"\"\r\n    if not numbers:\r\n        raise ValueError(\"Input list cannot be empty\")\r\n    \r\n    max_list = []\r\n    max_so_far = float('-inf')\r\n    for num in numbers:\r\n        if num > max_so_far:\r\n            max_so_far = num\r\n        max_list.append(max_so_far)\r\n    return max_list\r\n```\r\n\r\nThis will raise a `ValueError` if the input list is empty. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n```\n\n### Response:Here's a possible solution to the problem:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\ndef rolling_max(numbers: List[int]) -> List[int]:\r\n    \"\"\"\r\n    From a given list of integers, generate a list of rolling maximum element found until given moment\r\n    in the sequence.\r\n    \"\"\"\r\n    max_list = []\r\n    max_so_far = float('-inf')\r\n    for num in numbers:\r\n        if num > max_so_far:\r\n            max_so_far = num\r\n        max_list.append(max_so_far)\r\n    return max_list\r\n```\r\n\r\nThis solution uses a simple loop to iterate through the input list of numbers and keeps track of the maximum value seen so far\r\nusing the variable `max_so_far`. At each iteration, it updates the maximum value seen so far if the current number is greater\r\nthan it. Finally, it appends the maximum value seen so far to the output list `max_list` and returns it.\r\n\r\nExample usage:\r\n\r\n```python\r\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\r\n[1, 2, 3, 3, 3, 4, 4]\r\n```\r\n\r\nNote that this solution assumes that the input list is non-empty. If the input list is empty, it will raise an error. To handle\r\nthis case, you could add a check at the beginning of the function to raise an exception if the list is empty:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\ndef rolling_max(numbers: List[int]) -> List[int]:\r\n    \"\"\"\r\n    From a given list of integers, generate a list of rolling maximum element found until given moment\r\n    in the sequence.\r\n    \"\"\"\r\n    if not numbers:\r\n        raise ValueError(\"Input list cannot be empty\")\r\n    \r\n    max_list = []\r\n    max_so_far = float('-inf')\r\n    for num in numbers:\r\n        if num > max_so_far:\r\n            max_so_far = num\r\n        max_list.append(max_so_far)\r\n    return max_list\r\n```\r\n\r\nThis will raise a `ValueError` if the input list is empty. "}
