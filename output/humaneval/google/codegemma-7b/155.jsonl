{"task_id": "HumanEval/155", "completion": "\n```python\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Initialize even and odd counters\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through the digits of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Check if the digit is even or odd\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the tuple with the even and odd counts\n    return (even_count, odd_count)\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n```\n\n### Response:\n```python\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Initialize even and odd counters\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through the digits of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Check if the digit is even or odd\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the tuple with the even and odd counts\n    return (even_count, odd_count)\n```\n"}
