{"task_id": "HumanEval/6", "completion": "\n```python\ndef parse_nested_parens(paren_string):\n    # Split the input string into individual groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the maximum nesting level for each group\n    max_nesting = []\n\n    # Loop through each group\n    for group in groups:\n        # Initialize variables to keep track of the current nesting level and the maximum nesting level\n        current_level = 0\n        max_level = 0\n\n        # Loop through each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current nesting level\n            if char == '(':\n                current_level += 1\n            # If the character is a closing parenthesis, decrement the current nesting level\n            elif char == ')':\n                current_level -= 1\n            # Update the maximum nesting level if necessary\n            max_level = max(max_level, current_level)\n\n        # Append the maximum nesting level to the output list\n        max_nesting.append(max_level)\n\n    # Return the list of maximum nesting levels\n    return max_nesting\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n```\n\n### Response:\n```python\ndef parse_nested_parens(paren_string):\n    # Split the input string into individual groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the maximum nesting level for each group\n    max_nesting = []\n\n    # Loop through each group\n    for group in groups:\n        # Initialize variables to keep track of the current nesting level and the maximum nesting level\n        current_level = 0\n        max_level = 0\n\n        # Loop through each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current nesting level\n            if char == '(':\n                current_level += 1\n            # If the character is a closing parenthesis, decrement the current nesting level\n            elif char == ')':\n                current_level -= 1\n            # Update the maximum nesting level if necessary\n            max_level = max(max_level, current_level)\n\n        # Append the maximum nesting level to the output list\n        max_nesting.append(max_level)\n\n    # Return the list of maximum nesting levels\n    return max_nesting\n```\n"}
