{"task_id": "HumanEval/9", "completion": "\n```python\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # Initialize the result list\n    result = []\n    # Iterate over the input list\n    for i in range(len(numbers)):\n        # Append the current element to the result list\n        result.append(numbers[i])\n        # Check if the current element is greater than the previous element\n        if numbers[i] > numbers[i-1]:\n            # If it is, update the result list\n            result[i] = numbers[i]\n    # Return the result list\n    return result\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n```\n\n### Response:\n```python\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # Initialize the result list\n    result = []\n    # Iterate over the input list\n    for i in range(len(numbers)):\n        # Append the current element to the result list\n        result.append(numbers[i])\n        # Check if the current element is greater than the previous element\n        if numbers[i] > numbers[i-1]:\n            # If it is, update the result list\n            result[i] = numbers[i]\n    # Return the result list\n    return result\n```\n"}
