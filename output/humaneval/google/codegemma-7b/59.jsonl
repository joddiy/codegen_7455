{"task_id": "HumanEval/59", "completion": "\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the largest prime factor of n\n    # 1. Find the largest factor of n\n    # 2. Check if the largest factor is a prime\n    # 3. If the largest factor is not a prime, repeat the process with the largest factor\n    # 4. If the largest factor is a prime, return the largest factor\n    \n    # 1. Find the largest factor of n\n    largest_factor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_factor = i\n    \n    # 2. Check if the largest factor is a prime\n    if largest_factor == 1:\n        return n\n    \n    # 3. If the largest factor is not a prime, repeat the process with the largest factor\n    if not is_prime(largest_factor):\n        return largest_prime_factor(largest_factor)\n    \n    # 4. If the largest factor is a prime, return the largest factor\n    return largest_factor\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime, False otherwise. Assume n > 1.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    # Check if n is a prime\n    # 1. Check if n is even\n    if n % 2 == 0:\n        return False\n    \n    # 2. Check if n is divisible by any odd number from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    # 3. If n is not divisible by any odd number from 3 to sqrt(n), return True\n    return True\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n```\n\n### Response:\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the largest prime factor of n\n    # 1. Find the largest factor of n\n    # 2. Check if the largest factor is a prime\n    # 3. If the largest factor is not a prime, repeat the process with the largest factor\n    # 4. If the largest factor is a prime, return the largest factor\n    \n    # 1. Find the largest factor of n\n    largest_factor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_factor = i\n    \n    # 2. Check if the largest factor is a prime\n    if largest_factor == 1:\n        return n\n    \n    # 3. If the largest factor is not a prime, repeat the process with the largest factor\n    if not is_prime(largest_factor):\n        return largest_prime_factor(largest_factor)\n    \n    # 4. If the largest factor is a prime, return the largest factor\n    return largest_factor\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime, False otherwise. Assume n > 1.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    # Check if n is a prime\n    # 1. Check if n is even\n    if n % 2 == 0:\n        return False\n    \n    # 2. Check if n is divisible by any odd number from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    # 3. If n is not divisible by any odd number from 3 to sqrt(n), return True\n    return True\n```\n"}
