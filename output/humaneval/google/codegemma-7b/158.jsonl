{"task_id": "HumanEval/158", "completion": "\n```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Create a dictionary to store the count of unique characters for each word\n    unique_counts = {}\n    \n    # Iterate over each word in the input list\n    for word in words:\n        # Convert the word to a set to get the unique characters\n        unique_chars = set(word)\n        # Count the number of unique characters in the word\n        unique_count = len(unique_chars)\n        # Store the word and its unique count in the dictionary\n        unique_counts[word] = unique_count\n    \n    # Find the word with the maximum number of unique characters\n    max_unique_count = max(unique_counts.values())\n    max_words = [word for word, count in unique_counts.items() if count == max_unique_count]\n    \n    # If there are multiple words with the maximum number of unique characters,\n    # return the word which comes first in lexicographical order\n    if len(max_words) > 1:\n        return min(max_words)\n    else:\n        return max_words[0]\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n```\n\n### Response:\n```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Create a dictionary to store the count of unique characters for each word\n    unique_counts = {}\n    \n    # Iterate over each word in the input list\n    for word in words:\n        # Convert the word to a set to get the unique characters\n        unique_chars = set(word)\n        # Count the number of unique characters in the word\n        unique_count = len(unique_chars)\n        # Store the word and its unique count in the dictionary\n        unique_counts[word] = unique_count\n    \n    # Find the word with the maximum number of unique characters\n    max_unique_count = max(unique_counts.values())\n    max_words = [word for word, count in unique_counts.items() if count == max_unique_count]\n    \n    # If there are multiple words with the maximum number of unique characters,\n    # return the word which comes first in lexicographical order\n    if len(max_words) > 1:\n        return min(max_words)\n    else:\n        return max_words[0]\n```\n"}
