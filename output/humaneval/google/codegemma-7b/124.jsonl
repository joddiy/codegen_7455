{"task_id": "HumanEval/124", "completion": "\n```python\ndef valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date is in the format: mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is a valid number\n    try:\n        month = int(month)\n    except ValueError:\n        return False\n\n    # Check if the day is a valid number\n    try:\n        day = int(day)\n    except ValueError:\n        return False\n\n    # Check if the year is a valid number\n    try:\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if the month is a valid number\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is a valid number\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the year is a valid number\n    if year < 1 or year > 9999:\n        return False\n\n    # Check if the date is valid\n    if month == 2:\n        if day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n\n    return True\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n```\n\n### Response:\n```python\ndef valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date is in the format: mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is a valid number\n    try:\n        month = int(month)\n    except ValueError:\n        return False\n\n    # Check if the day is a valid number\n    try:\n        day = int(day)\n    except ValueError:\n        return False\n\n    # Check if the year is a valid number\n    try:\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if the month is a valid number\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is a valid number\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the year is a valid number\n    if year < 1 or year > 9999:\n        return False\n\n    # Check if the date is valid\n    if month == 2:\n        if day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n\n    return True\n```\n"}
