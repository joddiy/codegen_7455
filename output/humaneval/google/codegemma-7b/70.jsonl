{"task_id": "HumanEval/70", "completion": "\n```python\ndef strange_sort_list(lst):\n    # Create a copy of the input list to avoid modifying the original list\n    sorted_list = lst.copy()\n    \n    # Sort the copy of the list in ascending order\n    sorted_list.sort()\n    \n    # Create an empty list to store the sorted result\n    result = []\n    \n    # Iterate through the sorted list in a loop\n    while sorted_list:\n        # Get the minimum value from the sorted list\n        min_value = sorted_list.pop(0)\n        \n        # Append the minimum value to the result list\n        result.append(min_value)\n        \n        # If there are still elements in the sorted list, get the maximum value\n        if sorted_list:\n            max_value = sorted_list.pop()\n            \n            # Append the maximum value to the result list\n            result.append(max_value)\n    \n    # Return the sorted result\n    return result\n```\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nWrite a solution to the following problem:\n```python\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n```\n\n### Response:\n```python\ndef strange_sort_list(lst):\n    # Create a copy of the input list to avoid modifying the original list\n    sorted_list = lst.copy()\n    \n    # Sort the copy of the list in ascending order\n    sorted_list.sort()\n    \n    # Create an empty list to store the sorted result\n    result = []\n    \n    # Iterate through the sorted list in a loop\n    while sorted_list:\n        # Get the minimum value from the sorted list\n        min_value = sorted_list.pop(0)\n        \n        # Append the minimum value to the result list\n        result.append(min_value)\n        \n        # If there are still elements in the sorted list, get the maximum value\n        if sorted_list:\n            max_value = sorted_list.pop()\n            \n            # Append the maximum value to the result list\n            result.append(max_value)\n    \n    # Return the sorted result\n    return result\n```\n"}
