{"task_id": "HumanEval/59", "completion": "\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Initialize the largest prime factor to 2\n    largest_factor = 2\n\n    # While n is divisible by 2, divide n by 2 and update largest_factor\n    while n % 2 == 0:\n        n = n // 2\n        largest_factor = 2\n\n    # Iterate through odd numbers from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While n is divisible by i, divide n by i and update largest_factor\n        while n % i == 0:\n            n = n // i\n            largest_factor = i\n\n    # If n is a prime number greater than 2, update largest_factor\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n```\n\nThe `largest_prime_factor` function first handles the case where n is divisible by 2 by repeatedly dividing n by 2 and updating the largest factor. Then, it iterates through odd numbers from 3 to the square root of n, checking for prime factors and updating the largest factor accordingly. Finally, if n is a prime number greater than 2, it updates the largest factor. The function returns the largest prime factor of the input number.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Initialize the largest prime factor to 2\n    largest_factor = 2\n\n    # While n is divisible by 2, divide n by 2 and update largest_factor\n    while n % 2 == 0:\n        n = n // 2\n        largest_factor = 2\n\n    # Iterate through odd numbers from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While n is divisible by i, divide n by i and update largest_factor\n        while n % i == 0:\n            n = n // i\n            largest_factor = i\n\n    # If n is a prime number greater than 2, update largest_factor\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n```\n\nThe `largest_prime_factor` function first handles the case where n is divisible by 2 by repeatedly dividing n by 2 and updating the largest factor. Then, it iterates through odd numbers from 3 to the square root of n, checking for prime factors and updating the largest factor accordingly. Finally, if n is a prime number greater than 2, it updates the largest factor. The function returns the largest prime factor of the input number."}
