{"task_id": "HumanEval/76", "completion": "\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 0 or n == 0:\n        return False\n    if x == n:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x / n, n)\n```\n\nThe provided solution defines a function `is_simple_power` that checks if a number `x` is a simple power of `n`. It first handles the base cases where `x` is 1 or `n` is 0, returning `True` for the former and `False` for the latter. Then, it checks if `x` is equal to `n`, returning `True` in that case. If `x` is not divisible by `n`, it returns `False`. Otherwise, it recursively calls the function with `x/n` and `n`, continuing the process until the base case is reached.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 0 or n == 0:\n        return False\n    if x == n:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x / n, n)\n```\n\nThe provided solution defines a function `is_simple_power` that checks if a number `x` is a simple power of `n`. It first handles the base cases where `x` is 1 or `n` is 0, returning `True` for the former and `False` for the latter. Then, it checks if `x` is equal to `n`, returning `True` in that case. If `x` is not divisible by `n`, it returns `False`. Otherwise, it recursively calls the function with `x/n` and `n`, continuing the process until the base case is reached."}
