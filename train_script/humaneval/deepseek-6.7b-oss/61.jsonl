{"task_id": "HumanEval/61", "completion": "\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False  # Unmatched closing bracket\n            stack.pop()\n    return not stack  # True if stack is empty, False otherwise\n```\n\nThe `correct_bracketing` function uses a stack to keep track of opening brackets encountered. It iterates through the input string of brackets, pushing opening brackets onto the stack and popping from the stack when a closing bracket is encountered. If the stack is empty when a closing bracket is encountered, or if there are remaining opening brackets in the stack after processing the entire string, the function returns False. Otherwise, it returns True if the stack is empty at the end of the string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False  # Unmatched closing bracket\n            stack.pop()\n    return not stack  # True if stack is empty, False otherwise\n```\n\nThe `correct_bracketing` function uses a stack to keep track of opening brackets encountered. It iterates through the input string of brackets, pushing opening brackets onto the stack and popping from the stack when a closing bracket is encountered. If the stack is empty when a closing bracket is encountered, or if there are remaining opening brackets in the stack after processing the entire string, the function returns False. Otherwise, it returns True if the stack is empty at the end of the string."}
