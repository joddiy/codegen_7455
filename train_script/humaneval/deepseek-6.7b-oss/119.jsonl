{"task_id": "HumanEval/119", "completion": "\n```python\ndef match_parens(lst):\n    left_count = lst[0].count('(')\n    right_count = lst[1].count(')')\n    \n    if left_count + right_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n```\n\nThe solution defines a function `match_parens` that takes a list of two strings as input. It then counts the number of open parentheses in the first string and the number of close parentheses in the second string. If the sum of these counts is 0, the function returns 'Yes', indicating that it is possible to concatenate the two strings to form a good string. Otherwise, it returns 'No'.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n```\n\n    ### Response:\n```python\ndef match_parens(lst):\n    left_count = lst[0].count('(')\n    right_count = lst[1].count(')')\n    \n    if left_count + right_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n```\n\nThe solution defines a function `match_parens` that takes a list of two strings as input. It then counts the number of open parentheses in the first string and the number of close parentheses in the second string. If the sum of these counts is 0, the function returns 'Yes', indicating that it is possible to concatenate the two strings to form a good string. Otherwise, it returns 'No'."}
