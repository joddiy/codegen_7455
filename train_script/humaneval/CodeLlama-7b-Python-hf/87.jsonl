{"task_id": "HumanEval/87", "completion": "\n    ```python\n    def get_row(lst, x):\n        \"\"\"\n        You are given a 2 dimensional data, as a nested lists,\n        which is similar to matrix, however, unlike matrices,\n        each row may contain a different number of columns.\n        Given lst, and integer x, find integers x in the list,\n        and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        each tuple is a coordinate - (row, columns), starting with 0.\n        Sort coordinates initially by rows in ascending order.\n        Also, sort coordinates of the row by columns in descending order.\n        \n        Examples:\n        get_row([\n          [1,2,3,4,5,6],\n          [1,2,3,4,1,6],\n          [1,2,3,4,5,1]\n        ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        get_row([], 1) == []\n        get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        \"\"\"\n        result = []\n        for i, row in enumerate(lst):\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n        result.sort(key=lambda x: (x[0], -x[1]))\n        return result\n    ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    def get_row(lst, x):\n        \"\"\"\n        You are given a 2 dimensional data, as a nested lists,\n        which is similar to matrix, however, unlike matrices,\n        each row may contain a different number of columns.\n        Given lst, and integer x, find integers x in the list,\n        and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        each tuple is a coordinate - (row, columns), starting with 0.\n        Sort coordinates initially by rows in ascending order.\n        Also, sort coordinates of the row by columns in descending order.\n        \n        Examples:\n        get_row([\n          [1,2,3,4,5,6],\n          [1,2,3,4,1,6],\n          [1,2,3,4,5,1]\n        ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        get_row([], 1) == []\n        get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        \"\"\"\n        result = []\n        for i, row in enumerate(lst):\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n        result.sort(key=lambda x: (x[0], -x[1]))\n        return result\n    ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
