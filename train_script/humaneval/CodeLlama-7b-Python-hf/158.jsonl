{"task_id": "HumanEval/158", "completion": "\n    ```python\n    def find_max(words):\n        \"\"\"Write a function that accepts a list of strings.\n        The list contains different words. Return the word with maximum number\n        of unique characters. If multiple strings have maximum number of unique\n        characters, return the one which comes first in lexicographical order.\n\n        find_max([\"name\", \"of\", \"string\"]) == \"string\"\n        find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n        find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n        \"\"\"\n        \n        # Create a dictionary that will store the number of unique characters\n        # in each word.\n        unique_char_count = {}\n        \n        # Loop through each word in the list.\n        for word in words:\n            # Create a set that will store the unique characters in the word.\n            unique_chars = set()\n            \n            # Loop through each character in the word.\n            for char in word:\n                # If the character is not in the set, add it.\n                if char not in unique_chars:\n                    unique_chars.add(char)\n            \n            # Add the number of unique characters in the word to the dictionary.\n            unique_char_count[word] = len(unique_chars)\n        \n        # Create a list that will store the words with the maximum number of\n        # unique characters.\n        max_unique_char_words = []\n        \n        # Get the maximum number of unique characters.\n        max_unique_char = max(unique_char_count.values())\n        \n        # Loop through each word in the list.\n        for word in words:\n            # If the number of unique characters in the word is equal to the\n            # maximum number of unique characters, add the word to the list.\n            if unique_char_count[word] == max_unique_char:\n                max_unique_char_words.append(word)\n        \n        # Sort the list in lexicographical order.\n        max_unique_char_words.sort()\n        \n        # Return the first word in the list.\n        return max_unique_char_words[0]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    def find_max(words):\n        \"\"\"Write a function that accepts a list of strings.\n        The list contains different words. Return the word with maximum number\n        of unique characters. If multiple strings have maximum number of unique\n        characters, return the one which comes first in lexicographical order.\n\n        find_max([\"name\", \"of\", \"string\"]) == \"string\"\n        find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n        find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n        \"\"\"\n        \n        # Create a dictionary that will store the number of unique characters\n        # in each word.\n        unique_char_count = {}\n        \n        # Loop through each word in the list.\n        for word in words:\n            # Create a set that will store the unique characters in the word.\n            unique_chars = set()\n            \n            # Loop through each character in the word.\n            for char in word:\n                # If the character is not in the set, add it.\n                if char not in unique_chars:\n                    unique_chars.add(char)\n            \n            # Add the number of unique characters in the word to the dictionary.\n            unique_char_count[word] = len(unique_chars)\n        \n        # Create a list that will store the words with the maximum number of\n        # unique characters.\n        max_unique_char_words = []\n        \n        # Get the maximum number of unique characters.\n        max_unique_char = max(unique_char_count.values())\n        \n        # Loop through each word in the list.\n        for word in words:\n            # If the number of unique characters in the word is equal to the\n            # maximum number of unique characters, add the word to the list.\n            if unique_char_count[word] == max_unique_char:\n                max_unique_char_words.append(word)\n        \n        # Sort the list in lexicographical order.\n        max_unique_char_words.sort()\n        \n        # Return the first word in the list.\n        return max_unique_char_words[0]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "}
