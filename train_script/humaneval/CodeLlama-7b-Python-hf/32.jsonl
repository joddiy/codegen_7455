{"task_id": "HumanEval/32", "completion": "\n    ```python\n    import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or max([abs(coeff) for coeff in xs]) != xs[0]:\n        raise ValueError(\"The function does not have a solution.\")\n    else:\n        return -xs[1] / (2 * xs[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(find_zero([1, 2]))\n    print(find_zero([-6, 11, -6, 1]))\n    print(find_zero([1, 2, 3]))\n    print(find_zero([1, 2, 3, 4]))\n    print(find_zero([1, 2, 3, 4, 5]))\n    print(find_zero([1, 2, 3, 4, 5, 6]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_zero([1, 2, 3, 4, ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or max([abs(coeff) for coeff in xs]) != xs[0]:\n        raise ValueError(\"The function does not have a solution.\")\n    else:\n        return -xs[1] / (2 * xs[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(find_zero([1, 2]))\n    print(find_zero([-6, 11, -6, 1]))\n    print(find_zero([1, 2, 3]))\n    print(find_zero([1, 2, 3, 4]))\n    print(find_zero([1, 2, 3, 4, 5]))\n    print(find_zero([1, 2, 3, 4, 5, 6]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_zero([1, 2, 3, 4, "}
