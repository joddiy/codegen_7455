{"task_id": "HumanEval/115", "completion": "\n    ```python\n    def max_fill(grid, capacity):\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it, \n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        Output the number of times you need to lower the buckets.\n\n        Example 1:\n            Input: \n                grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n                bucket_capacity : 1\n            Output: 6\n\n        Example 2:\n            Input: \n                grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n                bucket_capacity : 2\n            Output: 5\n        \n        Example 3:\n            Input: \n                grid : [[0,0,0], [0,0,0]]\n                bucket_capacity : 5\n            Output: 0\n\n        Constraints:\n            * all wells have the same length\n            * 1 <= grid.length <= 10^2\n            * 1 <= grid[:,1].length <= 10^2\n            * grid[i][j] -> 0 | 1\n            * 1 <= capacity <= 10\n        \"\"\"\n        # 1. Find the number of rows and columns in the grid\n        rows = len(grid)\n        cols = len(grid[0])\n\n        # 2. Initialize the number of times we need to lower the buckets\n        times = 0\n\n        # 3. Iterate through the grid\n        for row in range(rows):\n            for col in range(cols):\n                # 4. If the current cell is a well\n                if grid[row][col] == 1:\n                    # 5. Initialize the number of units of water in the well\n                    units = 0\n\n                    # 6. Check if the current well is at the edge of the grid\n                    # If it is at the edge of the grid, we need to check the wells in the same row\n                    if row == 0:\n                        # 7. Check if the well is at the left edge of the grid", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    def max_fill(grid, capacity):\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it, \n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        Output the number of times you need to lower the buckets.\n\n        Example 1:\n            Input: \n                grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n                bucket_capacity : 1\n            Output: 6\n\n        Example 2:\n            Input: \n                grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n                bucket_capacity : 2\n            Output: 5\n        \n        Example 3:\n            Input: \n                grid : [[0,0,0], [0,0,0]]\n                bucket_capacity : 5\n            Output: 0\n\n        Constraints:\n            * all wells have the same length\n            * 1 <= grid.length <= 10^2\n            * 1 <= grid[:,1].length <= 10^2\n            * grid[i][j] -> 0 | 1\n            * 1 <= capacity <= 10\n        \"\"\"\n        # 1. Find the number of rows and columns in the grid\n        rows = len(grid)\n        cols = len(grid[0])\n\n        # 2. Initialize the number of times we need to lower the buckets\n        times = 0\n\n        # 3. Iterate through the grid\n        for row in range(rows):\n            for col in range(cols):\n                # 4. If the current cell is a well\n                if grid[row][col] == 1:\n                    # 5. Initialize the number of units of water in the well\n                    units = 0\n\n                    # 6. Check if the current well is at the edge of the grid\n                    # If it is at the edge of the grid, we need to check the wells in the same row\n                    if row == 0:\n                        # 7. Check if the well is at the left edge of the grid"}
