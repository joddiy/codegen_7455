{"task_id": "HumanEval/99", "completion": "\n```python\ndef closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n```\nThe `closest_integer` function takes a value as input and converts it to a float. It then checks if the number is positive or negative. If the number is positive, it adds 0.5 to it and returns the integer part. If the number is negative, it subtracts 0.5 from it and returns the integer part. This solution correctly handles the equidistant case by rounding away from zero.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n```\n\n    ### Response:\n```python\ndef closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n```\nThe `closest_integer` function takes a value as input and converts it to a float. It then checks if the number is positive or negative. If the number is positive, it adds 0.5 to it and returns the integer part. If the number is negative, it subtracts 0.5 from it and returns the integer part. This solution correctly handles the equidistant case by rounding away from zero."}
