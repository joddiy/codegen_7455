{"task_id": "HumanEval/114", "completion": "\n Here is a Python solution for the problem:\n\n```python\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n```\n\nThis solution works by iterating over the array of numbers. For each number, it adds it to the current sum. If the current sum is less than 0, it resets the current sum to 0. At the same time, it keeps track of the minimum sum seen so far.\n\nThe time complexity of this solution is O(n), where n is the length of the input array. This is because it makes a single pass over the array. The space complexity is O(1), because it uses a constant amount of space to store the minimum sum and the current sum.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python solution for the problem:\n\n```python\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n```\n\nThis solution works by iterating over the array of numbers. For each number, it adds it to the current sum. If the current sum is less than 0, it resets the current sum to 0. At the same time, it keeps track of the minimum sum seen so far.\n\nThe time complexity of this solution is O(n), where n is the length of the input array. This is because it makes a single pass over the array. The space complexity is O(1), because it uses a constant amount of space to store the minimum sum and the current sum."}
