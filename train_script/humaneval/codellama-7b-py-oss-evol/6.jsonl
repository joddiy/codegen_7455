{"task_id": "HumanEval/6", "completion": "\n Here is a Python script that solves the problem:\n\n```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nested_parens(s: str) -> int:\n        count = 0\n        max_count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        return max_count\n\n    return [count_nested_parens(s) for s in paren_string.split()]\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\nThis script defines a nested function `count_nested_parens` that counts the maximum depth of parentheses in a string. It then uses a list comprehension to apply this function to each group of parentheses in the input string. The result is a list of the maximum depths of nesting for each group.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nested_parens(s: str) -> int:\n        count = 0\n        max_count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        return max_count\n\n    return [count_nested_parens(s) for s in paren_string.split()]\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\nThis script defines a nested function `count_nested_parens` that counts the maximum depth of parentheses in a string. It then uses a list comprehension to apply this function to each group of parentheses in the input string. The result is a list of the maximum depths of nesting for each group."}
