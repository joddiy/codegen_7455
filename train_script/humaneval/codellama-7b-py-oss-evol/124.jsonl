{"task_id": "HumanEval/124", "completion": "\n    Here is a Python script that solves the problem:\n\n```python\ndef valid_date(date):\n    import re\n    # Check if the date is in the correct format\n    if not re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$', date):\n        return False\n    # Extract the month, day, and year from the date\n    month, day, year = map(int, date.split('-'))\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        # Check if the year is a leap year\n        if year % 4 != 0:\n            return False\n        if year % 100 != 0:\n            return True\n        if year % 400 != 0:\n            return False\n        return True\n    return True\n```\n\nThis script first checks if the date is in the correct format. Then it extracts the month, day, and year from the date. It then checks if the month is valid and if the day is valid for that month. If the month is 2, it also checks if the year is a leap year. If all these conditions are satisfied, it returns True, otherwise it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n```\n\n    ### Response:\n    Here is a Python script that solves the problem:\n\n```python\ndef valid_date(date):\n    import re\n    # Check if the date is in the correct format\n    if not re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$', date):\n        return False\n    # Extract the month, day, and year from the date\n    month, day, year = map(int, date.split('-'))\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        # Check if the year is a leap year\n        if year % 4 != 0:\n            return False\n        if year % 100 != 0:\n            return True\n        if year % 400 != 0:\n            return False\n        return True\n    return True\n```\n\nThis script first checks if the date is in the correct format. Then it extracts the month, day, and year from the date. It then checks if the month is valid and if the day is valid for that month. If the month is 2, it also checks if the year is a leap year. If all these conditions are satisfied, it returns True, otherwise it returns False."}
