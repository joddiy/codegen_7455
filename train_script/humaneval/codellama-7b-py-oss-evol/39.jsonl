{"task_id": "HumanEval/39", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"\n    is_fibonacci checks if a number is a Fibonacci number.\n    \"\"\"\n    x = 0\n    y = 1\n    while y < n:\n        z = x + y\n        x = y\n        y = z\n    return y == n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    i = 0\n    count = 0\n    while count < n:\n        if is_prime(i) and is_fibonacci(i):\n            count += 1\n        i += 1\n    return i - 1\n```\n\nThis script first defines helper functions `is_prime` and `is_fibonacci` to check if a number is prime and a Fibonacci number, respectively. Then, the `prime_fib` function iterates through numbers, checking if each one is both prime and a Fibonacci number. When it finds the n-th such number, it returns it.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"\n    is_fibonacci checks if a number is a Fibonacci number.\n    \"\"\"\n    x = 0\n    y = 1\n    while y < n:\n        z = x + y\n        x = y\n        y = z\n    return y == n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    i = 0\n    count = 0\n    while count < n:\n        if is_prime(i) and is_fibonacci(i):\n            count += 1\n        i += 1\n    return i - 1\n```\n\nThis script first defines helper functions `is_prime` and `is_fibonacci` to check if a number is prime and a Fibonacci number, respectively. Then, the `prime_fib` function iterates through numbers, checking if each one is both prime and a Fibonacci number. When it finds the n-th such number, it returns it."}
