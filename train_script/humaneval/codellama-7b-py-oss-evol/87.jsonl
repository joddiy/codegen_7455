{"task_id": "HumanEval/87", "completion": "\n    Here is a Python script that solves the problem:\n\n```python\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result\n```\n\nThis script works by iterating over each row in the given list and then over each value in the row. If the value matches the target integer `x`, it adds a tuple of the row index and column index to the result list. The result list is then sorted first by row index in ascending order, and then by column index in descending order.\n\nThe `enumerate` function is used to get both the index and value of each element in the list. The `lambda` function is used to create a custom sorting key that sorts by the first element of each tuple (the row index) and then by the second element of each tuple (the column index), with the second element negated to sort in descending order.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n```\n\n    ### Response:\n    Here is a Python script that solves the problem:\n\n```python\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result\n```\n\nThis script works by iterating over each row in the given list and then over each value in the row. If the value matches the target integer `x`, it adds a tuple of the row index and column index to the result list. The result list is then sorted first by row index in ascending order, and then by column index in descending order.\n\nThe `enumerate` function is used to get both the index and value of each element in the list. The `lambda` function is used to create a custom sorting key that sorts by the first element of each tuple (the row index) and then by the second element of each tuple (the column index), with the second element negated to sort in descending order."}
