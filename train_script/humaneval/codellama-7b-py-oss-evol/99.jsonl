{"task_id": "HumanEval/99", "completion": "\n Here is a Python solution for the problem:\n\n```python\ndef closest_integer(value):\n    # Convert the string to a float\n    value = float(value)\n\n    # Check if the value is equidistant from two integers\n    if value > 0:\n        # Round it away from zero\n        if value - int(value) >= 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n    else:\n        # Round it away from zero\n        if abs(value - int(value)) >= 0.5:\n            return int(value) - 1\n        else:\n            return int(value)\n\n# Test the function\nprint(closest_integer(\"10\"))  # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15\n```\n\nThis function first converts the input string to a float. Then it checks if the float is greater than zero. If it is, it checks if the float is equidistant from two integers. If it is, it rounds it away from zero by adding one to the integer part of the float. If it isn't, it simply returns the integer part of the float. If the float is less than zero, it follows the same process but subtracts one from the integer part of the float.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n```\n\n    ### Response:\n Here is a Python solution for the problem:\n\n```python\ndef closest_integer(value):\n    # Convert the string to a float\n    value = float(value)\n\n    # Check if the value is equidistant from two integers\n    if value > 0:\n        # Round it away from zero\n        if value - int(value) >= 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n    else:\n        # Round it away from zero\n        if abs(value - int(value)) >= 0.5:\n            return int(value) - 1\n        else:\n            return int(value)\n\n# Test the function\nprint(closest_integer(\"10\"))  # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15\n```\n\nThis function first converts the input string to a float. Then it checks if the float is greater than zero. If it is, it checks if the float is equidistant from two integers. If it is, it rounds it away from zero by adding one to the integer part of the float. If it isn't, it simply returns the integer part of the float. If the float is less than zero, it follows the same process but subtracts one from the integer part of the float."}
