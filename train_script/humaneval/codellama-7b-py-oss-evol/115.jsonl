{"task_id": "HumanEval/115", "completion": "\n```python\ndef max_fill(grid, capacity):\n    # Calculate the total number of wells\n    total_wells = sum(row.count(1) for row in grid)\n\n    # Calculate the number of times we need to lower the buckets\n    return total_wells // capacity\n```\n\nThis Python script uses the built-in `sum` function to count the total number of wells in the grid. The `//` operator is used to ensure that we get the largest possible number of times we can lower the buckets. The `count` method is used to count the number of 1's in each row.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef max_fill(grid, capacity):\n    # Calculate the total number of wells\n    total_wells = sum(row.count(1) for row in grid)\n\n    # Calculate the number of times we need to lower the buckets\n    return total_wells // capacity\n```\n\nThis Python script uses the built-in `sum` function to count the total number of wells in the grid. The `//` operator is used to ensure that we get the largest possible number of times we can lower the buckets. The `count` method is used to count the number of 1's in each row."}
