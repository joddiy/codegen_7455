{"task_id": "HumanEval/119", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    return 'Yes' if (s1 + s2).count('(') - (s1 + s2).count(')') == 0 else 'No'\n```\n\nThis script works by concatenating the two input strings and then checking if the number of open parentheses '(' in the resulting string is equal to the number of close parentheses ')'. If they are equal, it means that the string is balanced and we can form a good string. If not, it means that the string is not balanced and we cannot form a good string.\n\nFor example:\n\n```python\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))  # Output: 'No'\n```\n\nThis script assumes that the input list `lst` will always contain exactly two strings. If the list can contain more or less than two strings, you should add appropriate error handling code.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    return 'Yes' if (s1 + s2).count('(') - (s1 + s2).count(')') == 0 else 'No'\n```\n\nThis script works by concatenating the two input strings and then checking if the number of open parentheses '(' in the resulting string is equal to the number of close parentheses ')'. If they are equal, it means that the string is balanced and we can form a good string. If not, it means that the string is not balanced and we cannot form a good string.\n\nFor example:\n\n```python\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))  # Output: 'No'\n```\n\nThis script assumes that the input list `lst` will always contain exactly two strings. If the list can contain more or less than two strings, you should add appropriate error handling code."}
