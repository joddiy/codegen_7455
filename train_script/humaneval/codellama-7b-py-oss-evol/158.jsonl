{"task_id": "HumanEval/158", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef find_max(words):\n    max_unique_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            max_word = min(max_word, word)\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\"\n```\n\nThis script works by iterating over each word in the list. For each word, it calculates the number of unique characters by converting the word to a set (which removes duplicates) and finding the length. If this number is greater than the current maximum, it updates the maximum and sets the current word as the maximum word. If the number is equal to the maximum, it compares the current word with the maximum word and keeps the one that comes first in lexicographical order.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef find_max(words):\n    max_unique_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            max_word = min(max_word, word)\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\"\n```\n\nThis script works by iterating over each word in the list. For each word, it calculates the number of unique characters by converting the word to a set (which removes duplicates) and finding the length. If this number is greater than the current maximum, it updates the maximum and sets the current word as the maximum word. If the number is equal to the maximum, it compares the current word with the maximum word and keeps the one that comes first in lexicographical order."}
