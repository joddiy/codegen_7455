{"task_id": "HumanEval/58", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef common(l1: list, l2: list):\n    # Convert the lists to sets to get the unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Use the intersection method of sets to get the common elements\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n\n    return sorted_common_elements\n```\n\nThis script works by first converting the input lists to sets. Sets in Python are unordered collections of unique elements. This means that they automatically remove any duplicate elements from the lists.\n\nThen, it uses the intersection method of sets to get the common elements. This method returns a new set that contains only the elements that are present in both sets.\n\nFinally, it converts the set back to a list and sorts it. The sorted function returns a new list that contains the elements of the original list in ascending order.\n\nThis solution is efficient because it uses the built-in set data structure and the intersection method, which have a time complexity of O(min(len(set1), len(set2))).", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef common(l1: list, l2: list):\n    # Convert the lists to sets to get the unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Use the intersection method of sets to get the common elements\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n\n    return sorted_common_elements\n```\n\nThis script works by first converting the input lists to sets. Sets in Python are unordered collections of unique elements. This means that they automatically remove any duplicate elements from the lists.\n\nThen, it uses the intersection method of sets to get the common elements. This method returns a new set that contains only the elements that are present in both sets.\n\nFinally, it converts the set back to a list and sorts it. The sorted function returns a new list that contains the elements of the original list in ascending order.\n\nThis solution is efficient because it uses the built-in set data structure and the intersection method, which have a time complexity of O(min(len(set1), len(set2)))."}
