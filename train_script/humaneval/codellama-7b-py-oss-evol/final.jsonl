{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    group = \"\"\n    count = 0\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            group += char\n        elif char == \")\":\n            count -= 1\n            group += char\n            if count == 0:\n                groups.append(group)\n                group = \"\"\n    return groups"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n\n# Test cases\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i + 1)\n    return result\n\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Replace commas with spaces\n    s = s.replace(\",\", \" \")\n    # Split the string into words\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Initialize the maximum even number to -1\n    max_even = -1\n\n    # Iterate over the range from x to y\n    for num in range(x, y + 1):\n        # Check if the number is even and greater than the current max_even\n        if num % 2 == 0 and num > max_even:\n            # Update the max_even if a greater even number is found\n            max_even = num\n\n    # Return the max_even\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]\n\nprint(rounded_avg(1, 5))  # => \"0b11\"\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20))  # => \"0b1111\"\nprint(rounded_avg(20, 33))  # => \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate over each number in the list\n    for num in x:\n        # Convert the number to a string to check each digit\n        num_str = str(num)\n        # Check if all digits are odd\n        if all(digit % 2 != 0 for digit in map(int, num_str)):\n            # If so, add the number to the result list\n            result.append(num)\n\n    # Sort the result list in increasing order\n    result.sort()\n\n    # Return the sorted list\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter the array to only include numbers between 1 and 9\n    arr = [i for i in arr if 1 <= i <= 9]\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Replace each number with its corresponding name\n    arr = [str(i) for i in arr]\n    arr = [{\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}[i] for i in arr]\n\n    return arr"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return arr == sorted(arr)"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to lists of integers\n    a_list = list(map(int, a))\n    b_list = list(map(int, b))\n\n    # Perform XOR operation on the corresponding elements of the lists\n    result = [str(x ^ y) for x, y in zip(a_list, b_list)]\n\n    # Join the list into a string and return\n    return ''.join(result)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Initialize counters for even and odd numbers in lst1 and lst2\n    count_lst1_even = count_lst1_odd = count_lst2_even = count_lst2_odd = 0\n\n    # Count the number of even and odd numbers in lst1 and lst2\n    for num in lst1:\n        if num % 2 == 0:\n            count_lst1_even += 1\n        else:\n            count_lst1_odd += 1\n\n    for num in lst2:\n        if num % 2 == 0:\n            count_lst2_even += 1\n        else:\n            count_lst2_odd += 1\n\n    # If there are more odd numbers in lst1 than in lst2, return \"NO\"\n    if count_lst1_odd > count_lst2_odd:\n        return \"NO\"\n\n    # If there are more even numbers in lst2 than in lst1, return \"YES\"\n    if count_lst2_even > count_lst1_even:\n        return \"YES\"\n\n    # If there are the same number of even and odd numbers in both lists, return \"YES\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Split the string into a list of characters\n    chars = test.split()\n\n    # Create a dictionary to store the count of each character\n    count_dict = {}\n\n    # Iterate over each character in the list\n    for char in chars:\n        # If the character is already in the dictionary, increment its count\n        if char in count_dict:\n            count_dict[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[char] = 1\n\n    # Find the maximum count\n    max_count = max(count_dict.values()) if count_dict else 0\n\n    # Create a new dictionary to store the characters with the maximum count\n    result_dict = {char: count for char, count in count_dict.items() if count == max_count}\n\n    return result_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    s = ''.join(ch for ch in s if ch not in c)\n\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n\n    return s, is_palindrome\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, string in enumerate(lst, start=1):\n        odd_count = sum(int(digit) % 2 for digit in string)\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Calculate the total number of wells\n    total_wells = sum(row.count(1) for row in grid)\n\n    # Calculate the number of times we need to lower the buckets\n    return total_wells // capacity"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    return 'Yes' if (s1 + s2).count('(') - (s1 + s2).count(')') == 0 else 'No'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    odd_numbers = [n for n in collatz(n) if n % 2 != 0]\n    return sorted(odd_numbers)\n\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    import re\n    # Check if the date is in the correct format\n    if not re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$', date):\n        return False\n    # Extract the month, day, and year from the date\n    month, day, year = map(int, date.split('-'))\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        # Check if the year is a leap year\n        if year % 4 != 0:\n            return False\n        if year % 100 != 0:\n            return True\n        if year % 400 != 0:\n            return False\n        return True\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        signs = [1 if x > 0 else -1 for x in arr]\n        magnitudes = [abs(x) for x in arr]\n        return sum(x*y for x, y in zip(signs, magnitudes))"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    heap = [(grid[0][0], 0, 0)]\n    visited = set((0,0))\n    while heap:\n        val, x, y = heapq.heappop(heap)\n        if (x, y) == (n-1, n-1) and k == 0:\n            return [val]\n        if k > 0:\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    heapq.heappush(heap, (grid[nx][ny], nx, ny))\n            k -= 1\n    return []"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    sequence = [1, 3]\n    if n == 2:\n        return sequence\n    elif n % 2 == 0:\n        for i in range(2, n + 1):\n            sequence.append(sequence[i - 1] + i / 2)\n    else:\n        sequence.append(sequence[1] + sequence[0] + sequence[2])\n        for i in range(3, n + 1):\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence\n\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(int(x**2) for x in lst)\n\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9])) # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) # 29\nprint(sum_squares([-2.4,1,1])) # 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not last_char.isalnum()\n    else:\n        return False\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))  # Output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        a = float(a.replace(',', '.'))\n    except ValueError:\n        a = float(a)\n\n    try:\n        b = float(b.replace(',', '.'))\n    except ValueError:\n        b = float(b)\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    # Check if n is even\n    if n % 2 != 0:\n        return False\n\n    # Check if n is divisible by 4\n    if n % 4 != 0:\n        return False\n\n    # Check if n is divisible by 6\n    if n % 6 != 0:\n        return False\n\n    # Check if n is divisible by 8\n    if n % 8 != 0:\n        return False\n\n    # Check if n is divisible by 10\n    if n % 10 != 0:\n        return False\n\n    # Check if n is divisible by 12\n    if n % 12 != 0:\n        return False\n\n    # Check if n is divisible by 14\n    if n % 14 != 0:\n        return False\n\n    # Check if n is divisible by 16\n    if n % 16 != 0:\n        return False\n\n    # Check if n is divisible by 18\n    if n % 18 != 0:\n        return False\n\n    # Check if n is divisible by 20\n    if n % 20 != 0:\n        return False\n\n    # Check if n is divisible by 22\n    if n % 22 != 0:\n        return False\n\n    # Check if n is divisible by 24\n    if n % 24 != 0:\n        return False\n\n    # Check if n is divisible by 26\n    if n % 26 != 0:\n        return False\n\n    # Check if n is divisible by 28\n    if n % 28 != 0:\n        return False\n\n    # Check if n is divisible by 30\n    if n % 30 != 0:\n        return False\n\n    # Check if n is divisible by 32\n    if n % 32 != 0:\n        return False\n\n    # Check if n is divisible by 34\n    if n % 34 != 0:\n        return False\n\n    # Check if n is divisible by 36\n    if n % 36 != 0:\n        return False\n\n    # Check if n is divisible by 38\n    if n % 38 != 0:\n        return False\n\n    # Check if n is divisible by 40\n    if n % 40 != 0:\n        return False\n\n    # Check if n is divisible by 42\n    if n % 42 != 0:\n        return False\n\n    # Check if n is divisible by 44\n    if n % 44 != 0:\n        return False\n\n    # Check if n is divisible by 46\n    if n % 46 != 0:\n        return False\n\n    # Check if n is divisible by 48\n    if n % 48 != 0:\n        return False\n\n    # Check if n is divisible by 50\n    if n % 50 != 0:\n        return False\n\n    # Check if n is divisible by 52\n    if n % 52 != 0:\n        return False\n\n    # Check if n is divisible by 54\n    if n % 54 != 0:\n        return False\n\n    # Check if n is divisible by 56\n    if n % 56 != 0:\n        return False\n\n    # Check if n is divisible by 58"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n < 0:\n        return \"Error: n must be a positive integer\"\n    elif n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial\n\nprint(special_factorial(4))"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string)+1)]\n\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = ''\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n            if space_count > 2:\n                result += '-'\n                space_count = 0\n            else:\n                result += '_'\n        else:\n            result += char\n    return result\n\nprint(fix_spaces(\"Example\")) # \"Example\"\nprint(fix_spaces(\"Example 1\")) # \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # \"_Example_2\"\nprint(fix_spaces(\" Example   3\")) # \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a letter and is not empty\n    if not file_name.split('.')[0] or not file_name.split('.')[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n\n# Test the function\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Multiply the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    return product_num % product_den == 0\n\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Calculate the sum of digits for each number\n    sums = [(i, sum(int(digit) for digit in str(i))) for i in nums]\n\n    # Sort the numbers based on their sum of digits and their original index\n    sums.sort(key=lambda x: (x[1], nums.index(x[0])))\n\n    # Return the sorted list of numbers\n    return [num for _, num in sums]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planet_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        planet1_index = planet_order.index(planet1)\n        planet2_index = planet_order.index(planet2)\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return tuple(planet_order[planet1_index+1:planet2_index])\n    except ValueError:\n        return ()\n\nprint(bf(\"Jupiter\", \"Neptune\")) # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\")) # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out the strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i%2 != 0)\n\nprint(double_the_difference([1, 3, 2, 0])) # 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])) # -> [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) # -> [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = -1\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            rotated_b = b[i:] + b[:i]\n            if rotated_b in a:\n                return True\n        return False\n\nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern_check(\"efef\",\"eeff\")) # False\nprint(cycpattern_check(\"himenss\",\"simen\")) # True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    # convert the number to string\n    num_str = str(abs(num))\n    # initialize counters\n    even_count = 0\n    odd_count = 0\n    # iterate over each digit\n    for digit in num_str:\n        # check if the digit is even or odd\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    # return the counts as a tuple\n    return (even_count, odd_count)\n\n# test the function\nprint(even_odd_count(-12))  # should return (1, 1)\nprint(even_odd_count(123))  # should return (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_numeral = ''\n    for i in range(len(values)):\n        count = number // values[i]\n        roman_numeral += numerals[i] * count\n        number -= values[i] * count\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure c is the longest side\n    sides = sorted([a, b, c])\n    # Check if the longest side is equal to the sum of the other two sides\n    return sides[-1] == sides[0] + sides[1]\n\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            max_word = min(max_word, word)\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))  # Output: 4"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n\n# Test the function\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nprint(do_algebra(operator, operand))  # Output: 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\nprint(string_to_md5('Hello world'))  # Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate even numbers between a and b\n    even_numbers = [num for num in range(a, b + 1) if num % 2 == 0]\n\n    return even_numbers"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Convert the string into a list of words\n    words = numbers.split()\n\n    # Convert each word into a number\n    numbers = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Sort the list of words by their corresponding numbers\n    words.sort(key=lambda word: numbers[word])\n\n    # Convert the list of words back into a string\n    return ' '.join(words)\n\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)\n\n# Test the function\nprint(truncate_number(3.5))  # Output: 0.5"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    min_diff = float('inf')\n    result = (float('inf'), float('inf'))\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n\nprint(largest_divisor(15))  # Output: 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Check if the list has an even number of coefficients and the largest non-zero coefficient\n    if len(xs) % 2 == 0 and max([coeff for coeff in xs if coeff != 0]) != xs[-1]:\n        raise ValueError(\"The polynomial must have an even number of coefficients and the largest non-zero coefficient must be the last one.\")\n\n    # Calculate the derivative of the polynomial\n    derivative = [xs[i] * (i + 1) for i in range(len(xs) - 1)]\n\n    # Find the root of the derivative\n    root = -xs[-1] / derivative[-1]\n\n    # Check if the root is a real number\n    if not math.isclose(poly(derivative, root), 0, abs_tol=1e-9):\n        raise ValueError(\"The polynomial does not have a real root.\")\n\n    return root\n\n# Test the function\nprint(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_elements = sorted([i for i in l[::3]])\n    for i in range(0, len(l), 3):\n        l[i] = third_elements.pop(0)\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted([l[i] for i in even_indices])\n    for i, val in zip(even_indices, even_values):\n        l[i] = val\n    return l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"\n    is_fibonacci checks if a number is a Fibonacci number.\n    \"\"\"\n    x = 0\n    y = 1\n    while y < n:\n        z = x + y\n        x = y\n        y = z\n    return y == n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    i = 0\n    count = 0\n    while count < n:\n        if is_prime(i) and is_fibonacci(i):\n            count += 1\n        i += 1\n    return i - 1"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(n - mean) for n in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i+1 for i in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    convert_string = \"0123456789\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = convert_string[remainder] + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h\n\n# Test the function\nprint(triangle_area(5, 3))  # Output: 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    s = sorted(l)\n    return (sum(s[n//2-1:n//2+1])/2.0, s[n//2])[n % 2] if n else None\n\nprint(median([3, 1, 2, 4, 5]))\nprint(median([-10, 4, 6, 1000, 10, 20]))"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if len(stack) == 0 or stack[-1] != '<':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return all(x < y for x, y in zip(l, l[1:]))\n    else:\n        return all(x > y for x, y in zip(l, l[1:]))\n\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    # Convert the lists to sets to get the unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Use the intersection method of sets to get the common elements\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nested_parens(s: str) -> int:\n        count = 0\n        max_count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        return max_count\n\n    return [count_nested_parens(s) for s in paren_string.split()]\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return []\n    else:\n        return [i * xs[i] for i in range(1, len(xs))]\n\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n        return fibfib_values[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"Hello\"))  # Output: 2\nprint(vowels_count(\"Yo\"))  # Output: 1\nprint(vowels_count(\"Y\"))  # Output: 1\nprint(vowels_count(\"\"))  # Output: 0"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Convert the integer to a string\n    x_str = str(x)\n\n    # If shift is greater than the number of digits, return the reversed string\n    if shift > len(x_str):\n        return x_str[::-1]\n\n    # Otherwise, circular shift the digits\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # Split the string into two parts: the number of apples and oranges, and the rest of the string\n    parts = s.split(\"apples and \")\n    # Convert the number of apples and oranges to integers\n    num_apples = int(parts[0])\n    num_oranges = int(parts[1])\n    # Return the number of mango fruits\n    return n - num_apples - num_oranges\n\n# Test the function\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) # -> 8\nprint(fruit_distribution(\"0 apples and 1 oranges\",3)) # -> 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # -> 95\nprint(fruit_distribution(\"100 apples and 1 oranges\",120)) # -> 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n            smallest_index = i\n    return [smallest_even, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    for num in sorted(counter.keys(), reverse=True):\n        if num > 0 and counter[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    result = []\n    min_val = min(lst)\n    max_val = max(lst)\n\n    while lst:\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            result.append(max_val)\n            lst.remove(max_val)\n        min_val = min(lst)\n        max_val = max(lst)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        return area\n    else:\n        return -1\n\n# Test the function\nprint(triangle_area(3, 4, 5))  # Expected output: 6.0\nprint(triangle_area(1, 2, 10))  # Expected output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    # Create a frequency dictionary\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Count the frequency of elements in the first half of the array\n    first_half = n // 2\n    count = 0\n    for i in range(first_half):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n\n    # If the array is already palindromic, return 0\n    if count == 0:\n        return 0\n\n    # Count the frequency of elements in the second half of the array\n    second_half = n - first_half\n    for i in range(first_half, first_half + second_half):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n\n    # If the array is already palindromic, return 0\n    if count == 0:\n        return 0\n\n    # Count the frequency of elements in the first half of the array\n    for i in range(first_half):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n\n    # If the array is already palindromic, return 0\n    if count == 0:\n        return 0\n\n    # Count the frequency of elements in the second half of the array\n    for i in range(first_half, first_half + second_half):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    # If the total number of characters in lst1 is less than lst2, return lst1\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    # If the total number of characters in lst2 is less than lst1, return lst2\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    # If the total number of characters in both lists are equal, return lst1\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n        if len(factors) > 3:\n            return False\n    return len(factors) == 3 and all(is_prime(i) for i in factors)\n\nprint(is_multiply_prime(30))  # True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    This function returns True if a number x is a simple power of n and False in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"\n    if n == 1:\n        return x == 1\n    else:\n        return x == n ** round(pow(x / n, 1 / 2))\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return round(round(round(a ** (1. / 3)) ** 3, 5) ** 3) == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\nprint(decimal_to_binary(15))   # returns \"db1111db\"\nprint(decimal_to_binary(32))   # returns \"db100000db\""}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        sum_num += num\n        product_num *= num\n    return (sum_num, product_num)"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the length of a string is a prime number\"\"\"\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # The number of n-digit numbers that start or end with 1 is 2 * 9 * 10^(n-2)\n    # This is because there are 2 possibilities for the first digit (1 or not 1),\n    # 9 possibilities for the second digit (any digit except 1), and 10^(n-2) possibilities\n    # for the remaining n-2 digits.\n    return 2 * 9 * 10 ** (n - 2)\n\n# Test the function\nprint(starts_one_ends(2))  # Output: 18\nprint(starts_one_ends(3))  # Output: 108"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the integer to binary\n    binary_N = bin(N)[2:]\n\n    # Convert each digit to binary and sum them up\n    sum_of_digits = sum(int(digit) for digit in binary_N)\n\n    # Convert the sum to binary\n    binary_sum = bin(sum_of_digits)[2:]\n\n    return binary_sum\n\n# Test the function\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)\n\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_chars = sorted(word)\n        ordered_words.append(''.join(ordered_chars))\n    return ' '.join(ordered_words)\n\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    sum_first_last = sum(array[0], array[-1])\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for v in s:\n        if v.isalpha():\n            shift = 2 * 2\n            ascii_offset = ord('a') if v.islower() else ord('A')\n            result += chr((ord(v) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += v\n    return result\n\nprint(encrypt('hi'))  # returns 'lm'\nprint(encrypt('asdfghjkl'))  # returns 'ewhjklnop'\nprint(encrypt('gf'))  # returns 'kj'\nprint(encrypt('et'))  # returns 'ix'"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    min1, min2 = float('inf'), float('inf')\n    for num in lst:\n        if num < min1:\n            min1, min2 = num, min1\n        elif min1 < num < min2:\n            min2 = num\n    return min2 if min2 != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split(' ')\n        if words[0] == 'I':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                result += chr((ord(vowels[index]) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result\n\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        return sum(int(digit) for digit in str(max(primes)))\n    else:\n        return 0\n\nprint(largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(largest_prime_sum([0,81,12,3,1,21]))  # Output: 3\nprint(largest_prime_sum([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    keys = list(d.keys())\n    if all(isinstance(key, str) and key.islower() for key in keys):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]\n\nprint(count_up_to(5))  # => [2, 3]\nprint(count_up_to(11))  # => [2, 3, 5, 7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20))  # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18))  # => [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"\n    # Convert the numbers to strings to easily access their unit digits\n    str_a = str(a)\n    str_b = str(b)\n    \n    # Get the last digit of each number\n    last_digit_a = int(str_a[-1])\n    last_digit_b = int(str_b[-1])\n    \n    # Return the product of the last digits\n    return last_digit_a * last_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\nprint(count_upper('aBCdEf'))  # returns 1\nprint(count_upper('abcdefg'))  # returns 0\nprint(count_upper('dBBE'))  # returns 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the string to a float\n    value = float(value)\n\n    # Check if the value is equidistant from two integers\n    if value > 0:\n        # Round it away from zero\n        if value - int(value) >= 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n    else:\n        # Round it away from zero\n        if abs(value - int(value)) >= 0.5:\n            return int(value) - 1\n        else:\n            return int(value)\n\n# Test the function\nprint(closest_integer(\"10\"))  # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15"}
