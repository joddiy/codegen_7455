{"task_id": "HumanEval/143", "completion": "\n    Here is a Python solution for the problem:\n\n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n```\n\nIn this solution, we first define a helper function `is_prime(n)` to check if a number `n` is a prime number. Then, in the `words_in_sentence(sentence)` function, we split the input sentence into words, and for each word, we check if its length is a prime number. If it is, we add it to the result list. Finally, we join the words in the result list into a string and return it.\n\nThe time complexity of this solution is O(n), where n is the length of the sentence. This is because we need to check the length of each word in the sentence. The space complexity is also O(n), where n is the number of words in the sentence. This is because we need to store the words in the result list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n```\n\n    ### Response:\n    Here is a Python solution for the problem:\n\n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n```\n\nIn this solution, we first define a helper function `is_prime(n)` to check if a number `n` is a prime number. Then, in the `words_in_sentence(sentence)` function, we split the input sentence into words, and for each word, we check if its length is a prime number. If it is, we add it to the result list. Finally, we join the words in the result list into a string and return it.\n\nThe time complexity of this solution is O(n), where n is the length of the sentence. This is because we need to check the length of each word in the sentence. The space complexity is also O(n), where n is the number of words in the sentence. This is because we need to store the words in the result list."}
