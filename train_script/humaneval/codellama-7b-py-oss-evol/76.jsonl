{"task_id": "HumanEval/76", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef is_simple_power(x, n):\n    \"\"\"\n    This function returns True if a number x is a simple power of n and False in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"\n    if n == 1:\n        return x == 1\n    else:\n        return x == n ** round(pow(x / n, 1 / 2))\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n```\n\nThis script works by first checking if n is 1. If n is 1, then x must also be 1. If n is not 1, then x must be a perfect square of n. The function checks if x is a perfect square of n by rounding the square root of x/n to the nearest integer and then checking if n raised to that power equals x.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef is_simple_power(x, n):\n    \"\"\"\n    This function returns True if a number x is a simple power of n and False in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"\n    if n == 1:\n        return x == 1\n    else:\n        return x == n ** round(pow(x / n, 1 / 2))\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n```\n\nThis script works by first checking if n is 1. If n is 1, then x must also be 1. If n is not 1, then x must be a perfect square of n. The function checks if x is a perfect square of n by rounding the square root of x/n to the nearest integer and then checking if n raised to that power equals x."}
