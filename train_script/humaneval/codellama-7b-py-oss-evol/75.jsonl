{"task_id": "HumanEval/75", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n        if len(factors) > 3:\n            return False\n    return len(factors) == 3 and all(is_prime(i) for i in factors)\n\nprint(is_multiply_prime(30))  # True\n```\n\nThis script first defines a helper function `is_prime` to check if a number is prime. Then it iterates over all numbers from 2 to `a` and checks if `a` is divisible by the current number. If it is, the current number is a factor of `a` and `a` is divided by it. If `a` is divisible by the current number more than once, it means that the current number is a repeated factor, so we stop the loop. If the length of the factors list becomes more than 3, it means that `a` is the multiplication of more than 3 prime numbers, so the function returns `False`. If the length of the factors list is 3 and all elements in the list are prime numbers, the function returns `True`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n        if len(factors) > 3:\n            return False\n    return len(factors) == 3 and all(is_prime(i) for i in factors)\n\nprint(is_multiply_prime(30))  # True\n```\n\nThis script first defines a helper function `is_prime` to check if a number is prime. Then it iterates over all numbers from 2 to `a` and checks if `a` is divisible by the current number. If it is, the current number is a factor of `a` and `a` is divided by it. If `a` is divisible by the current number more than once, it means that the current number is a repeated factor, so we stop the loop. If the length of the factors list becomes more than 3, it means that `a` is the multiplication of more than 3 prime numbers, so the function returns `False`. If the length of the factors list is 3 and all elements in the list are prime numbers, the function returns `True`."}
