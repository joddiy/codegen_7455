{"task_id": "HumanEval/49", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n```\n\nThis script uses the built-in `pow` function in Python, which computes the power of a number modulo a given modulus. The third argument to `pow` is the modulus. This is a more efficient way to compute the modulo of a power than computing the power first and then taking the modulus.\n\nThe script also uses type annotations to make the function more self-documenting.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n```\n\nThis script uses the built-in `pow` function in Python, which computes the power of a number modulo a given modulus. The third argument to `pow` is the modulus. This is a more efficient way to compute the modulo of a power than computing the power first and then taking the modulus.\n\nThe script also uses type annotations to make the function more self-documenting."}
