{"task_id": "HumanEval/68", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n            smallest_index = i\n    return [smallest_even, smallest_index] if smallest_index != -1 else []\n```\n\nThis script works by iterating over the array and checking each value. If the value is even and smaller than the current smallest even value, it updates the smallest even value and its index. If no even values are found, it returns an empty list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n            smallest_index = i\n    return [smallest_even, smallest_index] if smallest_index != -1 else []\n```\n\nThis script works by iterating over the array and checking each value. If the value is even and smaller than the current smallest even value, it updates the smallest even value and its index. If no even values are found, it returns an empty list."}
