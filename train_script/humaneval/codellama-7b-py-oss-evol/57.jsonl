{"task_id": "HumanEval/57", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return all(x < y for x, y in zip(l, l[1:]))\n    else:\n        return all(x > y for x, y in zip(l, l[1:]))\n\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True\n```\n\nThis script works by first checking if the list is too short to be monotonically increasing or decreasing. If it is, it returns True. If not, it checks if the first element is less than the second. If it is, it checks if the list is monotonically increasing. If it is not, it checks if the list is monotonically decreasing. It does this by using a generator expression with the `zip` function to pair each element with its successor, and then using the `all` function to check if they all satisfy the condition.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return all(x < y for x, y in zip(l, l[1:]))\n    else:\n        return all(x > y for x, y in zip(l, l[1:]))\n\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True\n```\n\nThis script works by first checking if the list is too short to be monotonically increasing or decreasing. If it is, it returns True. If not, it checks if the first element is less than the second. If it is, it checks if the list is monotonically increasing. If it is not, it checks if the list is monotonically decreasing. It does this by using a generator expression with the `zip` function to pair each element with its successor, and then using the `all` function to check if they all satisfy the condition."}
