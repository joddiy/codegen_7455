{"task_id": "HumanEval/10", "completion": "\n```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    if not string:\n        return ''\n    \n    max_palindrome_length = 0\n    max_palindrome_index = 0\n    \n    for i in range(len(string)):\n        substring = string[i:]\n        if is_palindrome(substring):\n            if len(substring) > max_palindrome_length:\n                max_palindrome_length = len(substring)\n                max_palindrome_index = i\n    \n    prefix = string[:max_palindrome_index]\n    suffix = string[max_palindrome_index:]\n    \n    return string + suffix[::-1]\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    if not string:\n        return ''\n    \n    max_palindrome_length = 0\n    max_palindrome_index = 0\n    \n    for i in range(len(string)):\n        substring = string[i:]\n        if is_palindrome(substring):\n            if len(substring) > max_palindrome_length:\n                max_palindrome_length = len(substring)\n                max_palindrome_index = i\n    \n    prefix = string[:max_palindrome_index]\n    suffix = string[max_palindrome_index:]\n    \n    return string + suffix[::-1]\n```"}
