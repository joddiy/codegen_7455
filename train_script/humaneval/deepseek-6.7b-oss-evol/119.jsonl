{"task_id": "HumanEval/119", "completion": "\n```python\ndef match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match_parens([')', ')']))  # 'No'\n```\n\nThis script uses a stack to keep track of the open parentheses. It iterates through the characters in the concatenated string. If it encounters an open parenthesis, it pushes it onto the stack. If it encounters a close parenthesis, it checks if the stack is not empty and the top of the stack is an open parenthesis. If it is, it pops the top element from the stack. If it's not, it returns 'No' because there's an unmatched close parenthesis. After checking all characters, if the stack is empty, it returns 'Yes' because all parentheses are matched, otherwise it returns 'No'.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n```\n\n    ### Response:\n```python\ndef match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match_parens([')', ')']))  # 'No'\n```\n\nThis script uses a stack to keep track of the open parentheses. It iterates through the characters in the concatenated string. If it encounters an open parenthesis, it pushes it onto the stack. If it encounters a close parenthesis, it checks if the stack is not empty and the top of the stack is an open parenthesis. If it is, it pops the top element from the stack. If it's not, it returns 'No' because there's an unmatched close parenthesis. After checking all characters, if the stack is empty, it returns 'Yes' because all parentheses are matched, otherwise it returns 'No'."}
