{"task_id": "HumanEval/115", "completion": "\n```python\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n```\n\nThe function `max_fill` calculates the total amount of water in the grid by summing up all the 1s in the grid. Then it divides this total by the capacity of the bucket and rounds up to the nearest whole number to get the number of times you need to lower the bucket.\n\nThis solution assumes that the grid is a 2D list of 0s and 1s, where each row represents a well and each column represents a unit of water in the well. The capacity is the maximum amount of water that can be extracted from each well. The function returns the minimum number of times you need to lower the bucket to empty all the wells.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n```\n\nThe function `max_fill` calculates the total amount of water in the grid by summing up all the 1s in the grid. Then it divides this total by the capacity of the bucket and rounds up to the nearest whole number to get the number of times you need to lower the bucket.\n\nThis solution assumes that the grid is a 2D list of 0s and 1s, where each row represents a well and each column represents a unit of water in the well. The capacity is the maximum amount of water that can be extracted from each well. The function returns the minimum number of times you need to lower the bucket to empty all the wells."}
