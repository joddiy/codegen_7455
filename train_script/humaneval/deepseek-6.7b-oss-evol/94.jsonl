{"task_id": "HumanEval/94", "completion": "\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    return sum_of_digits(max(primes))\n\nprint(largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # 10\nprint(largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # 25\nprint(largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # 13\nprint(largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # 11\nprint(largest_prime_sum([0,81,12,3,1,21])) # 3\nprint(largest_prime_sum([0,8,1,2,1,7])) # 7\n```\n\nThis script first defines a helper function `is_prime(n)` to check if a number is prime. Then it defines another helper function `sum_of_digits(n)` to calculate the sum of the digits of a number. The main function `largest_prime_sum(lst)` first filters the list to get all prime numbers, then checks if there are any primes. If there are, it finds the maximum prime and calculates its sum of digits. If there are no primes, it returns 0.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    return sum_of_digits(max(primes))\n\nprint(largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # 10\nprint(largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # 25\nprint(largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # 13\nprint(largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # 11\nprint(largest_prime_sum([0,81,12,3,1,21])) # 3\nprint(largest_prime_sum([0,8,1,2,1,7])) # 7\n```\n\nThis script first defines a helper function `is_prime(n)` to check if a number is prime. Then it defines another helper function `sum_of_digits(n)` to calculate the sum of the digits of a number. The main function `largest_prime_sum(lst)` first filters the list to get all prime numbers, then checks if there are any primes. If there are, it finds the maximum prime and calculates its sum of digits. If there are no primes, it returns 0."}
