{"task_id": "HumanEval/9", "completion": "\n```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))\n```\n\nThis script works by iterating over the input list of numbers, keeping track of the current maximum number found so far (`max_num`). For each number in the list, it checks if the number is greater than the current maximum. If it is, it updates `max_num` to the new number. It then appends the current maximum to the result list. The result list is returned as the final output.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n```\n\n    ### Response:\n```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))\n```\n\nThis script works by iterating over the input list of numbers, keeping track of the current maximum number found so far (`max_num`). For each number in the list, it checks if the number is greater than the current maximum. If it is, it updates `max_num` to the new number. It then appends the current maximum to the result list. The result list is returned as the final output."}
