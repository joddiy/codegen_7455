{"task_id": "HumanEval/156", "completion": "\n```python\ndef int_to_mini_roman(number):\n    # Define the mapping of integers to roman numerals\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    # Initialize an empty string to store the roman numeral\n    roman_numeral = ''\n\n    # Iterate over the keys in descending order\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        # While the number is greater than or equal to the current value\n        while number >= value:\n            # Add the corresponding roman numeral to the result\n            roman_numeral += roman_numerals[value]\n            # Subtract the value from the number\n            number -= value\n\n    # Return the roman numeral\n    return roman_numeral\n```\n\nThis script works by iterating over the keys of the `roman_numerals` dictionary in descending order. For each key, it checks if the input number is greater than or equal to the current key. If it is, it appends the corresponding roman numeral to the result and subtracts the key from the number. This process continues until the number becomes 0. The result is the roman numeral equivalent of the input number.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef int_to_mini_roman(number):\n    # Define the mapping of integers to roman numerals\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    # Initialize an empty string to store the roman numeral\n    roman_numeral = ''\n\n    # Iterate over the keys in descending order\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        # While the number is greater than or equal to the current value\n        while number >= value:\n            # Add the corresponding roman numeral to the result\n            roman_numeral += roman_numerals[value]\n            # Subtract the value from the number\n            number -= value\n\n    # Return the roman numeral\n    return roman_numeral\n```\n\nThis script works by iterating over the keys of the `roman_numerals` dictionary in descending order. For each key, it checks if the input number is greater than or equal to the current key. If it is, it appends the corresponding roman numeral to the result and subtracts the key from the number. This process continues until the number becomes 0. The result is the roman numeral equivalent of the input number."}
