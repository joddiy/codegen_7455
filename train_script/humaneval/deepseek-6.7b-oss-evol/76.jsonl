{"task_id": "HumanEval/76", "completion": "\n```python\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x < n:\n        return False\n    else:\n        while x % n == 0:\n            x /= n\n        return x == 1\n```\n\nThe function `is_simple_power` checks if a number `x` is a simple power of `n`. It first checks if `x` is 1, in which case it returns `True`. If `x` is less than `n`, it returns `False` because `x` cannot be a power of `n`. Otherwise, it enters a loop where it continually divides `x` by `n` as long as `x` is divisible by `n`. If `x` is not a power of `n`, it will eventually be less than `n` and not divisible by `n`, at which point the loop will exit. If `x` is a power of `n`, it will eventually be divided by `n` until `x` is 1, at which point the loop will exit. In this case, the function will return `True`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x < n:\n        return False\n    else:\n        while x % n == 0:\n            x /= n\n        return x == 1\n```\n\nThe function `is_simple_power` checks if a number `x` is a simple power of `n`. It first checks if `x` is 1, in which case it returns `True`. If `x` is less than `n`, it returns `False` because `x` cannot be a power of `n`. Otherwise, it enters a loop where it continually divides `x` by `n` as long as `x` is divisible by `n`. If `x` is not a power of `n`, it will eventually be less than `n` and not divisible by `n`, at which point the loop will exit. If `x` is a power of `n`, it will eventually be divided by `n` until `x` is 1, at which point the loop will exit. In this case, the function will return `True`."}
