{"task_id": "HumanEval/56", "completion": "\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n```\n\nThe function `correct_bracketing` uses a stack to keep track of the brackets. It iterates over each bracket in the input string. If it encounters an opening bracket (\"<\"), it pushes it onto the stack. If it encounters a closing bracket (\">\"), it checks if the stack is empty or the top of the stack is not an opening bracket. If either of these conditions is true, it returns False. If the stack is not empty and the top of the stack is an opening bracket, it pops the top element from the stack. After iterating over all brackets, if the stack is empty, it returns True, otherwise it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n```\n\nThe function `correct_bracketing` uses a stack to keep track of the brackets. It iterates over each bracket in the input string. If it encounters an opening bracket (\"<\"), it pushes it onto the stack. If it encounters a closing bracket (\">\"), it checks if the stack is empty or the top of the stack is not an opening bracket. If either of these conditions is true, it returns False. If the stack is not empty and the top of the stack is an opening bracket, it pops the top element from the stack. After iterating over all brackets, if the stack is empty, it returns True, otherwise it returns False."}
