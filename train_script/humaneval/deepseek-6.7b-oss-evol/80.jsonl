{"task_id": "HumanEval/80", "completion": "\n```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n```\n\nThe function `is_happy` takes a string `s` as input. It first checks if the length of the string is less than 3. If it is, it returns `False` because a string with less than 3 characters cannot be happy.\n\nThen it iterates over the string, checking every 3 consecutive characters. It uses the `set` function to get the unique characters in each group of 3. If the length of the set is not 3, it means that there are duplicate characters in the group, so the string is not happy.\n\nIf the function gets through the entire string without finding any groups of 3 consecutive characters that are not distinct, it returns `True`, meaning the string is happy.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n```\n\nThe function `is_happy` takes a string `s` as input. It first checks if the length of the string is less than 3. If it is, it returns `False` because a string with less than 3 characters cannot be happy.\n\nThen it iterates over the string, checking every 3 consecutive characters. It uses the `set` function to get the unique characters in each group of 3. If the length of the set is not 3, it means that there are duplicate characters in the group, so the string is not happy.\n\nIf the function gets through the entire string without finding any groups of 3 consecutive characters that are not distinct, it returns `True`, meaning the string is happy."}
