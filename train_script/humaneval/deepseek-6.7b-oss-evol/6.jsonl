{"task_id": "HumanEval/6", "completion": "\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\nThis script works by iterating over each group of parentheses in the input string, and for each group, it maintains a stack to keep track of the current depth of nesting. It also keeps track of the maximum depth seen so far. When it encounters an opening parenthesis, it pushes it onto the stack and updates the maximum depth. When it encounters a closing parenthesis, it pops the top element from the stack, effectively reducing the depth of nesting. The maximum depth seen so far is the depth of the deepest nesting in the group. This depth is then added to the result list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n```\n\n    ### Response:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\nThis script works by iterating over each group of parentheses in the input string, and for each group, it maintains a stack to keep track of the current depth of nesting. It also keeps track of the maximum depth seen so far. When it encounters an opening parenthesis, it pushes it onto the stack and updates the maximum depth. When it encounters a closing parenthesis, it pops the top element from the stack, effectively reducing the depth of nesting. The maximum depth seen so far is the depth of the deepest nesting in the group. This depth is then added to the result list."}
