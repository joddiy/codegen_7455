{"task_id": "HumanEval/70", "completion": "\n```python\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n```\n\nThis Python script sorts the input list in ascending order and then alternately pops the smallest and largest elements from the sorted list, appending them to the result list. This results in a list sorted in a strange order.\n\nFor example, if you call `strange_sort_list([1, 2, 3, 4])`, it will return `[1, 4, 2, 3]`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n```\n\n    ### Response:\n```python\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n```\n\nThis Python script sorts the input list in ascending order and then alternately pops the smallest and largest elements from the sorted list, appending them to the result list. This results in a list sorted in a strange order.\n\nFor example, if you call `strange_sort_list([1, 2, 3, 4])`, it will return `[1, 4, 2, 3]`."}
