{"task_id": "HumanEval/14", "completion": "\n```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\nprint(all_prefixes('abc'))\n```\n\nThis script uses list comprehension to generate all prefixes of the input string. It iterates over the indices of the string from 1 to the length of the string (inclusive), and for each index, it takes a slice of the string from the start to the current index. The resulting list of prefixes is returned.\n\nWhen you run this script with the input 'abc', it will output:\n```python\n['a', 'ab', 'abc']\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n```\n\n    ### Response:\n```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\nprint(all_prefixes('abc'))\n```\n\nThis script uses list comprehension to generate all prefixes of the input string. It iterates over the indices of the string from 1 to the length of the string (inclusive), and for each index, it takes a slice of the string from the start to the current index. The resulting list of prefixes is returned.\n\nWhen you run this script with the input 'abc', it will output:\n```python\n['a', 'ab', 'abc']\n```"}
