{"task_id": "HumanEval/115", "completion": "\n    ```python\ndef max_fill(grid, capacity):\n    def get_water(row, col, capacity):\n        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == 0:\n            return 0\n        if grid[row][col] == 1:\n            return 0\n        grid[row][col] = 1\n        return 1 + get_water(row + 1, col, min(capacity, grid[row][col])) + \\\n               get_water(row - 1, col, min(capacity, grid[row][col])) + \\\n               get_water(row, col + 1, min(capacity, grid[row][col])) + \\\n               get_water(row, col - 1, min(capacity, grid[row][col]))\n\n    total_water = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                total_water += get_water(i, j, capacity)\n    return total_water\n```\n\nThe `max_fill` function takes the grid and the capacity as input and calculates the total water that can be extracted from the wells using the given buckets. The `get_water` function recursively explores the grid to find the maximum water that can be extracted from a specific well.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```\n\n    ### Response:\n    ```python\ndef max_fill(grid, capacity):\n    def get_water(row, col, capacity):\n        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == 0:\n            return 0\n        if grid[row][col] == 1:\n            return 0\n        grid[row][col] = 1\n        return 1 + get_water(row + 1, col, min(capacity, grid[row][col])) + \\\n               get_water(row - 1, col, min(capacity, grid[row][col])) + \\\n               get_water(row, col + 1, min(capacity, grid[row][col])) + \\\n               get_water(row, col - 1, min(capacity, grid[row][col]))\n\n    total_water = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                total_water += get_water(i, j, capacity)\n    return total_water\n```\n\nThe `max_fill` function takes the grid and the capacity as input and calculates the total water that can be extracted from the wells using the given buckets. The `get_water` function recursively explores the grid to find the maximum water that can be extracted from a specific well."}
