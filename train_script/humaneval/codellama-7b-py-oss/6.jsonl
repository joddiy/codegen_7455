{"task_id": "HumanEval/6", "completion": "\n    ```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depth = 0\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n            result.append(max_depth)\n    return result\n```\n\nThe `parse_nested_parens` function iterates through the input string character by character. It maintains a stack to keep track of the opening parentheses encountered. When a closing parenthesis is encountered, it pops the corresponding opening parenthesis from the stack and appends the maximum depth of nesting to the result list. Finally, it returns the list of maximum depths for each group of nested parentheses.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n```\n\n    ### Response:\n    ```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depth = 0\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n            result.append(max_depth)\n    return result\n```\n\nThe `parse_nested_parens` function iterates through the input string character by character. It maintains a stack to keep track of the opening parentheses encountered. When a closing parenthesis is encountered, it pops the corresponding opening parenthesis from the stack and appends the maximum depth of nesting to the result list. Finally, it returns the list of maximum depths for each group of nested parentheses."}
