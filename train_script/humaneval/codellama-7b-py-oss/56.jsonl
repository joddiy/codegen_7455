{"task_id": "HumanEval/56", "completion": "\n    ```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    bracket_map = {\"<\": \">\", \">\": \"<\"}\n    for b in brackets:\n        if b in bracket_map:\n            stack.append(b)\n        elif stack and stack[-1] == bracket_map[b]:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n```\n\nThe `correct_bracketing` function uses a stack to keep track of the opening brackets encountered. It iterates through the input string of brackets, and for each opening bracket, it is pushed onto the stack. For each closing bracket, it checks if the top of the stack matches the expected closing bracket. If the stack is empty or the expected closing bracket does not match, the function returns False. Finally, it checks if the stack is empty at the end of the input string, returning True if it is, and False otherwise.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n```\n\n    ### Response:\n    ```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    bracket_map = {\"<\": \">\", \">\": \"<\"}\n    for b in brackets:\n        if b in bracket_map:\n            stack.append(b)\n        elif stack and stack[-1] == bracket_map[b]:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n```\n\nThe `correct_bracketing` function uses a stack to keep track of the opening brackets encountered. It iterates through the input string of brackets, and for each opening bracket, it is pushed onto the stack. For each closing bracket, it checks if the top of the stack matches the expected closing bracket. If the stack is empty or the expected closing bracket does not match, the function returns False. Finally, it checks if the stack is empty at the end of the input string, returning True if it is, and False otherwise."}
