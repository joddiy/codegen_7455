{"task_id": "HumanEval/61", "completion": "\n    ```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    opening_brackets = set([\"(\", \"[\", \"{\"])\n    closing_brackets = set([\")\", \"]\", \"}\"])\n    bracket_pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in brackets:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    return not stack\n```\n\nThe `correct_bracketing` function uses a stack to keep track of the opening brackets encountered. It iterates through the input string, pushing opening brackets onto the stack and popping the corresponding opening bracket when a closing bracket is encountered. If the stack is empty at the end, the function returns True, indicating that all brackets were correctly paired. Otherwise, it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n```\n\n    ### Response:\n    ```python\ndef correct_bracketing(brackets: str):\n    stack = []\n    opening_brackets = set([\"(\", \"[\", \"{\"])\n    closing_brackets = set([\")\", \"]\", \"}\"])\n    bracket_pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in brackets:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    return not stack\n```\n\nThe `correct_bracketing` function uses a stack to keep track of the opening brackets encountered. It iterates through the input string, pushing opening brackets onto the stack and popping the corresponding opening bracket when a closing bracket is encountered. If the stack is empty at the end, the function returns True, indicating that all brackets were correctly paired. Otherwise, it returns False."}
