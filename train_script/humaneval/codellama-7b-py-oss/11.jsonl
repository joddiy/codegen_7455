{"task_id": "HumanEval/11", "completion": "\n    ```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        bit_a = int(a[i]) if i < len(a) else 0\n        bit_b = int(b[i]) if i < len(b) else 0\n        result += str(bit_a ^ bit_b)\n    return result\n```\n\nThe `string_xor` function takes two input strings `a` and `b`, each consisting only of 1s and 0s. It iterates through the input strings, performing binary XOR on the corresponding bits and appends the result to the `result` string. Finally, it returns the XOR-ed string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n```\n\n    ### Response:\n    ```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        bit_a = int(a[i]) if i < len(a) else 0\n        bit_b = int(b[i]) if i < len(b) else 0\n        result += str(bit_a ^ bit_b)\n    return result\n```\n\nThe `string_xor` function takes two input strings `a` and `b`, each consisting only of 1s and 0s. It iterates through the input strings, performing binary XOR on the corresponding bits and appends the result to the `result` string. Finally, it returns the XOR-ed string."}
