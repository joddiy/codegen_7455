{"task_id": "HumanEval/119", "completion": "\n    ```python\ndef match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n```\n\nThe `match_parens` function takes a list of two strings as input. It initializes an empty stack and iterates through the characters of the two strings. For each character, it either pushes an open parenthesis onto the stack or pops a parenthesis from the stack. If the stack is empty after processing both strings, the function returns 'Yes', indicating that it is possible to make a good string. Otherwise, it returns 'No'.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n```\n\n    ### Response:\n    ```python\ndef match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n```\n\nThe `match_parens` function takes a list of two strings as input. It initializes an empty stack and iterates through the characters of the two strings. For each character, it either pushes an open parenthesis onto the stack or pops a parenthesis from the stack. If the stack is empty after processing both strings, the function returns 'Yes', indicating that it is possible to make a good string. Otherwise, it returns 'No'."}
