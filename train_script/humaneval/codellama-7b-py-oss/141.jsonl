{"task_id": "HumanEval/141", "completion": "\n    ```python\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count('.') != 1:\n        return 'No'\n    pre, post = file_name.split('.')\n    if not pre or not pre[0].isalpha():\n        return 'No'\n    if post not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if file_name.count('0123456789') > 3:\n        return 'No'\n    return 'Yes'\n```\n\nThe `file_name_check` function first checks if the file name contains exactly one dot. If not, it returns 'No'. Then, it splits the file name into the part before the dot and the part after the dot. It checks if the part before the dot starts with a letter and if the part after the dot is one of the allowed extensions. If any of these conditions are not met, it returns 'No'. Finally, it checks if there are more than three digits in the file name and returns 'No' if so. If all conditions are met, it returns 'Yes'.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n```\n\n    ### Response:\n    ```python\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count('.') != 1:\n        return 'No'\n    pre, post = file_name.split('.')\n    if not pre or not pre[0].isalpha():\n        return 'No'\n    if post not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if file_name.count('0123456789') > 3:\n        return 'No'\n    return 'Yes'\n```\n\nThe `file_name_check` function first checks if the file name contains exactly one dot. If not, it returns 'No'. Then, it splits the file name into the part before the dot and the part after the dot. It checks if the part before the dot starts with a letter and if the part after the dot is one of the allowed extensions. If any of these conditions are not met, it returns 'No'. Finally, it checks if there are more than three digits in the file name and returns 'No' if so. If all conditions are met, it returns 'Yes'."}
