{"task_id": "HumanEval/18", "completion": "\n    ```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index != -1:\n            count += 1\n            start = index + 1\n        else:\n            break\n    return count\n```\n\nThe solution defines a function `how_many_times` that takes a string and a substring as input. It initializes a count variable to 0 and a start variable to 0. It then enters a while loop where it finds the index of the substring within the original string starting from the current start position. If the index is not -1 (indicating the substring is found), it increments the count and updates the start position to the next character after the found substring. If the index is -1, it breaks out of the loop. Finally, it returns the count of occurrences of the substring in the original string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n```\n\n    ### Response:\n    ```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index != -1:\n            count += 1\n            start = index + 1\n        else:\n            break\n    return count\n```\n\nThe solution defines a function `how_many_times` that takes a string and a substring as input. It initializes a count variable to 0 and a start variable to 0. It then enters a while loop where it finds the index of the substring within the original string starting from the current start position. If the index is not -1 (indicating the substring is found), it increments the count and updates the start position to the next character after the found substring. If the index is -1, it breaks out of the loop. Finally, it returns the count of occurrences of the substring in the original string."}
