{"task_id": "HumanEval/6", "completion": "\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_nesting_levels = []\n    for group in paren_string.split():\n        stack = []\n        max_level = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_level = max(max_level, len(stack))\n            elif char == ')':\n                if stack:\n                    stack.pop()\n        max_nesting_levels.append(max_level)\n    return max_nesting_levels\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n```\n\n    ### Response:\n```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_nesting_levels = []\n    for group in paren_string.split():\n        stack = []\n        max_level = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_level = max(max_level, len(stack))\n            elif char == ')':\n                if stack:\n                    stack.pop()\n        max_nesting_levels.append(max_level)\n    return max_nesting_levels\n```"}
