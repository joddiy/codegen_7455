{"task_id": "HumanEval/124", "completion": "\n```python\ndef valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12 and 1 <= day <= 31 and 1 <= year <= 9999:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return day <= 31\n            elif month in [4, 6, 9, 11]:\n                return day <= 30\n            elif month == 2:\n                if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                    return day <= 29\n                else:\n                    return day <= 28\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False\n```\n\nThe `valid_date` function first splits the input date string into month, day, and year components. It then checks if the month, day, and year are valid according to the specified rules. If all conditions are met, the function returns True; otherwise, it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12 and 1 <= day <= 31 and 1 <= year <= 9999:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return day <= 31\n            elif month in [4, 6, 9, 11]:\n                return day <= 30\n            elif month == 2:\n                if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                    return day <= 29\n                else:\n                    return day <= 28\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False\n```\n\nThe `valid_date` function first splits the input date string into month, day, and year components. It then checks if the month, day, and year are valid according to the specified rules. If all conditions are met, the function returns True; otherwise, it returns False."}
