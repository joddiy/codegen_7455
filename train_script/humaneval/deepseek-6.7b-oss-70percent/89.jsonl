{"task_id": "HumanEval/89", "completion": "\n```python\ndef encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_char = chr(((ord(char) - 97 - 2) % 26) + 97)\n            else:\n                encrypted_char = chr(((ord(char) - 65 - 2) % 26) + 65)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n```\n\nThe `encrypt` function takes a string `s` as an argument and iterates through each character in the string. For each alphabetical character, it calculates the encrypted character by shifting the character down by two multiplied to two places and appends it to the `encrypted_string`. Non-alphabetical characters are appended as is. Finally, the function returns the encrypted string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_char = chr(((ord(char) - 97 - 2) % 26) + 97)\n            else:\n                encrypted_char = chr(((ord(char) - 65 - 2) % 26) + 65)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n```\n\nThe `encrypt` function takes a string `s` as an argument and iterates through each character in the string. For each alphabetical character, it calculates the encrypted character by shifting the character down by two multiplied to two places and appends it to the `encrypted_string`. Non-alphabetical characters are appended as is. Finally, the function returns the encrypted string."}
