{"task_id": "HumanEval/25", "completion": "\n```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n```\nThe `factorize` function takes an integer `n` as input and returns a list of prime factors of `n` in the order from smallest to largest. It uses a while loop to iterate through the numbers from 2 to the square root of `n`, checking if each number is a factor of `n`. If a factor is found, it is added to the `factors` list and `n` is updated to be divided by the factor. This process continues until `n` becomes 1, at which point the list of factors is returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n```\n\n    ### Response:\n```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n```\nThe `factorize` function takes an integer `n` as input and returns a list of prime factors of `n` in the order from smallest to largest. It uses a while loop to iterate through the numbers from 2 to the square root of `n`, checking if each number is a factor of `n`. If a factor is found, it is added to the `factors` list and `n` is updated to be divided by the factor. This process continues until `n` becomes 1, at which point the list of factors is returned."}
