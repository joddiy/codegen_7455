{"task_id": "HumanEval/119", "completion": "\n```python\ndef match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for char in lst[0]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n    for char in lst[1]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'\n```\nThe solution checks the count of open and close parentheses in both strings and returns 'Yes' if the counts are equal, indicating that it is possible to concatenate the two strings to form a good string. If the counts are not equal, the solution returns 'No'.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n```\n\n    ### Response:\n```python\ndef match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for char in lst[0]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n    for char in lst[1]:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'\n```\nThe solution checks the count of open and close parentheses in both strings and returns 'Yes' if the counts are equal, indicating that it is possible to concatenate the two strings to form a good string. If the counts are not equal, the solution returns 'No'."}
