{"task_id": "HumanEval/69", "completion": "\n```python\ndef search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if num > freq[num]:\n            return num\n    return -1\n```\n\nThe `search` function first creates a dictionary `freq` to store the frequency of each number in the input list. It then iterates through the list, updating the frequency of each number in the dictionary. Finally, it iterates through the sorted keys of the dictionary in reverse order, checking if the frequency of a number is greater than the value of the number itself. If such a number is found, it is returned; otherwise, -1 is returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n```\n\n    ### Response:\n```python\ndef search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if num > freq[num]:\n            return num\n    return -1\n```\n\nThe `search` function first creates a dictionary `freq` to store the frequency of each number in the input list. It then iterates through the list, updating the frequency of each number in the dictionary. Finally, it iterates through the sorted keys of the dictionary in reverse order, checking if the frequency of a number is greater than the value of the number itself. If such a number is found, it is returned; otherwise, -1 is returned."}
