{"task_id": "HumanEval/126", "completion": "\n```python\ndef is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n```\nThe `is_sorted` function takes a list of numbers as input and returns `True` if the list is sorted in ascending order, and `False` otherwise. It iterates through the list and checks if each element is less than the previous one. If any pair of elements is not in ascending order, the function returns `False`. If the loop completes without finding any pair of elements that are not in ascending order, the function returns `True`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n```\n\n    ### Response:\n```python\ndef is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n```\nThe `is_sorted` function takes a list of numbers as input and returns `True` if the list is sorted in ascending order, and `False` otherwise. It iterates through the list and checks if each element is less than the previous one. If any pair of elements is not in ascending order, the function returns `False`. If the loop completes without finding any pair of elements that are not in ascending order, the function returns `True`."}
