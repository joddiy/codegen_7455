{"task_id": "HumanEval/102", "completion": "\n```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        return x\n    else:\n        return x + 1 if x + 1 <= y else -1\n```\n\n    ### Test Cases:\n```python\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert choose_num(12, 12) == 12\nassert choose_num(13, 13) == 12\nassert choose_num(14, 14) == 14\nassert choose_num(15, 15) == 14\nassert choose_num(16, 16) == 16\nassert choose_num(17, 17) == 16\nassert choose_num(18, 18) == 18\nassert choose_num(19, 19) == 18\nassert choose_num(20, 20) == 20\nassert choose_num(21, 21) == 20\nassert choose_num(22, 22) == 22\nassert choose_num(23, 23) == 22\nassert choose_num(24, 24) == 24\nassert choose_num(25, 25) == 24\nassert choose_num(26, 26) == 26\nassert choose_num(27, 27) == 26\nassert choose_num(28, 28) == 28\nassert choose_num(29, 29) == 28\nassert choose_num(30, 30) == 30\nassert choose_num(31, 31) == 30\nassert choose_num(32, 32) == 32\nassert choose_num(33, 33) == 32\nassert choose_num(34, 34) == 34\nassert choose_num(35, 35) == 34\nassert choose_num(36, 36) == 36\nassert choose_num(37, 37) == 36\nassert choose_num(38, 38) == 38\nassert choose_num(39, 39) == 38\nassert choose_num(40, 40) == 40\nassert choose_num(41, 41) == 40\nassert choose_num(42, 42) == 42\nassert choose_num(43, 43) == 42\nassert choose_num(44, 44) == 44\nassert choose_num(45, 45) == 44\nassert choose_num(46, 46) == 46\nassert choose_num(47, 47) == 46\nassert choose_num(48, 48) == 48\nassert choose_num(49, 49) == 48\nassert choose_num(50, 50) == 50\nassert choose_num(51, 51) == 50\nassert choose_num(52, 52) == 52\nassert choose", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        return x\n    else:\n        return x + 1 if x + 1 <= y else -1\n```\n\n    ### Test Cases:\n```python\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert choose_num(12, 12) == 12\nassert choose_num(13, 13) == 12\nassert choose_num(14, 14) == 14\nassert choose_num(15, 15) == 14\nassert choose_num(16, 16) == 16\nassert choose_num(17, 17) == 16\nassert choose_num(18, 18) == 18\nassert choose_num(19, 19) == 18\nassert choose_num(20, 20) == 20\nassert choose_num(21, 21) == 20\nassert choose_num(22, 22) == 22\nassert choose_num(23, 23) == 22\nassert choose_num(24, 24) == 24\nassert choose_num(25, 25) == 24\nassert choose_num(26, 26) == 26\nassert choose_num(27, 27) == 26\nassert choose_num(28, 28) == 28\nassert choose_num(29, 29) == 28\nassert choose_num(30, 30) == 30\nassert choose_num(31, 31) == 30\nassert choose_num(32, 32) == 32\nassert choose_num(33, 33) == 32\nassert choose_num(34, 34) == 34\nassert choose_num(35, 35) == 34\nassert choose_num(36, 36) == 36\nassert choose_num(37, 37) == 36\nassert choose_num(38, 38) == 38\nassert choose_num(39, 39) == 38\nassert choose_num(40, 40) == 40\nassert choose_num(41, 41) == 40\nassert choose_num(42, 42) == 42\nassert choose_num(43, 43) == 42\nassert choose_num(44, 44) == 44\nassert choose_num(45, 45) == 44\nassert choose_num(46, 46) == 46\nassert choose_num(47, 47) == 46\nassert choose_num(48, 48) == 48\nassert choose_num(49, 49) == 48\nassert choose_num(50, 50) == 50\nassert choose_num(51, 51) == 50\nassert choose_num(52, 52) == 52\nassert choose"}
