{"task_id": "HumanEval/141", "completion": "\n```python\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.index('.') == 0:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 9:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 10:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 11:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 12:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 13:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 14:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 15:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 16:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 17:\n            return 'No'\n        if file_name.index('.')", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.index('.') == 0:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 4:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 5:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 6:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 7:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 8:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 9:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 10:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 11:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 12:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 13:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 14:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 15:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 16:\n            return 'No'\n        if file_name.index('.') == len(file_name) - 17:\n            return 'No'\n        if file_name.index('.')"}
