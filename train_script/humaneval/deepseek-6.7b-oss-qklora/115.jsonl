{"task_id": "HumanEval/115", "completion": "\n    ```python\n    def max_fill(grid, capacity):\n        rows, cols = len(grid), len(grid[0])\n        buckets = [capacity] * cols\n        count = 0\n        for row in grid:\n            for i in range(cols):\n                if row[i] == 1:\n                    if buckets[i] > 0:\n                        buckets[i] -= 1\n                    else:\n                        count += 1\n                        buckets[i] = capacity - 1\n        return count\n    ```\n\n    ### Test Cases:\n    ```python\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0\n    ```\n\n    ### Explanation:\n    The solution uses a greedy approach to fill the wells with the buckets. It iterates through the grid, and for each well, it checks if the corresponding bucket has enough water to fill the well. If not, it increments the count and fills the bucket with the remaining water. Finally, it returns the count of times the buckets were lowered.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    def max_fill(grid, capacity):\n        rows, cols = len(grid), len(grid[0])\n        buckets = [capacity] * cols\n        count = 0\n        for row in grid:\n            for i in range(cols):\n                if row[i] == 1:\n                    if buckets[i] > 0:\n                        buckets[i] -= 1\n                    else:\n                        count += 1\n                        buckets[i] = capacity - 1\n        return count\n    ```\n\n    ### Test Cases:\n    ```python\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0\n    ```\n\n    ### Explanation:\n    The solution uses a greedy approach to fill the wells with the buckets. It iterates through the grid, and for each well, it checks if the corresponding bucket has enough water to fill the well. If not, it increments the count and fills the bucket with the remaining water. Finally, it returns the count of times the buckets were lowered."}
