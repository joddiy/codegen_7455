{"task_id": "HumanEval/145", "completion": "\n```python\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), abs(x)))\n```\n\n    ### Explanation:\n    The `order_by_points` function takes a list of integers as input and returns a sorted list of integers. The function uses the `sorted` function to sort the input list based on a custom key. The custom key is a tuple consisting of the sum of the digits of the absolute value of the input integer and the absolute value of the input integer itself. This ensures that items with similar sum of their digits are ordered based on their index in the original list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), abs(x)))\n```\n\n    ### Explanation:\n    The `order_by_points` function takes a list of integers as input and returns a sorted list of integers. The function uses the `sorted` function to sort the input list based on a custom key. The custom key is a tuple consisting of the sum of the digits of the absolute value of the input integer and the absolute value of the input integer itself. This ensures that items with similar sum of their digits are ordered based on their index in the original list."}
