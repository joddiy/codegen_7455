{"task_id": "HumanEval/132", "completion": "\n```python\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n```\n\n    ### Explanation:\n    The function uses a stack to keep track of the opening brackets. It iterates through the input string, adding opening brackets to the stack and popping them when it encounters a closing bracket. If the stack is empty at the end, it means that all opening brackets have been matched with closing brackets, and the function returns True. Otherwise, it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n```\n\n    ### Response:\n```python\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n```\n\n    ### Explanation:\n    The function uses a stack to keep track of the opening brackets. It iterates through the input string, adding opening brackets to the stack and popping them when it encounters a closing bracket. If the stack is empty at the end, it means that all opening brackets have been matched with closing brackets, and the function returns True. Otherwise, it returns False."}
