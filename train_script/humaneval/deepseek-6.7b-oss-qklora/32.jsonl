{"task_id": "HumanEval/32", "completion": "\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[n // 2] == 0:\n        raise ValueError(\"largest non zero coefficient must be non zero\")\n\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    d = xs[3]\n\n    x = (3 * c - b * b) / (9 * a)\n    y = (9 * b * c - 27 * a * d - 2 * b * b * b) / (54 * a * a)\n    z = (4 * pow(y, 3) - 27 * pow(x, 2) * pow(y, 2)) / (4 * pow(y, 3))\n    w = (pow(y, 2) - pow(x, 3)) / (9 * a)\n\n    r = (2 * pow(y, 2) - 9 * x * y + 27 * w) / (18 * pow(y, 3))\n\n    phi = (1 / 3) * math.acos(r)\n    theta = (1 / 3) * (2 * math.pi / 3)\n\n    x1 = (2 * math.sqrt(y) * math.cos(phi + theta)) - (b / (3 * a))\n    x2 = (2 * math.sqrt(y) * math.cos(phi - theta)) - (b / (3 * a))\n", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n```\n\n    ### Response:\n```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[n // 2] == 0:\n        raise ValueError(\"largest non zero coefficient must be non zero\")\n\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    d = xs[3]\n\n    x = (3 * c - b * b) / (9 * a)\n    y = (9 * b * c - 27 * a * d - 2 * b * b * b) / (54 * a * a)\n    z = (4 * pow(y, 3) - 27 * pow(x, 2) * pow(y, 2)) / (4 * pow(y, 3))\n    w = (pow(y, 2) - pow(x, 3)) / (9 * a)\n\n    r = (2 * pow(y, 2) - 9 * x * y + 27 * w) / (18 * pow(y, 3))\n\n    phi = (1 / 3) * math.acos(r)\n    theta = (1 / 3) * (2 * math.pi / 3)\n\n    x1 = (2 * math.sqrt(y) * math.cos(phi + theta)) - (b / (3 * a))\n    x2 = (2 * math.sqrt(y) * math.cos(phi - theta)) - (b / (3 * a))\n"}
