{"task_id": "HumanEval/4", "completion": "\n    ```python\n    from typing import List\n\n    def mean_absolute_deviation(numbers: List[float]) -> float:\n        \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n        around the mean of this dataset.\n        Mean Absolute Deviation is the average absolute difference between each\n        element and a centerpoint (mean in this case):\n        MAD = average | x - x_mean |\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n        \"\"\"\n        mean = sum(numbers) / len(numbers)\n        mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n        return mad\n    ```\n\n    ### Test Cases:\n    ```python\n    import unittest\n\n    class TestMeanAbsoluteDeviation(unittest.TestCase):\n        def test_mean_absolute_deviation(self):\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]), 1.0)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    from typing import List\n\n    def mean_absolute_deviation(numbers: List[float]) -> float:\n        \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n        around the mean of this dataset.\n        Mean Absolute Deviation is the average absolute difference between each\n        element and a centerpoint (mean in this case):\n        MAD = average | x - x_mean |\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n        \"\"\"\n        mean = sum(numbers) / len(numbers)\n        mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n        return mad\n    ```\n\n    ### Test Cases:\n    ```python\n    import unittest\n\n    class TestMeanAbsoluteDeviation(unittest.TestCase):\n        def test_mean_absolute_deviation(self):\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]), 1.0)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]), 1.2)\n            self.assertEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0"}
