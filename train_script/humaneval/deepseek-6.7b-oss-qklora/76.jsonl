{"task_id": "HumanEval/76", "completion": "\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x == 0:\n        return False\n    else:\n        for i in range(1, x):\n            if n**i == x:\n                return True\n            elif n**i > x:\n                return False\n```\n\n    ### Explanation:\n    The function `is_simple_power` takes two arguments `x` and `n`. It first checks if `x` is 1, in which case it returns `True`. Then it checks if `x` is 0, in which case it returns `False`. If `x` is neither 1 nor 0, it iterates through all integers from 1 to `x` and checks if `n**i` is equal to `x`. If it is, the function returns `True`; otherwise, it returns `False`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x == 0:\n        return False\n    else:\n        for i in range(1, x):\n            if n**i == x:\n                return True\n            elif n**i > x:\n                return False\n```\n\n    ### Explanation:\n    The function `is_simple_power` takes two arguments `x` and `n`. It first checks if `x` is 1, in which case it returns `True`. Then it checks if `x` is 0, in which case it returns `False`. If `x` is neither 1 nor 0, it iterates through all integers from 1 to `x` and checks if `n**i` is equal to `x`. If it is, the function returns `True`; otherwise, it returns `False`."}
