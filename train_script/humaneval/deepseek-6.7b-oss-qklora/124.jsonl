{"task_id": "HumanEval/124", "completion": "\n    ```python\n    def valid_date(date):\n        # Split the date string into month, day, and year\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False  # Invalid date format\n        month, day, year = parts\n        try:\n            month = int(month)\n            day = int(day)\n            year = int(year)\n        except ValueError:\n            return False  # Invalid date format\n        if month < 1 or month > 12:\n            return False  # Invalid month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False  # Invalid day for months 1, 3, 5, 7, 8, 10, 12\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False  # Invalid day for months 4, 6, 9, 11\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False  # Invalid day for month 2\n        return True  # Valid date\n    ```\n\n    This solution first splits the date string into month, day, and year. It then checks if the date is in the correct format and if the month, day, and year are valid. If all checks pass, the function returns True, indicating that the date is valid. If any check fails, the function returns False, indicating that the date is invalid.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n```\n\n    ### Response:\n    ```python\n    def valid_date(date):\n        # Split the date string into month, day, and year\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False  # Invalid date format\n        month, day, year = parts\n        try:\n            month = int(month)\n            day = int(day)\n            year = int(year)\n        except ValueError:\n            return False  # Invalid date format\n        if month < 1 or month > 12:\n            return False  # Invalid month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False  # Invalid day for months 1, 3, 5, 7, 8, 10, 12\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False  # Invalid day for months 4, 6, 9, 11\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False  # Invalid day for month 2\n        return True  # Valid date\n    ```\n\n    This solution first splits the date string into month, day, and year. It then checks if the date is in the correct format and if the month, day, and year are valid. If all checks pass, the function returns True, indicating that the date is valid. If any check fails, the function returns False, indicating that the date is invalid."}
