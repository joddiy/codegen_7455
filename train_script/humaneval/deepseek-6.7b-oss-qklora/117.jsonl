{"task_id": "HumanEval/117", "completion": "\n```python\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store the selected words\n    selected_words = []\n    # Iterate through the words\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        # Iterate through the characters in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                consonant_count += 1\n        # If the word contains exactly n consonants, add it to the selected words list\n        if consonant_count == n:\n            selected_words.append(word)\n    return selected_words\n```\n\n    ### Test Cases:\n```python\n# Test case 1\nprint(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n\n# Test case 2\nprint(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n\n# Test case 3\nprint(select_words(\"simple white space\", 2))  # Output: []\n\n# Test case 4\nprint(select_words(\"Hello world\", 4))  # Output: [\"world\"]\n\n# Test case 5\nprint(select_words(\"Uncle sam\", 3))  # Output: [\"Uncle\"]\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a solution to the following problem:\n```python\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n```\n\n    ### Response:\n```python\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store the selected words\n    selected_words = []\n    # Iterate through the words\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        # Iterate through the characters in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                consonant_count += 1\n        # If the word contains exactly n consonants, add it to the selected words list\n        if consonant_count == n:\n            selected_words.append(word)\n    return selected_words\n```\n\n    ### Test Cases:\n```python\n# Test case 1\nprint(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n\n# Test case 2\nprint(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n\n# Test case 3\nprint(select_words(\"simple white space\", 2))  # Output: []\n\n# Test case 4\nprint(select_words(\"Hello world\", 4))  # Output: [\"world\"]\n\n# Test case 5\nprint(select_words(\"Uncle sam\", 3))  # Output: [\"Uncle\"]\n```"}
