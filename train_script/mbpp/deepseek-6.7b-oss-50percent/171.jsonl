{"task_id": "Mbpp/311", "completion": "\n```python\ndef set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    mask = 1\n    while num & mask:\n        mask <<= 1\n    return num | mask\n```\n\nThe `set_left_most_unset_bit` function takes an integer `num` as input and returns the integer with the left most unset bit set. If the input number is 0, it returns 1. Otherwise, it iterates through the bits of the input number, starting from the least significant bit, and sets the first unset bit. The function uses bitwise operations to achieve this.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to set the left most unset bit. Your code should satisfy the following assertion:\n```python\nassert set_left_most_unset_bit(10) == 14\n```\n\n    ### Response:\n```python\ndef set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    mask = 1\n    while num & mask:\n        mask <<= 1\n    return num | mask\n```\n\nThe `set_left_most_unset_bit` function takes an integer `num` as input and returns the integer with the left most unset bit set. If the input number is 0, it returns 1. Otherwise, it iterates through the bits of the input number, starting from the least significant bit, and sets the first unset bit. The function uses bitwise operations to achieve this."}
