{"task_id": "Mbpp/793", "completion": "\n```python\ndef last(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1\n```\nThe `last` function uses binary search to find the last position of the element `x` in the sorted array `arr`. It initializes `left` and `right` pointers to the start and end of the array, respectively. It then iteratively updates the pointers based on the comparison of the middle element with `x`. Finally, it returns the index of the last occurrence of `x` in the array.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the last position of an element in a sorted array. Your code should satisfy the following assertion:\n```python\nassert last([1,2,3],1) == 0\n```\n\n    ### Response:\n```python\ndef last(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1\n```\nThe `last` function uses binary search to find the last position of the element `x` in the sorted array `arr`. It initializes `left` and `right` pointers to the start and end of the array, respectively. It then iteratively updates the pointers based on the comparison of the middle element with `x`. Finally, it returns the index of the last occurrence of `x` in the array."}
