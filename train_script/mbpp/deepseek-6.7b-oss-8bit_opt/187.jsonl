{"task_id": "Mbpp/407", "completion": "\n```python\ndef rearrange_bigger(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    for i in range(len(num_list)-2, -1, -1):\n        if num_list[i] < num_list[i+1]:\n            break\n    else:\n        return num  # If no break occurs, the number is already the biggest possible\n\n    for j in range(len(num_list)-1, i, -1):\n        if num_list[j] > num_list[i]:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            break\n\n    num_list[i+1:] = sorted(num_list[i+1:])\n    return int(''.join(num_list))\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n    ### Response:\n```python\ndef rearrange_bigger(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    for i in range(len(num_list)-2, -1, -1):\n        if num_list[i] < num_list[i+1]:\n            break\n    else:\n        return num  # If no break occurs, the number is already the biggest possible\n\n    for j in range(len(num_list)-1, i, -1):\n        if num_list[j] > num_list[i]:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            break\n\n    num_list[i+1:] = sorted(num_list[i+1:])\n    return int(''.join(num_list))\n```"}
