{"task_id": "Mbpp/739", "completion": "\n```python\ndef find_Index(n):\n    # Initialize the index\n    index = 1\n    # Initialize the triangular number\n    triangular_number = 1\n    # Initialize the previous triangular number\n    prev_triangular_number = 1\n    # Initialize the count of digits\n    count = 1\n    # Loop until the count of digits is equal to n\n    while count < n:\n        # Increment the index\n        index += 1\n        # Update the triangular number\n        triangular_number = prev_triangular_number + index\n        # Update the previous triangular number\n        prev_triangular_number = triangular_number\n        # Update the count of digits\n        count = len(str(triangular_number))\n    # Return the index\n    return index\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/. Your code should satisfy the following assertion:\n```python\nassert find_Index(2) == 4\n```\n\n    ### Response:\n```python\ndef find_Index(n):\n    # Initialize the index\n    index = 1\n    # Initialize the triangular number\n    triangular_number = 1\n    # Initialize the previous triangular number\n    prev_triangular_number = 1\n    # Initialize the count of digits\n    count = 1\n    # Loop until the count of digits is equal to n\n    while count < n:\n        # Increment the index\n        index += 1\n        # Update the triangular number\n        triangular_number = prev_triangular_number + index\n        # Update the previous triangular number\n        prev_triangular_number = triangular_number\n        # Update the count of digits\n        count = len(str(triangular_number))\n    # Return the index\n    return index\n```"}
