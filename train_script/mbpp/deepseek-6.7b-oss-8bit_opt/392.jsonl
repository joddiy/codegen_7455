{"task_id": "Mbpp/803", "completion": "\n```python\nimport math\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False  # Negative numbers cannot be perfect squares\n    sqrt_num = int(math.sqrt(num))\n    return sqrt_num * sqrt_num == num\n```\nThe `is_perfect_square` function first checks if the number is negative, in which case it returns False. Then, it calculates the square root of the number using the `math.sqrt` function and checks if the square of the square root is equal to the original number. If it is, the function returns True, indicating that the number is a perfect square; otherwise, it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/. Your code should satisfy the following assertion:\n```python\nassert not is_perfect_square(10)\n```\n\n    ### Response:\n```python\nimport math\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False  # Negative numbers cannot be perfect squares\n    sqrt_num = int(math.sqrt(num))\n    return sqrt_num * sqrt_num == num\n```\nThe `is_perfect_square` function first checks if the number is negative, in which case it returns False. Then, it calculates the square root of the number using the `math.sqrt` function and checks if the square of the square root is equal to the original number. If it is, the function returns True, indicating that the number is a perfect square; otherwise, it returns False."}
