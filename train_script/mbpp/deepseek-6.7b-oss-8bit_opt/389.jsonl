{"task_id": "Mbpp/799", "completion": "\n```python\ndef left_rotate(num, d):\n    # Shift the bits to the left by d positions\n    left_shifted = (num << d) & 0xFFFFFFFF  # Mask to ensure 32-bit representation\n    # Shift the bits to the right by (32 - d) positions to bring the bits back to the original position\n    right_shifted = (num >> (32 - d)) & 0xFFFFFFFF\n    # Combine the left and right shifted bits\n    return (left_shifted | right_shifted) & 0xFFFFFFFF  # Mask to ensure 32-bit representation\n```\n\nThe `left_rotate` function takes a number `num` and a shift distance `d` as input. It first shifts the bits to the left by `d` positions using bitwise left shift operator `<<`. Then, it shifts the bits to the right by `(32 - d)` positions to bring the bits back to the original position. Finally, it combines the left and right shifted bits using bitwise OR operator `|` and masks the result to ensure a 32-bit representation.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n    ### Response:\n```python\ndef left_rotate(num, d):\n    # Shift the bits to the left by d positions\n    left_shifted = (num << d) & 0xFFFFFFFF  # Mask to ensure 32-bit representation\n    # Shift the bits to the right by (32 - d) positions to bring the bits back to the original position\n    right_shifted = (num >> (32 - d)) & 0xFFFFFFFF\n    # Combine the left and right shifted bits\n    return (left_shifted | right_shifted) & 0xFFFFFFFF  # Mask to ensure 32-bit representation\n```\n\nThe `left_rotate` function takes a number `num` and a shift distance `d` as input. It first shifts the bits to the left by `d` positions using bitwise left shift operator `<<`. Then, it shifts the bits to the right by `(32 - d)` positions to bring the bits back to the original position. Finally, it combines the left and right shifted bits using bitwise OR operator `|` and masks the result to ensure a 32-bit representation."}
