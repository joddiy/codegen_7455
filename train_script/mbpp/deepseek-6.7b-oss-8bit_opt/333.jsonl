{"task_id": "Mbpp/733", "completion": "\n```python\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left < len(arr) and arr[left] == target else -1\n```\n\nThe `find_first_occurrence` function uses binary search to find the index of the first occurrence of the given number in the sorted array. It initializes two pointers, `left` and `right`, to the start and end of the array, respectively. It then iteratively updates the pointers based on the comparison of the middle element with the target number. If the middle element is less than the target, the left pointer is updated to the right of the middle; otherwise, the right pointer is updated to the left of the middle. Finally, the function returns the index of the first occurrence of the target number if found, or -1 if not found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following assertion:\n```python\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n    ### Response:\n```python\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left < len(arr) and arr[left] == target else -1\n```\n\nThe `find_first_occurrence` function uses binary search to find the index of the first occurrence of the given number in the sorted array. It initializes two pointers, `left` and `right`, to the start and end of the array, respectively. It then iteratively updates the pointers based on the comparison of the middle element with the target number. If the middle element is less than the target, the left pointer is updated to the right of the middle; otherwise, the right pointer is updated to the left of the middle. Finally, the function returns the index of the first occurrence of the target number if found, or -1 if not found."}
