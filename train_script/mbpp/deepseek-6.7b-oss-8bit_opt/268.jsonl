{"task_id": "Mbpp/580", "completion": "\n```python\ndef extract_even(nested_tuple):\n    even_elements = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            even_elements.append(extract_even(item))\n        elif item % 2 == 0:\n            even_elements.append(item)\n    return tuple(even_elements)\n```\n\nThe `extract_even` function takes a nested mixed tuple as input and recursively iterates through its elements. For each element, it checks if it is a tuple. If it is, the function calls itself recursively to extract even elements from the nested tuple. If the element is not a tuple, it checks if it is even and appends it to the `even_elements` list. Finally, the function returns a tuple of even elements extracted from the nested mixed tuple.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to remove uneven elements in the nested mixed tuple. Your code should satisfy the following assertion:\n```python\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\n    ### Response:\n```python\ndef extract_even(nested_tuple):\n    even_elements = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            even_elements.append(extract_even(item))\n        elif item % 2 == 0:\n            even_elements.append(item)\n    return tuple(even_elements)\n```\n\nThe `extract_even` function takes a nested mixed tuple as input and recursively iterates through its elements. For each element, it checks if it is a tuple. If it is, the function calls itself recursively to extract even elements from the nested tuple. If the element is not a tuple, it checks if it is even and appends it to the `even_elements` list. Finally, the function returns a tuple of even elements extracted from the nested mixed tuple."}
