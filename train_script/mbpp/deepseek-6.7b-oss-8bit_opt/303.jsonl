{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def is_divisible_subset(subset):\n        for i in range(len(subset)):\n            for j in range(i + 1, len(subset)):\n                if not is_divisible(subset[i], subset[j]):\n                    return False\n        return True\n\n    def backtrack(start, current_subset):\n        nonlocal max_subset_size\n        if is_divisible_subset(current_subset):\n            max_subset_size = max(max_subset_size, len(current_subset))\n        for i in range(start, len(numbers)):\n            backtrack(i + 1, current_subset + [numbers[i]])\n\n    max_subset_size = 0\n    backtrack(0, [])\n    return max_subset_size\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def is_divisible_subset(subset):\n        for i in range(len(subset)):\n            for j in range(i + 1, len(subset)):\n                if not is_divisible(subset[i], subset[j]):\n                    return False\n        return True\n\n    def backtrack(start, current_subset):\n        nonlocal max_subset_size\n        if is_divisible_subset(current_subset):\n            max_subset_size = max(max_subset_size, len(current_subset))\n        for i in range(start, len(numbers)):\n            backtrack(i + 1, current_subset + [numbers[i]])\n\n    max_subset_size = 0\n    backtrack(0, [])\n    return max_subset_size\n```"}
