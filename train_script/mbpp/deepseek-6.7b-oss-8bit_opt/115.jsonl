{"task_id": "Mbpp/239", "completion": "\n```python\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 if m >= 2 else 0\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 1 if m >= 2 else 0\n        for i in range(3, n + 1):\n            for j in range(2, m + 1):\n                if j >= i:\n                    dp[i] += dp[i - 1]\n                else:\n                    dp[i] += dp[i - 1] + dp[i - 2]\n        return dp[n]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\nThe `get_total_number_of_sequences` function uses dynamic programming to calculate the total number of sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. The function initializes the base cases for n = 1 and n = 2 and then iterates through the remaining cases to calculate the total number of sequences. The assertion at the end verifies the correctness of the function.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. Your code should satisfy the following assertion:\n```python\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\n    ### Response:\n```python\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 if m >= 2 else 0\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 1 if m >= 2 else 0\n        for i in range(3, n + 1):\n            for j in range(2, m + 1):\n                if j >= i:\n                    dp[i] += dp[i - 1]\n                else:\n                    dp[i] += dp[i - 1] + dp[i - 2]\n        return dp[n]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\nThe `get_total_number_of_sequences` function uses dynamic programming to calculate the total number of sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. The function initializes the base cases for n = 1 and n = 2 and then iterates through the remaining cases to calculate the total number of sequences. The assertion at the end verifies the correctness of the function."}
