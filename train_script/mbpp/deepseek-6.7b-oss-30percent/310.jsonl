{"task_id": "Mbpp/630", "completion": "\n```python\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n```\nThe `get_coordinates` function takes a coordinate tuple as input and returns a list of adjacent coordinates. It iterates through the adjacent coordinates and appends them to the `adjacent_coordinates` list, excluding the original coordinate. Finally, it returns the list of adjacent coordinates.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple. Your code should satisfy the following assertion:\n```python\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n```\n\n    ### Response:\n```python\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n```\nThe `get_coordinates` function takes a coordinate tuple as input and returns a list of adjacent coordinates. It iterates through the adjacent coordinates and appends them to the `adjacent_coordinates` list, excluding the original coordinate. Finally, it returns the list of adjacent coordinates."}
