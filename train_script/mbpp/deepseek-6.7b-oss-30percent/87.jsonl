{"task_id": "Mbpp/141", "completion": "\n```python\ndef pancake_sort(lst):\n    def flip(arr, k):\n        i = 0\n        while i < k / 2:\n            arr[i], arr[k - i - 1] = arr[k - i - 1], arr[i]\n            i += 1\n\n    def find_max(arr, n):\n        mi = 0\n        for i in range(n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    n = len(lst)\n    current_size = n\n    while current_size > 1:\n        mi = find_max(lst, current_size)\n        if mi != current_size - 1:\n            flip(lst, mi + 1)\n            flip(lst, current_size)\n        current_size -= 1\n    return lst\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n```\n\n    ### Response:\n```python\ndef pancake_sort(lst):\n    def flip(arr, k):\n        i = 0\n        while i < k / 2:\n            arr[i], arr[k - i - 1] = arr[k - i - 1], arr[i]\n            i += 1\n\n    def find_max(arr, n):\n        mi = 0\n        for i in range(n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    n = len(lst)\n    current_size = n\n    while current_size > 1:\n        mi = find_max(lst, current_size)\n        if mi != current_size - 1:\n            flip(lst, mi + 1)\n            flip(lst, current_size)\n        current_size -= 1\n    return lst\n```"}
