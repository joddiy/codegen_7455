{"task_id": "Mbpp/793", "completion": "\n```python\ndef last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n    return -1\n```\nThe `last` function uses binary search to find the last position of the element `x` in the sorted array `arr`. It initializes `low` and `high` to the first and last indices of the array, respectively. It then enters a loop where it calculates the middle index and compares the element at that index with `x`. If the element at the middle index is greater than `x`, it updates `high` to the middle index - 1. If the element at the middle index is less than `x`, it updates `low` to the middle index + 1. If the element at the middle index is equal to `x`, it checks if it is the last occurrence of `x` in the array. If it is, it returns the index; otherwise, it updates `low` to the middle index + 1. If the element is not found, it returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the last position of an element in a sorted array. Your code should satisfy the following assertion:\n```python\nassert last([1,2,3],1) == 0\n```\n\n    ### Response:\n```python\ndef last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n    return -1\n```\nThe `last` function uses binary search to find the last position of the element `x` in the sorted array `arr`. It initializes `low` and `high` to the first and last indices of the array, respectively. It then enters a loop where it calculates the middle index and compares the element at that index with `x`. If the element at the middle index is greater than `x`, it updates `high` to the middle index - 1. If the element at the middle index is less than `x`, it updates `low` to the middle index + 1. If the element at the middle index is equal to `x`, it checks if it is the last occurrence of `x` in the array. If it is, it returns the index; otherwise, it updates `low` to the middle index + 1. If the element is not found, it returns -1."}
