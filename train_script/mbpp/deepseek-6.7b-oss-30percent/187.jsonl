{"task_id": "Mbpp/407", "completion": "\n```python\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return n  # If no break occurs, the number is already the biggest possible\n\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n\n    return int(''.join(digits))\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n    ### Response:\n```python\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return n  # If no break occurs, the number is already the biggest possible\n\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n\n    return int(''.join(digits))\n```"}
