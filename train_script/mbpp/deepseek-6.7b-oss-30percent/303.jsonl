{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    numbers.sort()\n    subsets = [1] * len(numbers)\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:\n                subsets[i] = max(subsets[i], subsets[j] + 1)\n    return max(subsets)\n```\n\nThe `largest_subset` function first sorts the input list of numbers. It then initializes a list `subsets` to store the size of the largest subset ending at each index. It iterates through the list, updating the `subsets` list based on the conditions specified in the problem description. Finally, it returns the maximum value in the `subsets` list, which represents the size of the largest subset that satisfies the given condition.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(numbers):\n    numbers.sort()\n    subsets = [1] * len(numbers)\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:\n                subsets[i] = max(subsets[i], subsets[j] + 1)\n    return max(subsets)\n```\n\nThe `largest_subset` function first sorts the input list of numbers. It then initializes a list `subsets` to store the size of the largest subset ending at each index. It iterates through the list, updating the `subsets` list based on the conditions specified in the problem description. Finally, it returns the maximum value in the `subsets` list, which represents the size of the largest subset that satisfies the given condition."}
