{"task_id": "Mbpp/603", "completion": "\n```python\ndef get_ludic(n):\n    ludic_numbers = []\n    for num in range(1, n+1):\n        if is_ludic(num):\n            ludic_numbers.append(num)\n    return ludic_numbers\n\ndef is_ludic(num):\n    if num == 1:\n        return True\n    while num > 1:\n        if num % 2 == 0:\n            num = num // 2\n        elif num % 3 == 0:\n            num = num // 3\n        elif num % 5 == 0:\n            num = num // 5\n        else:\n            return False\n    return True\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to get all lucid numbers smaller than or equal to a given integer. Your code should satisfy the following assertion:\n```python\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n```\n\n    ### Response:\n```python\ndef get_ludic(n):\n    ludic_numbers = []\n    for num in range(1, n+1):\n        if is_ludic(num):\n            ludic_numbers.append(num)\n    return ludic_numbers\n\ndef is_ludic(num):\n    if num == 1:\n        return True\n    while num > 1:\n        if num % 2 == 0:\n            num = num // 2\n        elif num % 3 == 0:\n            num = num // 3\n        elif num % 5 == 0:\n            num = num // 5\n        else:\n            return False\n    return True\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n```"}
