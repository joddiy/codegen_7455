{"task_id": "Mbpp/111", "completion": "\n```python\ndef common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n\n    return list(common_elements)\n```\n\nThe `common_in_nested_lists` function takes a list of nested lists as input and returns a list of common elements present in all the nested lists. It first initializes `common_elements` with the elements of the first nested list. Then, it iterates through the remaining nested lists and finds the intersection of `common_elements` with each list. Finally, it returns the list of common elements found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the common elements in given nested lists. Your code should satisfy the following assertion:\n```python\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n```\n\n    ### Response:\n```python\ndef common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n\n    return list(common_elements)\n```\n\nThe `common_in_nested_lists` function takes a list of nested lists as input and returns a list of common elements present in all the nested lists. It first initializes `common_elements` with the elements of the first nested list. Then, it iterates through the remaining nested lists and finds the intersection of `common_elements` with each list. Finally, it returns the list of common elements found."}
