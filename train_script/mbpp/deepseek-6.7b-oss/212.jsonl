{"task_id": "Mbpp/438", "completion": "\n```python\ndef count_bidirectional(tuples):\n    bidirectional_count = 0\n    seen_pairs = set()\n    \n    for pair in tuples:\n        if (pair[1], pair[0]) in seen_pairs:\n            bidirectional_count += 1\n        else:\n            seen_pairs.add(pair)\n    \n    return bidirectional_count\n```\n\nThe `count_bidirectional` function iterates through the input list of tuples and checks if the reverse of each pair has been seen before. If it has, the bidirectional count is incremented. The seen pairs are stored in a set to efficiently check for reverse pairs. Finally, the function returns the count of bidirectional tuple pairs.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to count bidirectional tuple pairs. Your code should satisfy the following assertion:\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n    ### Response:\n```python\ndef count_bidirectional(tuples):\n    bidirectional_count = 0\n    seen_pairs = set()\n    \n    for pair in tuples:\n        if (pair[1], pair[0]) in seen_pairs:\n            bidirectional_count += 1\n        else:\n            seen_pairs.add(pair)\n    \n    return bidirectional_count\n```\n\nThe `count_bidirectional` function iterates through the input list of tuples and checks if the reverse of each pair has been seen before. If it has, the bidirectional count is incremented. The seen pairs are stored in a set to efficiently check for reverse pairs. Finally, the function returns the count of bidirectional tuple pairs."}
