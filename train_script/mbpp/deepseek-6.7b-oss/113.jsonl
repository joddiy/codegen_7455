{"task_id": "Mbpp/237", "completion": "\n```python\ndef check_occurences(tuples_list):\n    occurences_dict = {}\n    for tup in tuples_list:\n        if tup in occurences_dict:\n            occurences_dict[tup] += 1\n        else:\n            occurences_dict[tup] = 1\n    return occurences_dict\n```\n\nThe `check_occurences` function iterates through the input list of tuples and maintains a dictionary `occurences_dict` to store the count of each unique tuple. For each tuple in the input list, it checks if the tuple is already a key in the dictionary. If it is, the count for that tuple is incremented by 1. If not, a new key-value pair is added to the dictionary with a count of 1. Finally, the function returns the populated dictionary.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. Your code should satisfy the following assertion:\n```python\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\n    ### Response:\n```python\ndef check_occurences(tuples_list):\n    occurences_dict = {}\n    for tup in tuples_list:\n        if tup in occurences_dict:\n            occurences_dict[tup] += 1\n        else:\n            occurences_dict[tup] = 1\n    return occurences_dict\n```\n\nThe `check_occurences` function iterates through the input list of tuples and maintains a dictionary `occurences_dict` to store the count of each unique tuple. For each tuple in the input list, it checks if the tuple is already a key in the dictionary. If it is, the count for that tuple is incremented by 1. If not, a new key-value pair is added to the dictionary with a count of 1. Finally, the function returns the populated dictionary."}
