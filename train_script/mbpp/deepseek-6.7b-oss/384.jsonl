{"task_id": "Mbpp/793", "completion": "\n```python\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1 if left > 0 else -1\n```\n\nThe `last` function uses binary search to find the last position of the target element in the sorted array. It initializes two pointers, `left` and `right`, to the start and end of the array, respectively. It then iteratively updates the pointers based on the comparison of the middle element with the target. If the middle element is less than or equal to the target, the `left` pointer is updated to the right of the middle element; otherwise, the `right` pointer is updated to the left of the middle element. This process continues until the `left` pointer becomes greater than the `right` pointer, at which point the function returns the index of the last occurrence of the target element. If the target element is not found, the function returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the last position of an element in a sorted array. Your code should satisfy the following assertion:\n```python\nassert last([1,2,3],1) == 0\n```\n\n    ### Response:\n```python\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1 if left > 0 else -1\n```\n\nThe `last` function uses binary search to find the last position of the target element in the sorted array. It initializes two pointers, `left` and `right`, to the start and end of the array, respectively. It then iteratively updates the pointers based on the comparison of the middle element with the target. If the middle element is less than or equal to the target, the `left` pointer is updated to the right of the middle element; otherwise, the `right` pointer is updated to the left of the middle element. This process continues until the `left` pointer becomes greater than the `right` pointer, at which point the function returns the index of the last occurrence of the target element. If the target element is not found, the function returns -1."}
