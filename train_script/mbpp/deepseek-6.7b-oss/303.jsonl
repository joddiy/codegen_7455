{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, subset, index):\n        if index == len(numbers):\n            return len(subset)\n        else:\n            include_index = find_subset(numbers, subset, index + 1)\n            for i in range(len(subset)):\n                if is_divisible(numbers[index], subset[i]):\n                    subset[i] = numbers[index]\n                    break\n            else:\n                subset.append(numbers[index])\n            exclude_index = find_subset(numbers, subset, index + 1)\n            return max(include_index, exclude_index)\n\n    return find_subset(numbers, [], 0)\n```\n\nThe `largest_subset` function first defines a helper function `is_divisible` to check if two numbers are divisible. Then, it defines another helper function `find_subset` to recursively find the largest subset of numbers that satisfy the divisibility condition. The `find_subset` function takes the list of numbers, the current subset, and the index to consider. It either includes the current number in the subset or excludes it, and recursively calls itself with the updated subset. Finally, the `largest_subset` function returns the size of the largest subset found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, subset, index):\n        if index == len(numbers):\n            return len(subset)\n        else:\n            include_index = find_subset(numbers, subset, index + 1)\n            for i in range(len(subset)):\n                if is_divisible(numbers[index], subset[i]):\n                    subset[i] = numbers[index]\n                    break\n            else:\n                subset.append(numbers[index])\n            exclude_index = find_subset(numbers, subset, index + 1)\n            return max(include_index, exclude_index)\n\n    return find_subset(numbers, [], 0)\n```\n\nThe `largest_subset` function first defines a helper function `is_divisible` to check if two numbers are divisible. Then, it defines another helper function `find_subset` to recursively find the largest subset of numbers that satisfy the divisibility condition. The `find_subset` function takes the list of numbers, the current subset, and the index to consider. It either includes the current number in the subset or excludes it, and recursively calls itself with the updated subset. Finally, the `largest_subset` function returns the size of the largest subset found."}
