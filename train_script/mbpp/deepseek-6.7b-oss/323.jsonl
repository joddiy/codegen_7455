{"task_id": "Mbpp/721", "completion": "\n```python\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)\n```\n\nThe solution uses dynamic programming to calculate the maximum average over all existing paths in the given square matrix. It initializes a 2D array `dp` to store the cumulative sum of costs from the top-left cell to each cell in the matrix. Then, it iterates through the matrix to fill in the `dp` array based on the maximum cumulative sum from the top or left cell. Finally, it returns the average of the cumulative sum divided by the total number of cells in the matrix.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path. Your code should satisfy the following assertion:\n```python\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\n    ### Response:\n```python\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)\n```\n\nThe solution uses dynamic programming to calculate the maximum average over all existing paths in the given square matrix. It initializes a 2D array `dp` to store the cumulative sum of costs from the top-left cell to each cell in the matrix. Then, it iterates through the matrix to fill in the `dp` array based on the maximum cumulative sum from the top or left cell. Finally, it returns the average of the cumulative sum divided by the total number of cells in the matrix."}
