{"task_id": "Mbpp/71", "completion": "\n```python\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(0, len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    return arr\n```\n\nThe `comb_sort` function takes an array `arr` as input and sorts it using the comb sort algorithm. It initializes the gap as the length of the array and the shrink factor as 1.3. It then iterates through the array, comparing elements with a gap between them and swapping them if they are in the wrong order. The gap is updated based on the shrink factor, and the process continues until the array is sorted. Finally, the sorted array is returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n    ### Response:\n```python\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(0, len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    return arr\n```\n\nThe `comb_sort` function takes an array `arr` as input and sorts it using the comb sort algorithm. It initializes the gap as the length of the array and the shrink factor as 1.3. It then iterates through the array, comparing elements with a gap between them and swapping them if they are in the wrong order. The gap is updated based on the shrink factor, and the process continues until the array is sorted. Finally, the sorted array is returned."}
