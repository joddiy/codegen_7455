{"task_id": "Mbpp/473", "completion": "\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n```\n\nThe `tuple_intersection` function iterates through each tuple in `tuple_list1` and checks if any tuple in `tuple_list2` has the same elements as the current tuple. If a match is found, the tuple is added to the `intersection` set. Finally, the function returns the set of tuples that have the same elements in both lists, regardless of their order.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should satisfy the following assertion:\n```python\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n    ### Response:\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n```\n\nThe `tuple_intersection` function iterates through each tuple in `tuple_list1` and checks if any tuple in `tuple_list2` has the same elements as the current tuple. If a match is found, the tuple is added to the `intersection` set. Finally, the function returns the set of tuples that have the same elements in both lists, regardless of their order."}
