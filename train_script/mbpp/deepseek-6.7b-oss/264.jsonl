{"task_id": "Mbpp/576", "completion": "\n```python\ndef is_Sub_Array(arr1, arr2):\n    if len(arr2) > len(arr1):\n        return False\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i + len(arr2)] == arr2:\n            return True\n    return False\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\nThe `is_Sub_Array` function takes two lists as input and checks whether the second list is a sublist of the first list. It iterates through the first list and checks for a match with the second list. If a match is found, it returns `True`; otherwise, it returns `False`. The provided assertion checks the function's correctness by comparing the result with the expected output.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to check whether a list is sublist of another or not. Your code should satisfy the following assertion:\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\n    ### Response:\n```python\ndef is_Sub_Array(arr1, arr2):\n    if len(arr2) > len(arr1):\n        return False\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i + len(arr2)] == arr2:\n            return True\n    return False\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\nThe `is_Sub_Array` function takes two lists as input and checks whether the second list is a sublist of the first list. It iterates through the first list and checks for a match with the second list. If a match is found, it returns `True`; otherwise, it returns `False`. The provided assertion checks the function's correctness by comparing the result with the expected output."}
