{"task_id": "Mbpp/632", "completion": "\n```python\ndef move_zero(lst):\n    # Initialize a variable to keep track of the position to place non-zero elements\n    non_zero_pos = 0\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # If the current element is non-zero, move it to the position indicated by non_zero_pos\n        if lst[i] != 0:\n            lst[non_zero_pos], lst[i] = lst[i], lst[non_zero_pos]\n            non_zero_pos += 1\n    \n    return lst\n```\n\nThe `move_zero` function iterates through the list, moving non-zero elements to the front and zero elements to the end. It uses a single pass to achieve this in O(n) time complexity, where n is the length of the list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to move all zeroes to the end of the given list. Your code should satisfy the following assertion:\n```python\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n```\n\n    ### Response:\n```python\ndef move_zero(lst):\n    # Initialize a variable to keep track of the position to place non-zero elements\n    non_zero_pos = 0\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # If the current element is non-zero, move it to the position indicated by non_zero_pos\n        if lst[i] != 0:\n            lst[non_zero_pos], lst[i] = lst[i], lst[non_zero_pos]\n            non_zero_pos += 1\n    \n    return lst\n```\n\nThe `move_zero` function iterates through the list, moving non-zero elements to the front and zero elements to the end. It uses a single pass to achieve this in O(n) time complexity, where n is the length of the list."}
