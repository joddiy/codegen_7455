{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(num):\n    if num < 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return True\n    return False\n\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(input_string):\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    if all(char.islower() or char == '_' for char in input_string):\n        return True\n    else:\n        return False\n\n# Test the function with the given assertion\nassert text_lowercase_underscore(\"aab_cbbbc\") == (True)"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(input_string):\n    return input_string.count('std')\n\n# Test the function\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "completion": "def check_type(tup):\n    data_type = type(tup[0])\n    for element in tup:\n        if not isinstance(element, data_type):\n            return False\n    return True"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    # Find the index of the first occurrence of x in arr\n    i = binary_search(arr, 0, n-1, x)\n \n    # If element is not present, return false\n    if i == -1:\n        return False\n \n    # Check if the element occurs more than n/2 times\n    if (i + n//2 <= n-1) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n \n# Function to find the index of the first occurrence of x in arr\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid - 1), x)\n    return -1\n \n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(input_string):\n    return input_string[::2]"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            j += 1\n    return arr"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(input_string, replace_char):\n    return input_string.replace(' ', replace_char)\n\n# Test the function\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    lst.sort(reverse=True)  # Sort the list in descending order\n    return lst[:n]  # Return the first n items from the sorted list"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area\n\n# Test the function\nassert math.isclose(lateralsuface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    return n | 0b10101010101010101010101010101010  # Set all even bits of n"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(tuples_list):\n    occurences_dict = {}\n    for tup in tuples_list:\n        if tup in occurences_dict:\n            occurences_dict[tup] += 1\n        else:\n            occurences_dict[tup] = 1\n    return occurences_dict"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return min(m // 2, 2)\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = min(m // 2, 2)\n        for i in range(3, n + 1):\n            dp[i] = sum(dp[1:i-1])\n            if dp[i] > m:\n                dp[i] = m\n        return dp[n]"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\")==18"}
{"task_id": "Mbpp/244", "completion": "import math\n\ndef next_Perfect_Square(num):\n    # Find the square root of the given number\n    sqrt_num = math.sqrt(num)\n    \n    # Check if the square root is an integer\n    if sqrt_num.is_integer():\n        # If it is, return the square of the square root\n        return int(sqrt_num) ** 2\n    else:\n        # If not, find the next integer greater than the square root\n        next_int = int(sqrt_num) + 1\n        # Return the square of the next integer\n        return next_int ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    clean_chars = [char for char in str1 if char not in str2]\n    return ''.join(clean_chars)\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 2:\n                dp[i][j] = 2 if s[i] == s[j] else 1\n            else:\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    intersection = list(set1.intersection(set2))\n    return intersection"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, element):\n    return tup.count(element)\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(complex_number):\n    polar_coordinates = cmath.polar(complex_number)\n    return polar_coordinates\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))\n\n# Test the function\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)\n\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(num1, num2):\n    return (num2, num1)\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((max(tuple1[i][0], tuple2[i][0]), max(tuple1[i][1], tuple2[i][1])))\n    return tuple(result)"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True  # Found a duplicate\n        seen.add(num)\n    return False  # No duplicates found"}
{"task_id": "Mbpp/260", "completion": "\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(n):\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 13\n        if n == 7:\n            return 17\n        if n == 8:\n            return 19\n        if n == 9:\n            return 23\n        if n == 10:\n            return 29\n        if n == 11:\n            return 31\n        if n == 12:\n            return 37\n        if n == 13:\n            return 41\n        if n == 14:\n            return 43\n        if n == 15:\n            return 47\n        if n == 16:\n            return 53\n        if n == 17:\n            return 59\n        if n == 18:\n            return 61\n        if n == 19:\n            return 67\n        if n == 20:\n            return 71\n        if n == 21:\n            return 73\n        if n == 22:\n            return 79\n        if n == 23:\n            return 83\n        if n == 24:\n            return 89\n        if n == 25:\n            return 97\n        if n == 26:\n            return 101\n        if n == 27:\n            return 103\n        if n == 28:\n            return 107\n        if n == 29:\n            return 109\n        if n == 30:\n            return 113\n        if n == 31:\n            return 127\n        if n == 32:\n            return 131\n        if n == 33:\n            return 137\n        if n == 34:\n            return 139\n        if n == 35:\n            return 149\n        if n == 36:\n            return 151\n        if n == 37:\n            return 157\n        if n == 38:\n            return 163\n        if n == 39:\n            return 167\n        if n == 40:\n            return 173\n        if n == 41:\n            return 179\n        if n == 42:\n            return 181\n        if n == 43:\n            return 191\n        if n == 44:\n            return 193\n        if n == 45:\n            return 197\n        if n == 46:\n            return 199\n        if n == 47:\n            return 211\n        if n == 48:\n            return 223\n        if n == 49:\n            return 227\n        if n == 50:\n            return 229\n        if n == 51:\n            return 233\n        if n == 52:\n            return 239\n        if n == 53:\n            return 241\n        if n == 54:\n            return 251\n        if n == 55:\n            return 257\n        if n == 56:\n            return 263\n        if n == 57:\n            return 269\n        if n == 58:\n            return 271\n        if n == 59:\n            return 277"}
{"task_id": "Mbpp/261", "completion": "def division_elements(tuple1, tuple2):\n    result = tuple(a // b for a, b in zip(tuple1, tuple2))\n    return result\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_age):\n    return human_age * 7  # Assuming a linear conversion rate of 1 human year to 7 dog years"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    odd_numbers = [2*i + 1 for i in range(n)]\n    return sum(num**2 for num in odd_numbers)\n\n# Test the function\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(lst[1::2])"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    # Check if the number is divisible by 3\n    if n % 3 != 0:\n        return False\n    \n    # Check if the number is divisible by 9\n    if n % 9 != 0:\n        return False\n    \n    # If both conditions are satisfied, the number is woodball\n    return True"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 2*i**5\n    return sum\n\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(tuple_list):\n    return [tup[-1] for tup in tuple_list]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    result = tuple(x - y for x, y in zip(tuple1, tuple2))\n    return result\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Iterate through the range of n\n    for i in range(n+1):\n        # Calculate the binomial coefficient using the formula (n k) = nCk = n!/kNor(n-k)!\n        binomial_coeff = factorial(n) // (factorial(i) * factorial(n-i))\n        \n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_sum += binomial_coeff\n    \n    return even_sum"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (2 * n - 1)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    \n    # Check if the number is one less than twice its reverse\n    return num == (reversed_num * 2) - 1\n\n# Test the function with the given assertion\nassert check(70) == False"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]\n\n# Test the function\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"}
{"task_id": "Mbpp/283", "completion": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        digit_count = num_str.count(digit)\n        if digit_count > int(digit):\n            return False\n    return True\n\nassert validate(1234) == True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)\n\n# Test the function\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"task_id": "Mbpp/285", "completion": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function\nassert text_match_two_three(\"ac\") == False"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    def kadane(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    total_sum = sum(arr)\n    max_sum = kadane(arr)\n    max_sum_repeated = max(max_sum, total_sum * max(0, k - 2) + kadane([arr[i] for i in range(1, n * k - 1)]))\n    return max_sum_repeated"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "completion": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "completion": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(side1, side2):\n    return math.sqrt(side1**2 + side2**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = float('-inf')  # Initialize max_val to negative infinity\n    for item in lst:\n        if isinstance(item, (int, float)):  # Check if the item is a number\n            max_val = max(max_val, item)  # Update max_val if the item is greater\n    return max_val"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the maximum number\n    max_num = int(''.join(map(str, sorted_digits)))\n    \n    return max_num"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    divisors_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\nassert sum_div(8)==7"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_Inv_Count([1,20,6,4,5]) == 5"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(tuples_list):\n    aggregate_dict = {}\n    for name, score in tuples_list:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return (max_name, aggregate_dict[max_name])"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    # Base case: n = 1\n    if n == 1:\n        return 2.0\n    else:\n        # Recursive case: count_binary_seq(n) = 2 * count_binary_seq(n-1)\n        return 2 * count_binary_seq(n-1)\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n\n# Test the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()\n    return None"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = 0\n    for j in range(i+1, n):\n        if arr[j] > arr[i] and j > k:\n            max_sum = max(max_sum, arr[j])\n    return max_sum"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, num):\n    products = []\n    for i in range(num):\n        max_product = 0\n        max_index1 = 0\n        max_index2 = 0\n        for j in range(len(list1)):\n            for k in range(len(list2)):\n                product = list1[j] * list2[k]\n                if product > max_product:\n                    max_product = product\n                    max_index1 = j\n                    max_index2 = k\n        products.append(max_product)\n        del list1[max_index1]\n        del list2[max_index2]\n    return products"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    return max(a, b)\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(num1, num2):\n    return (num1 ^ num2) < 0"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    mask = 1\n    while n & mask:\n        mask <<= 1\n    return n | mask"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, format_str):\n    return [format_str.format(item) for item in lst]\n\n# Test the function\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        temp_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(temp_dict)\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n * (3 * n - 2)\n\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/396", "completion": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test the function\nassert check_char(\"abba\") == \"Valid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return b\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return a\n    else:\n        return c"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(numbers):\n    result = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num = num // 10\n        result.append(digit_sum)\n    return result\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n\n# Test the function\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 != 0"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that is smaller than the digit next to it\n    i = len(digits) - 1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1\n    \n    # If no such digit is found, the number is already the biggest possible\n    if i <= 0:\n        return None\n    \n    # Find the smallest digit on the right of the found digit that is greater than it\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i-1]:\n        j += 1\n    \n    # Swap the found digits\n    digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n    \n    # Reverse the digits after the found digit\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    \n    # Convert the list of digits back to a number\n    return int(\"\".join(digits))"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for i in range(len(tuples_list)):\n        for j in range(i+1, len(tuples_list)):\n            product = tuples_list[i][0] * tuples_list[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    min_val = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_val:\n            min_val = item\n    return min_val"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(list_of_tuples, n):\n    return [t[n] for t in list_of_tuples]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    n = len(arr)\n    return (arr[n-1], arr[n-2]) if arr[n-1] * arr[n-2] > arr[0] * arr[1] else (arr[0], arr[1])"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(list_of_lists):\n    max_length_list = max(list_of_lists, key=len)\n    return max_length_list"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    # Calculate the cube sum of first n even natural numbers\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n\n# Test the function\nassert cube_Sum(2) == 72"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(item) for item in tup)\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [word[-1] for word in tup]\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Use heapq to find the n largest integers\n    largest_nums = heapq.nlargest(n, nums)\n    return largest_nums\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(num_list):\n    return min(num_list)\n\n# Test the function\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(tuple1, tuple2):\n    return tuple(x & y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    # Calculate the directrix of the parabola\n    directrix = -(4*a*c) / (2*b)\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    # Calculate the median length of a trapezium\n    median = (a + b + c) / 2\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test the function\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test the function\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return s[::2]\n\n# Test the function\nassert remove_odd(\"python\")==(\"yhn\")"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    bidirectional_count = 0\n    seen_pairs = set()\n    \n    for pair in tuples:\n        if (pair[1], pair[0]) in seen_pairs:\n            bidirectional_count += 1\n        else:\n            seen_pairs.add(pair)\n    \n    return bidirectional_count"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(numbers):\n    return int(''.join(map(str, numbers)))\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "completion": "\nimport re\n\ndef find_adverb_position(sentence):\n    adverb_pattern = r'\\b(?:very|just|really|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|already|"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6 * size * size"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    positive_count = 0\n    total_count = len(arr)\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tuple1, tuple2):\n    result = tuple(a * b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tuple_input, list_input):\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    if n <= 2:\n        return perrin[n]\n    for i in range(3, n+1):\n        next_perrin = perrin[-1] + perrin[-3]\n        perrin.append(next_perrin)\n    return sum(perrin)\n\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "completion": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) > size]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(input_string):\n    return input_string.replace(' ', '')\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "completion": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    elif month_number == 2:\n        return False  # Assuming the year is not a leap year\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(string_list):\n    reversed_list = [s[::-1] for s in string_list]\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    result = ''\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the function\nassert upper_ctr('PYthon') == 1"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    result = [[]]\n    for item in lst:\n        new_combinations = [comb + [item] for comb in result]\n        result.extend(new_combinations)\n    return result"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if num == 0:\n            current_product = 1\n\n    return max_product"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_ending_here = [0] * n\n    min_ending_here = [0] * n\n\n    max_ending_here[0] = arr[0]\n    min_ending_here[0] = arr[0]\n\n    for i in range(1, n):\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1] * arr[i], min_ending_here[i-1] * arr[i])\n        min_ending_here[i] = min(arr[i], max_ending_here[i-1] * arr[i], min_ending_here[i-1] * arr[i])\n\n    return max(max_ending_here)"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst) + 1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/474", "completion": "def replace_char(input_string, old_char, new_char):\n    return input_string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# Test the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    arr.sort()\n    return arr[0] + arr[-1]"}
{"task_id": "Mbpp/477", "completion": "def is_lower(string):\n    return string.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "completion": "def first_Digit(num):\n    # Convert the number to a string and return the first character\n    return int(str(num)[0])"}
{"task_id": "Mbpp/554", "completion": "def Split(nums):\n    return [num for num in nums if num % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_Odd_Pair([5,4,7,2,1],5) == 6"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(input_string):\n    toggled_string = \"\"\n    for char in input_string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string\n\n# Test the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n):\n            new_bell = [0] * (i + 1)\n            new_bell[0] = bell[i - 1]\n            for j in range(1, i + 1):\n                new_bell[j] = new_bell[j - 1] + bell[j - 1]\n            bell = new_bell\n        return bell[-1]\n\nassert bell_number(2)==2"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    distance = 0\n    for i in range(min(len(num1_str), len(num2_str))):\n        distance += abs(int(num1_str[i]) - int(num2_str[i]))\n    return distance\n\n# Test the function\nassert digit_distance_nums(1, 2) == 1"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "completion": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1 + tuple2)  # Find the union of elements using set\n    union_list = list(union_set)  # Convert the union set to a list\n    union_list.sort()  # Sort the list\n    return tuple(union_list)  # Return the sorted list as a tuple"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "import re\n\ndef extract_values(input_string):\n    return re.findall(r'\"([^\"]*)\"', input_string)\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test the function\nassert count_Pairs([1,2,1],3) == 2"}
{"task_id": "Mbpp/565", "completion": "def split(string):\n    return list(string)\n\n# Test the function\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(num):\n    # Convert the number to a string to iterate through its digits\n    num_str = str(num)\n    # Initialize the sum of digits\n    digit_sum = 0\n    # Iterate through each digit and add it to the sum\n    for digit in num_str:\n        digit_sum += int(digit)\n    return digit_sum\n\n# Test the function\nassert sum_digits(345) == 12"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return (all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or\n            all(arr[i] >= arr[i+1] for i in range(len(arr)-1)))"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"}
{"task_id": "Mbpp/574", "completion": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area of a cylinder\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return surface_area\n\n# Test the function\nassert surfacearea_cylinder(10, 5) == 942.4777960769348"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(arr1, arr2):\n    if len(arr2) > len(arr1):\n        return False\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i + len(arr2)] == arr2:\n            return True\n    return False\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        last_digit = 1\n        for i in range(2, n + 1):\n            last_digit = (last_digit * i) % 10\n        return last_digit"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(tuple1, tuple2):\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "completion": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if isinstance(x, tuple) or x % 2 == 0)\n    else:\n        return t\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base_edge, height):\n    # Calculate the surface area of a square pyramid\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge * height)\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_Area(3, 4) == 33"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(lst, sub):\n    for i in range(len(lst) - len(sub) + 1):\n        if lst[i:i + len(sub)] == sub:\n            return True\n    return False\n\n# Test the function\nassert is_sublist([2,4,3,5,7],[3,7])==False"}
{"task_id": "Mbpp/582", "completion": "def is_dict_empty(d):\n    return not bool(d)\n\n# Test the function\nassert is_dict_empty({10}) == False"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    result = 0\n    for i in range(n):\n        result += catalan_number(i) * catalan_number(n-i-1)\n    return result\n\nassert catalan_number(10)==16796"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(nums):\n    if len(nums) < 2:\n        return 0\n    else:\n        return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    return [num**2 for num in range(int(start**0.5), int(end**0.5)+1)]\n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test the function\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res *= (n - i)\n            res //= (i + 1)\n        return res\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += binomial_coefficient(n + i - 1, i) * binomial_coefficient(n + i, i)\n    return total_sum\n\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip_address):\n    octets = ip_address.split('.')\n    modified_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(modified_octets)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(nums):\n    even_nums = [num for num in nums if num % 2 == 0]\n    odd_nums = [num for num in nums if num % 2 != 0]\n    return even_nums[0] - odd_nums[0]"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count // 2"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n    if m > n:\n        return find_kth(arr2, arr1, k)\n    if m == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    i = min(m, k//2)\n    j = min(n, k//2)\n\n    if arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1, arr2[j:], k-j)\n    else:\n        return find_kth(arr1[i:], arr2, k-i)\n\n# Test the function\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    sum_of_powers = 0\n    for digit in num_str:\n        sum_of_powers += int(digit) ** num_len\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    # Calculate the sum of first n natural numbers\n    sum_of_numbers = n * (n + 1) / 2\n    \n    # Calculate the average of first n natural numbers\n    average = sum_of_numbers / n\n    \n    return sum_of_numbers, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(num):\n    return num % 2 == 0"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludic_numbers = []\n    for num in range(1, n+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            ludic_numbers.append(num)\n    return ludic_numbers"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(0, len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    return arr"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    words = s.split()  # Split the string into individual words\n    reversed_words = ' '.join(reversed(words))  # Reverse the order of the words and join them back into a string\n    return reversed_words\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "completion": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert prime_num(13)==True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(list_of_lists):\n    result = [[sublist[i] for sublist in list_of_lists] for i in range(2)]\n    return result\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR the two numbers to find the bit positions where they differ\n    xor_result = num1 ^ num2\n    \n    # Count the number of set bits in the XOR result\n    set_bit_count = bin(xor_result).count('1')\n    \n    # If the count is exactly 1, the numbers differ at one bit position only\n    return set_bit_count == 1"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    for i in range(n):\n        for j in range(n):\n            if i*i - j*j == n:\n                return True\n    return False\n\nassert dif_Square(5) == True"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    num_str = ''\n    char_str = ''\n    for char in s:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n    return char_str + num_str"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, subset, index):\n        if index == len(numbers):\n            return len(subset)\n        else:\n            include_index = find_subset(numbers, subset, index + 1)\n            for i in range(len(subset)):\n                if is_divisible(numbers[index], subset[i]):\n                    subset[i] = numbers[index]\n                    break\n            else:\n                subset.append(numbers[index])\n            exclude_index = find_subset(numbers, subset, index + 1)\n            return max(include_index, exclude_index)\n\n    return find_subset(numbers, [], 0)"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        return (merged_list[n // 2 - 1] + merged_list[n // 2]) / 2\n    else:\n        return merged_list[n // 2]"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        area = 0.5 * math.pi * radius ** 2\n        return area"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "completion": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1,2,3,4,5]) == [2,4]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(patterns, colors):\n    if len(patterns) != len(colors):\n        return False\n    pattern_map = {}\n    color_map = {}\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        color = colors[i]\n        if pattern in pattern_map:\n            if pattern_map[pattern] != color:\n                return False\n        else:\n            pattern_map[pattern] = color\n        if color in color_map:\n            if color_map[color] != pattern:\n                return False\n        else:\n            color_map[color] = pattern\n    return True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i != 0 or j != 0:\n                adjacent_coordinates.append([x + i, y + j])\n    return adjacent_coordinates\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(input_string):\n    return input_string.replace(' ', '_')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    # Initialize a variable to keep track of the position to place non-zero elements\n    non_zero_pos = 0\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # If the current element is non-zero, move it to the position indicated by non_zero_pos\n        if lst[i] != 0:\n            lst[non_zero_pos], lst[i] = lst[i], lst[non_zero_pos]\n            non_zero_pos += 1\n    \n    return lst"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(arr, n):\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += (arr[i] ^ arr[j])\n    return ans\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(buy_price, sell_price):\n    return buy_price == sell_price"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "completion": "def sum_name_lengths(names):\n    # Remove names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    \n    # Sum the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/640", "completion": "def remove_parenthesis(input_string):\n    return input_string.split('(')[0].split(')')[0]"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n * (3 * n - 2)\n\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result"}
{"task_id": "Mbpp/643", "completion": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    return bool(re.search(pattern, text))\n\n# Test the function\nassert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(student_data, min_height, min_weight):\n    filtered_students = {name: (height, weight) for name, (height, weight) in student_data.items() if height > min_height and weight > min_weight}\n    return filtered_students\n\n# Test the function\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "completion": "import re\n\ndef extract_quotation(input_string):\n    return re.findall(r'\"([^\"]*)\"', input_string)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(num):\n    # Convert the number to a string for easy manipulation\n    num_str = str(num)\n    \n    # Initialize the sum of even-indexed digits and the sum of odd-indexed digits\n    sum_even = 0\n    sum_odd = 0\n    \n    # Iterate through the digits and calculate the sums\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            sum_even += int(num_str[i])\n        else:\n            sum_odd += int(num_str[i])\n    \n    # Check if the absolute difference between the sums is divisible by 11\n    return abs(sum_even - sum_odd) % 11 == 0"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the lateral surface area of a cone\n    # using the formula: LSA = 2 * pi * r * (r + sqrt(r**2 + h**2))\n    lsa = 2 * math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lsa\n\n# Test the function with the given assertion\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(text):\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        text = text.replace(char, ':')\n    return text\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            result += prod\n    return result\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Find the position of the first set bit from the right\n    first_set_bit_pos = n.bit_length() - 1\n    \n    # Create a mask to toggle bits except the first and last bit\n    mask = (1 << first_set_bit_pos) - 1\n    \n    # Toggle the bits using the mask\n    toggled_bits = n ^ mask\n    \n    return toggled_bits"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, value):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(input_str):\n    pattern = r'^[aeiou]'\n    return bool(re.match(pattern, input_str, re.IGNORECASE))\n\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    # Initialize the index\n    index = 1\n    # Initialize the triangular number\n    triangular_number = 1\n    # Initialize the number of digits\n    num_digits = 1\n    # Iterate until the number of digits is less than or equal to n\n    while num_digits <= n:\n        # Increment the index\n        index += 1\n        # Calculate the next triangular number\n        triangular_number += index\n        # Calculate the number of digits in the triangular number\n        num_digits = len(str(triangular_number))\n    # Return the index of the smallest triangular number with n digits\n    return index"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(string):\n    return len(set(string)) <= 1"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(side_length):\n    # Calculate the area of a tetrahedron using the formula for the surface area\n    area = math.sqrt(3) * side_length**2\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return None in tup"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num) if digit != '0'):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/746", "completion": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * (radius ** 2)\n\n# Test the function\nassert sector_area(4, 45) == 6.283185307179586"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i > 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result\n\n# Test the function\nassert capital_words_spaces(\"Python\") == 'Python'"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(num_list):\n    # Convert the strings to integers and then sort the list\n    num_list = [int(num) for num in num_list]\n    num_list.sort()\n    return num_list\n\n# Test the function\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "completion": "def min_k(tuple_list, k):\n    sorted_tuple_list = sorted(tuple_list, key=lambda x: x[1])  # Sort the tuple list based on the second element\n    return sorted_tuple_list[:k]  # Return the first k elements of the sorted list"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None  # Handle edge case for lists with less than 2 elements\n\n    smallest = float('inf')  # Initialize smallest to positive infinity\n    second_smallest = float('inf')  # Initialize second_smallest to positive infinity\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest != float('inf') else None  # Return second_smallest if it's not infinity, otherwise return None"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    for string in string_list:\n        reverse = string[::-1]\n        if reverse in seen:\n            count += 1\n        seen.add(string)\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"}
{"task_id": "Mbpp/759", "completion": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))\n\n# Test the function\nassert is_decimal('123.11')==True"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(nums):\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    polite_numbers = [1, 2, 4, 6, 10, 12, 16, 18, 22, 24, 28, 30, 34, 36, 40, 42, 46, 48, 52, 54, 58, 60, 64, 66, 70, 72, 76, 78, 82, 84, 88, 90, 94, 96, 100, 102, 106, 108, 112, 114, 118, 120, 124, 126, 130, 132, 136, 138, 142, 144, 148, 150, 154, 156, 160, 162, 166, 168, 172, 174, 178, 180, 184, 186, 190, 192, 196, 198, 202, 204, 208, 210, 214, 216, 220, 222, 226, 228, 232, 234, 238, 240, 244, 246, 250, 252, 256, 258, 262, 264, 268, 270, 274, 276, 280, 282, 286, 288, 292, 294, 298, 300, 304, 306, 310, 312, 316, 318, 322, 324, 328, 330, 334, 336, 340, 342, 346, 348, 352, 354, 358, 360, 364, 366, 370, 372, 376, 378, 382, 384, 388, 390, 394, 396, 400, 402, 406, 408, 412, 414, 418, 420, 424, 426, 430, 432, 436, 438, 442, 444, 448, 450, 454, 456, 460, 462, 466, 468, 472, 474, 478, 480, 484, 486, 490, 492, 496, 498]\n    return polite_numbers[n-1]\n\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return list(zip(lst, lst[1:]))"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(nums, target_sum):\n    pairs_count = 0\n    num_counts = {}\n    \n    for num in nums:\n        complement = target_sum - num\n        if complement in num_counts:\n            pairs_count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    \n    return pairs_count"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening_brackets = set(['(', '[', '{'])\n    closing_brackets = set([')', ']', '}'])\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    index = string.find(substring)\n    if index != -1:\n        return substring, index, index + len(substring)\n    else:\n        return None"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))"}
{"task_id": "Mbpp/83", "completion": "def get_Char(s):\n    total = sum(ord(c) for c in s) % 26\n    return chr(total + 96)"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    unique_elements = set()\n    repeated_elements = set()\n    for num in lst:\n        if num in unique_elements:\n            unique_elements.remove(num)\n            repeated_elements.add(num)\n        else:\n            unique_elements.add(num)\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for i in range(1, len(tuple_list) + 1):\n        for comb in combinations(tuple_list, i):\n            result.append(tuple(sum(x) for x in zip(*comb)))\n    return result\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                result += sum(arr[i:j+1])\n    return result\n\nassert odd_length_sum([1,2,4]) == 14"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v\n\n# Test the function\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even_numbers = [num for num in lst if num % 2 == 0]\n    odd_numbers = [num for num in lst if num % 2 != 0]\n    \n    if even_numbers and odd_numbers:\n        return even_numbers[0] * odd_numbers[0]\n    else:\n        return 0"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tuple_str):\n    # Remove the leading and trailing parentheses\n    tuple_str = tuple_str.strip('()')\n    # Split the string by comma and convert each element to integer\n    tuple_list = [int(x) for x in tuple_str.split(',')]\n    # Create a tuple from the list\n    tuple_int = tuple(tuple_list)\n    return tuple_int\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, value):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "completion": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/84", "completion": "def newman_conway(n):\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            num = sequence[sequence[i-1]-1] + sequence[i-sequence[i-1]]\n            sequence.append(num)\n        return \" \".join(map(str, sequence))\n\ndef sequence(n):\n    return int(newman_conway(n).split()[-1])\n\nassert sequence(10) == 6"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, str):\n    return tuple(lst + [str])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    return all(lst[i] % 2 == 0 for i in range(0, len(lst), 2))"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "completion": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "completion": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1 if left > 0 else -1"}
{"task_id": "Mbpp/794", "completion": "import re\n\ndef text_starta_endb(input_string):\n    pattern = r'a.*b'\n    return bool(re.match(pattern, input_string))\n\n# Test the function\nassert text_starta_endb(\"aabbbb\")"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(range(l, r+1, 2))"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(num, d):\n    # In binary, the number 16 is represented as 0001 0000\n    # Left rotation by 2 bits results in 0010 0001, which is 64 in decimal\n    # Perform left rotation using bitwise operations\n    return ((num << d) | (num >> (32 - d))) & 0xFFFFFFFF  # Mask to ensure 32 bit result"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(input_string):\n    return input_string.replace(' ', '')\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "import math\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False  # Negative numbers cannot be perfect squares\n\n    sqrt_num = int(math.sqrt(num))\n    return sqrt_num * sqrt_num == num"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    result = []\n    for lst in list_of_lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    return result"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None  # If no odd number is found"}
{"task_id": "Mbpp/808", "completion": "def check_K(tuple_input, k):\n    return k in tuple_input"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple2[i] <= tuple1[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(input_string):\n    words = input_string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the first digit that is smaller than the last digit\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] < digits[i - 1]:\n            break\n    \n    # If no such digit is found, return -1\n    if i == 1 and digits[i] >= digits[i - 1]:\n        return -1\n    \n    # Swap the digit at index i-1 with the smallest digit greater than it to the right\n    for j in range(i, len(digits)):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    \n    # Reverse the digits after index i-1\n    digits[i:] = digits[len(digits) - 1:i - 1:-1]\n    \n    # Convert the list of digits back to a number\n    closest_number = int(''.join(digits))\n    \n    return closest_number"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# Test the function\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "completion": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False  # Undulating number must have at least 3 digits\n\n    prev_diff = int(num_str[1]) - int(num_str[0])\n    for i in range(2, len(num_str)):\n        diff = int(num_str[i]) - int(num_str[i-1])\n        if diff != prev_diff:\n            return False\n        prev_diff = diff\n\n    return True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_index = 0\n    for i in range(1, len(tuples_list)):\n        if tuples_list[i][1] < tuples_list[min_index][1]:\n            min_index = i\n    return tuples_list[min_index][0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    min_length = len(list_of_lists[0])\n    for sublist in list_of_lists:\n        min_length = min(min_length, len(sublist))\n    return min_length"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(flattened_list):\n    frequency_dict = {}\n    for item in flattened_list:\n        for element in item:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return '0'\n    binary_str = ''\n    while decimal_num > 0:\n        binary_str = str(decimal_num % 2) + binary_str\n        decimal_num = decimal_num // 2\n    return binary_str\n\n# Test the function\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    arr.sort()  # Sort the array in ascending order\n    return arr[k-1]  # Return the element at index k-1 to use 1-based indexing"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    parts = snake_str.split('_')\n    return parts[0] + ''.join(word.capitalize() for word in parts[1:])\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    if m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(list_of_lists):\n    sorted_sublists = []\n    for sublist in list_of_lists:\n        sorted_sublists.append(sorted(sublist))\n    return sorted_sublists"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(1 for x in lst if x)"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return 0"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, num_rotations):\n    # Convert the binary string to a list of integers\n    binary_list = list(map(int, binary_string))\n    \n    # Calculate the number of odd values after rotating the binary string\n    odd_count = sum(binary_list)  # Initialize odd_count with the initial sum of binary_list\n    for _ in range(num_rotations):\n        # Rotate the binary list by one position\n        binary_list = [binary_list[-1]] + binary_list[:-1]\n        # Update odd_count based on the new rotation\n        odd_count += sum(binary_list) - odd_count\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test the function\nassert check_integer(\"python\") == False"}
{"task_id": "Mbpp/115", "completion": "def empty_dit(list_of_dicts):\n    return all(len(d) == 0 for d in list_of_dicts)"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(lst):\n    return [tuple(float(x) for x in sublst) for sublst in lst]"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n    return arr[left]"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    # Remove first occurrence of the character\n    string = string.replace(char, '', 1)\n    \n    # Remove last occurrence of the character\n    last_index = string.rfind(char)\n    if last_index != -1:\n        string = string[:last_index] + string[last_index+1:]\n    \n    return string"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def is_amicable(num):\n    def sum_of_divisors(n):\n        divisors_sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    sum1 = sum_of_divisors(num)\n    sum2 = sum_of_divisors(sum1)\n    return sum2 == num and sum1 != sum2\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "completion": "import cmath\nimport math\n\ndef angle_complex(z):\n    return cmath.phase(z)\n\n# Test the function\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = count_one - count_zero\n        if diff < 0:\n            count_zero = count_one = 0\n        else:\n            max_diff = max(max_diff, diff)\n\n    return max_diff"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(num1, num2):\n    def common_divisors(num):\n        divisors = [1]\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num // i:\n                    divisors.append(num // i)\n        return divisors\n\n    common = set(common_divisors(num1)).intersection(set(common_divisors(num2)))\n    return sum(common)\n\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Sum of the first row as the target sum for the rest of the rows\n\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check column sums\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal sums\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n - 1 - i] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    max_freq = 0\n    max_item = None\n    freq_dict = {}\n    \n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n        \n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        while s[left] not in vowels and left < right:\n            left += 1\n        while s[right] not in vowels and left < right:\n            right -= 1\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n    return ''.join(s)\n\n# Test the function\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "completion": "import math\n\ndef zero_count(arr):\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count if non_zero_count != 0 else 0\n    return ratio\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True  # 0 can be represented as sum of non-zero powers of 2\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1  # Reduce n by 1\n        else:\n            n //= 2  # Divide n by 2\n    return n == 0  # If n becomes 0, it can be represented as sum of non-zero powers of 2"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(list_of_lists):\n    flattened_list = []\n    for sublist in list_of_lists:\n        flattened_list.extend(sublist)\n    return flattened_list\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(arr):\n    def flip(arr, end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    def find_max_index(arr, end):\n        max_index = 0\n        for i in range(end):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(arr)\n    for i in range(n, 0, -1):\n        max_index = find_max_index(arr, i - 1)\n        if max_index != i - 1:\n            flip(arr, max_index)\n            flip(arr, i - 1)\n    return arr\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "completion": "def find_lists(t):\n    count = 0\n    for item in t:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    volume = (base * height * length) / 2\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    min_val = arr[0]\n    max_diff = 0\n    for num in arr:\n        max_diff = max(max_diff, num - min_val)\n        min_val = min(min_val, num)\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += n - 2 * i\n    return total_sum\n\n# Test the function\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/164", "completion": "def sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef are_equivalent(num1, num2):\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n# Test the function\nassert are_equivalent(36, 57) == False"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == chr(97 + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)\n\n# Test the function\nassert frequency([1,2,3], 4) == 0"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
