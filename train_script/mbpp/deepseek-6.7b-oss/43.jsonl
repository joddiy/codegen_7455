{"task_id": "Mbpp/89", "completion": "\n```python\ndef closest_num(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the first digit that is smaller than the last digit\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] < digits[i - 1]:\n            break\n    \n    # If no such digit is found, return -1\n    if i == 1 and digits[i] >= digits[i - 1]:\n        return -1\n    \n    # Swap the digit at index i-1 with the smallest digit greater than it to the right\n    for j in range(i, len(digits)):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    \n    # Reverse the digits after index i-1\n    digits[i:] = digits[len(digits) - 1:i - 1:-1]\n    \n    # Convert the list of digits back to a number\n    closest_number = int(''.join(digits))\n    \n    return closest_number\n```\n\nThe `closest_num` function first converts the input number into a list of digits. It then iterates through the digits from right to left, finding the first digit that is smaller than the digit to its left. If such a digit is found, it swaps it with the smallest digit to the right of it that is greater than it. Finally, it reverses the digits after the swapped digit and returns the resulting number as the closest smaller number. If no such number exists, it returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the closest smaller number than n. Your code should satisfy the following assertion:\n```python\nassert closest_num(11) == 10\n```\n\n    ### Response:\n```python\ndef closest_num(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the first digit that is smaller than the last digit\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] < digits[i - 1]:\n            break\n    \n    # If no such digit is found, return -1\n    if i == 1 and digits[i] >= digits[i - 1]:\n        return -1\n    \n    # Swap the digit at index i-1 with the smallest digit greater than it to the right\n    for j in range(i, len(digits)):\n        if digits[j] > digits[i - 1]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    \n    # Reverse the digits after index i-1\n    digits[i:] = digits[len(digits) - 1:i - 1:-1]\n    \n    # Convert the list of digits back to a number\n    closest_number = int(''.join(digits))\n    \n    return closest_number\n```\n\nThe `closest_num` function first converts the input number into a list of digits. It then iterates through the digits from right to left, finding the first digit that is smaller than the digit to its left. If such a digit is found, it swaps it with the smallest digit to the right of it that is greater than it. Finally, it reverses the digits after the swapped digit and returns the resulting number as the closest smaller number. If no such number exists, it returns -1."}
