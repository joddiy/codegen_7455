{"task_id": "Mbpp/778", "completion": "\n```python\ndef pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result\n```\n\nThe `pack_consecutive_duplicates` function iterates through the input list and constructs a result list by grouping consecutive duplicates into sublists. It initializes the result list with the first element of the input list. Then, it iterates through the input list, comparing each element with the previous one. If the elements are the same, it appends the current element to the last sublist in the result list. If the elements are different, it creates a new sublist with the current element. Finally, it returns the constructed result list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following assertion:\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n    ### Response:\n```python\ndef pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result\n```\n\nThe `pack_consecutive_duplicates` function iterates through the input list and constructs a result list by grouping consecutive duplicates into sublists. It initializes the result list with the first element of the input list. Then, it iterates through the input list, comparing each element with the previous one. If the elements are the same, it appends the current element to the last sublist in the result list. If the elements are different, it creates a new sublist with the current element. Finally, it returns the constructed result list."}
