{"task_id": "Mbpp/410", "completion": "\n```python\ndef min_val(lst):\n    # Filter out non-numeric values and find the minimum\n    min_val = min(x for x in lst if isinstance(x, (int, float)))\n    return min_val\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n```\n\nThe function `min_val` takes a list as input. It uses a generator expression to filter out non-numeric values from the list. The `min` function then finds the minimum of these numeric values. The `isinstance` function is used to check if a value is an instance of either `int` or `float`.\n\nThe assertion checks if the function returns the correct minimum value when given a list with both numeric and non-numeric values.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the minimum value in a given heterogeneous list. Your code should satisfy the following assertion:\n```python\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n```\n\n    ### Response:\n```python\ndef min_val(lst):\n    # Filter out non-numeric values and find the minimum\n    min_val = min(x for x in lst if isinstance(x, (int, float)))\n    return min_val\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n```\n\nThe function `min_val` takes a list as input. It uses a generator expression to filter out non-numeric values from the list. The `min` function then finds the minimum of these numeric values. The `isinstance` function is used to check if a value is an instance of either `int` or `float`.\n\nThe assertion checks if the function returns the correct minimum value when given a list with both numeric and non-numeric values."}
