{"task_id": "Mbpp/598", "completion": "\n```python\ndef armstrong_number(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\nassert armstrong_number(153)==True\n```\n\nIn this Python script, we define a function `armstrong_number(n)` that takes an integer `n` as input. The function calculates the sum of the cubes of each digit in `n` and checks if this sum is equal to `n`. If it is, then `n` is an Armstrong number, and the function returns `True`. Otherwise, it returns `False`.\n\nThe `assert` statement checks if the function `armstrong_number(153)` returns `True`. If it does not, the program will raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check whether the given number is armstrong or not. Your code should satisfy the following assertion:\n```python\nassert armstrong_number(153)==True\n```\n\n    ### Response:\n```python\ndef armstrong_number(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\nassert armstrong_number(153)==True\n```\n\nIn this Python script, we define a function `armstrong_number(n)` that takes an integer `n` as input. The function calculates the sum of the cubes of each digit in `n` and checks if this sum is equal to `n`. If it is, then `n` is an Armstrong number, and the function returns `True`. Otherwise, it returns `False`.\n\nThe `assert` statement checks if the function `armstrong_number(153)` returns `True`. If it does not, the program will raise an `AssertionError`."}
