{"task_id": "Mbpp/223", "completion": "\n```python\ndef is_majority(arr, n, x):\n    # Find the first occurrence of the element\n    i = _binary_search(arr, 0, n-1, x)\n \n    # If element is not present, return false\n    if i == -1:\n        return False\n \n    # Check if the element is present more than n/2 times\n    if ((i + n//2) <= (n - 1)) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n \n# A binary search based method to find the first occurrence of x in arr[]\ndef _binary_search(arr, low, high, x):\n    if high >= low:\n        mid = low + (high - low)//2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return _binary_search(arr, (mid + 1), high, x)\n        else:\n            return _binary_search(arr, low, (mid -1), x)\n    return -1\n \n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\nThis Python script uses a binary search to find the first occurrence of the element in the array. If the element is present more than n/2 times, it returns True. Otherwise, it returns False. The function `_binary_search` is a helper function that performs the binary search.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.). Your code should satisfy the following assertion:\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n    ### Response:\n```python\ndef is_majority(arr, n, x):\n    # Find the first occurrence of the element\n    i = _binary_search(arr, 0, n-1, x)\n \n    # If element is not present, return false\n    if i == -1:\n        return False\n \n    # Check if the element is present more than n/2 times\n    if ((i + n//2) <= (n - 1)) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n \n# A binary search based method to find the first occurrence of x in arr[]\ndef _binary_search(arr, low, high, x):\n    if high >= low:\n        mid = low + (high - low)//2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return _binary_search(arr, (mid + 1), high, x)\n        else:\n            return _binary_search(arr, low, (mid -1), x)\n    return -1\n \n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\nThis Python script uses a binary search to find the first occurrence of the element in the array. If the element is present more than n/2 times, it returns True. Otherwise, it returns False. The function `_binary_search` is a helper function that performs the binary search."}
