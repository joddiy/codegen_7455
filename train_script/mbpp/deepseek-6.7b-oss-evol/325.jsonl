{"task_id": "Mbpp/723", "completion": "\n```python\ndef count_same_pair(list1, list2):\n    return sum(a == b for a, b in zip(list1, list2))\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n```\n\nThe function `count_same_pair` takes two lists as input, and uses the `zip` function to pair corresponding elements from the two lists. It then uses a generator expression to compare each pair of elements and returns the sum of these comparisons. The `assert` statement checks if the function returns the expected result.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values. Your code should satisfy the following assertion:\n```python\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n```\n\n    ### Response:\n```python\ndef count_same_pair(list1, list2):\n    return sum(a == b for a, b in zip(list1, list2))\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n```\n\nThe function `count_same_pair` takes two lists as input, and uses the `zip` function to pair corresponding elements from the two lists. It then uses a generator expression to compare each pair of elements and returns the sum of these comparisons. The `assert` statement checks if the function returns the expected result."}
