{"task_id": "Mbpp/392", "completion": "\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nassert get_max_sum(60) == 106\n```\n\nThe function `get_max_sum` is defined to calculate the maximum sum as per the given equation. It uses recursion to calculate the maximum sum for each of the five fractions of the given number. The base case is when `n` is less than or equal to 1, in which case it returns `n`.\n\nThe assertion checks if the function is working correctly by comparing the output of `get_max_sum(60)` with the expected result `106`. If the assertion is true, the function is working correctly. If it's false, the function needs to be debugged.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should satisfy the following assertion:\n```python\nassert get_max_sum(60) == 106\n```\n\n    ### Response:\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nassert get_max_sum(60) == 106\n```\n\nThe function `get_max_sum` is defined to calculate the maximum sum as per the given equation. It uses recursion to calculate the maximum sum for each of the five fractions of the given number. The base case is when `n` is less than or equal to 1, in which case it returns `n`.\n\nThe assertion checks if the function is working correctly by comparing the output of `get_max_sum(60)` with the expected result `106`. If the assertion is true, the function is working correctly. If it's false, the function needs to be debugged."}
