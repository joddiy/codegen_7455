{"task_id": "Mbpp/284", "completion": "\n```python\ndef check_element(lst, element):\n    return all(i == element for i in lst)\n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\nThe function `check_element` checks if all elements in the list are equal to the given element. The `all()` function returns `True` if all elements in the iterable are true. If not, it returns `False`. The expression `i == element for i in lst` is a generator expression that yields `True` for each element in the list if it is equal to the given element, and `False` otherwise. If all elements in the list are equal to the given element, `all()` returns `True`; otherwise, it returns `False`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element. Your code should satisfy the following assertion:\n```python\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\n    ### Response:\n```python\ndef check_element(lst, element):\n    return all(i == element for i in lst)\n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\nThe function `check_element` checks if all elements in the list are equal to the given element. The `all()` function returns `True` if all elements in the iterable are true. If not, it returns `False`. The expression `i == element for i in lst` is a generator expression that yields `True` for each element in the list if it is equal to the given element, and `False` otherwise. If all elements in the list are equal to the given element, `all()` returns `True`; otherwise, it returns `False`."}
