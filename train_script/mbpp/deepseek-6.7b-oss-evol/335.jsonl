{"task_id": "Mbpp/735", "completion": "\n```python\ndef toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n\n    # If n is a power of 2, return n - 1\n    if num_bits == 1:\n        return n - 1\n\n    # Calculate the mask to toggle bits from 1 to num_bits - 2\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the bits using the mask\n    n = n ^ mask\n\n    # Return the result\n    return n\n\n# Test the function\nassert toggle_middle_bits(9) == 15\n```\n\nThis script first calculates the number of bits in the input number `n`. If `n` is a power of 2, it returns `n - 1`. Otherwise, it calculates a mask with all bits set from the second bit to the second last bit. It then toggles the bits of `n` using the mask and returns the result. The assertion at the end tests the function with the given example.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/. Your code should satisfy the following assertion:\n```python\nassert toggle_middle_bits(9) == 15\n```\n\n    ### Response:\n```python\ndef toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n\n    # If n is a power of 2, return n - 1\n    if num_bits == 1:\n        return n - 1\n\n    # Calculate the mask to toggle bits from 1 to num_bits - 2\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the bits using the mask\n    n = n ^ mask\n\n    # Return the result\n    return n\n\n# Test the function\nassert toggle_middle_bits(9) == 15\n```\n\nThis script first calculates the number of bits in the input number `n`. If `n` is a power of 2, it returns `n - 1`. Otherwise, it calculates a mask with all bits set from the second bit to the second last bit. It then toggles the bits of `n` using the mask and returns the result. The assertion at the end tests the function with the given example."}
