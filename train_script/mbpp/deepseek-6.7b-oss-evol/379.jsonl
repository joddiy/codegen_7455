{"task_id": "Mbpp/787", "completion": "\n```python\nimport re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nassert not text_match_three(\"ac\")\n```\n\nIn this Python script, we use the `re` module to work with Regular Expressions. The function `text_match_three` takes a string `text` as input and checks if it matches the pattern `'abbb'`. If it does, the function returns `True`, otherwise it returns `False`. The `assert` statement checks if the function returns `False` for the input `\"ac\"`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that matches a string that has an a followed by three 'b'. Your code should satisfy the following assertion:\n```python\nassert not text_match_three(\"ac\")\n```\n\n    ### Response:\n```python\nimport re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nassert not text_match_three(\"ac\")\n```\n\nIn this Python script, we use the `re` module to work with Regular Expressions. The function `text_match_three` takes a string `text` as input and checks if it matches the pattern `'abbb'`. If it does, the function returns `True`, otherwise it returns `False`. The `assert` statement checks if the function returns `False` for the input `\"ac\"`."}
