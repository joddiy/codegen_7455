{"task_id": "Mbpp/272", "completion": "\n```python\ndef rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\nIn the function `rear_extract`, we use list comprehension to iterate over each tuple in the input list. For each tuple, we use negative indexing to access the last element (which is the rear element of the tuple). We then append this rear element to the result list.\n\nThe assertion checks if the function `rear_extract` works as expected. If the function returns the expected result, the assertion passes. If not, the assertion raises an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Your code should satisfy the following assertion:\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\n    ### Response:\n```python\ndef rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\nIn the function `rear_extract`, we use list comprehension to iterate over each tuple in the input list. For each tuple, we use negative indexing to access the last element (which is the rear element of the tuple). We then append this rear element to the result list.\n\nThe assertion checks if the function `rear_extract` works as expected. If the function returns the expected result, the assertion passes. If not, the assertion raises an AssertionError."}
