{"task_id": "Mbpp/394", "completion": "\n```python\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n```\n\nIn this script, the function `check_distinct` takes a tuple as an argument. It converts the tuple to a set and checks if the length of the tuple and the set are equal. If they are equal, it means that there were no duplicates in the tuple, so the function returns `True`. If not, it returns `False`. The assertion checks if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if given tuple contains no duplicates. Your code should satisfy the following assertion:\n```python\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n```\n\n    ### Response:\n```python\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n```\n\nIn this script, the function `check_distinct` takes a tuple as an argument. It converts the tuple to a set and checks if the length of the tuple and the set are equal. If they are equal, it means that there were no duplicates in the tuple, so the function returns `True`. If not, it returns `False`. The assertion checks if the function works correctly."}
