{"task_id": "Mbpp/280", "completion": "\n```python\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\nThe function `sequential_search` iterates over the given array and checks if the current element is equal to the target element. If it is, it returns a tuple with `True` and the index of the element. If the function iterates over the entire array without finding the element, it returns a tuple with `False` and `-1`. The assertion checks if the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). Your code should satisfy the following assertion:\n```python\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\n    ### Response:\n```python\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\nThe function `sequential_search` iterates over the given array and checks if the current element is equal to the target element. If it is, it returns a tuple with `True` and the index of the element. If the function iterates over the entire array without finding the element, it returns a tuple with `False` and `-1`. The assertion checks if the function works as expected."}
