{"task_id": "Mbpp/791", "completion": "\n```python\ndef remove_nested(tup):\n    return tuple(i for i in tup if not isinstance(i, tuple))\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n```\n\nThe function `remove_nested` uses a generator expression to iterate over the elements in the tuple. If an element is not a tuple (checked using `isinstance(i, tuple)`), it is included in the new tuple. The `assert` statement checks if the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to remove tuples from the given tuple. Your code should satisfy the following assertion:\n```python\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n```\n\n    ### Response:\n```python\ndef remove_nested(tup):\n    return tuple(i for i in tup if not isinstance(i, tuple))\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n```\n\nThe function `remove_nested` uses a generator expression to iterate over the elements in the tuple. If an element is not a tuple (checked using `isinstance(i, tuple)`), it is included in the new tuple. The `assert` statement checks if the function works as expected."}
