{"task_id": "Mbpp/605", "completion": "\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nassert prime_num(13)==True\n```\n\nThe function `prime_num` checks if a number is prime by dividing it by all numbers up to its square root. If the number is divisible by any of these, it is not prime. The function returns `True` if the number is prime and `False` otherwise. The assertion at the end checks if the function works correctly for the number 13.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given integer is a prime number. Your code should satisfy the following assertion:\n```python\nassert prime_num(13)==True\n```\n\n    ### Response:\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nassert prime_num(13)==True\n```\n\nThe function `prime_num` checks if a number is prime by dividing it by all numbers up to its square root. If the number is divisible by any of these, it is not prime. The function returns `True` if the number is prime and `False` otherwise. The assertion at the end checks if the function works correctly for the number 13."}
