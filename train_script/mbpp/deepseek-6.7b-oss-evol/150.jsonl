{"task_id": "Mbpp/282", "completion": "\n```python\ndef sub_list(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n```\n\nThe function `sub_list` takes two lists as input, uses the `zip` function to pair corresponding elements from the two lists, and then subtracts the second element from the first. The result is a new list with the subtracted values. The `assert` statement checks if the function works correctly. If the function returns the expected result, the `assert` statement does nothing. If the function does not return the expected result, the `assert` statement raises an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to subtract two lists element-wise. Your code should satisfy the following assertion:\n```python\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n```\n\n    ### Response:\n```python\ndef sub_list(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n```\n\nThe function `sub_list` takes two lists as input, uses the `zip` function to pair corresponding elements from the two lists, and then subtracts the second element from the first. The result is a new list with the subtracted values. The `assert` statement checks if the function works correctly. If the function returns the expected result, the `assert` statement does nothing. If the function does not return the expected result, the `assert` statement raises an `AssertionError`."}
