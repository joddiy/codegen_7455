{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\nThis Python script uses dynamic programming to solve the problem. It first sorts the list of numbers. Then, for each number in the list, it checks all the previous numbers to see if they can divide the current number. If they can, it updates the maximum length of the subset ending at the current number. Finally, it returns the maximum length found. The assertion at the end verifies that the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\nThis Python script uses dynamic programming to solve the problem. It first sorts the list of numbers. Then, for each number in the list, it checks all the previous numbers to see if they can divide the current number. If they can, it updates the maximum length of the subset ending at the current number. Finally, it returns the maximum length found. The assertion at the end verifies that the function works correctly."}
