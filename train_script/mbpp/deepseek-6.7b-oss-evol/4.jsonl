{"task_id": "Mbpp/7", "completion": "\n```python\ndef find_char_long(string):\n    words = string.split()\n    return [word for word in words if len(word) >= 4]\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\nThe function `find_char_long` splits the input string into a list of words using the `split` method. It then uses a list comprehension to create a new list of words that are at least 4 characters long. The `set` function is used to ensure that the returned list does not contain any duplicate words. The assertion checks if the function returns the expected result.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find all words which are at least 4 characters long in a string. Your code should satisfy the following assertion:\n```python\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\n    ### Response:\n```python\ndef find_char_long(string):\n    words = string.split()\n    return [word for word in words if len(word) >= 4]\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\nThe function `find_char_long` splits the input string into a list of words using the `split` method. It then uses a list comprehension to create a new list of words that are at least 4 characters long. The `set` function is used to ensure that the returned list does not contain any duplicate words. The assertion checks if the function returns the expected result."}
