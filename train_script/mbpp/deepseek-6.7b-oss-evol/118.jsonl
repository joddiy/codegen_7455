{"task_id": "Mbpp/244", "completion": "\n```python\nimport math\n\ndef next_Perfect_Square(n):\n    # Find the square root of n\n    root = math.sqrt(n)\n    \n    # If the square root is an integer, then n is already a perfect square\n    if root.is_integer():\n        root += 1\n    else:\n        # If the square root is not an integer, then find the next integer\n        root = math.ceil(root)\n    \n    # Return the square of the root\n    return root ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36\n```\n\nThe function `next_Perfect_Square` first finds the square root of the given number. If the square root is an integer, it means the given number is already a perfect square, so it increments the root by 1. If the square root is not an integer, it means the given number is not a perfect square, so it finds the next integer. Finally, it returns the square of the root.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the next perfect square greater than a given number. Your code should satisfy the following assertion:\n```python\nassert next_Perfect_Square(35) == 36\n```\n\n    ### Response:\n```python\nimport math\n\ndef next_Perfect_Square(n):\n    # Find the square root of n\n    root = math.sqrt(n)\n    \n    # If the square root is an integer, then n is already a perfect square\n    if root.is_integer():\n        root += 1\n    else:\n        # If the square root is not an integer, then find the next integer\n        root = math.ceil(root)\n    \n    # Return the square of the root\n    return root ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36\n```\n\nThe function `next_Perfect_Square` first finds the square root of the given number. If the square root is an integer, it means the given number is already a perfect square, so it increments the root by 1. If the square root is not an integer, it means the given number is not a perfect square, so it finds the next integer. Finally, it returns the square of the root."}
