{"task_id": "Mbpp/120", "completion": "\n```python\ndef max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n```\n\nIn this script, we define a function `max_product_tuple` that takes a list of tuples as input. We initialize a variable `max_product` to negative infinity. Then, for each tuple in the list, we calculate the absolute product of its elements and compare it with `max_product`. If the product is greater, we update `max_product`. Finally, we return `max_product`.\n\nThe assertion at the end checks if the function works correctly with the given example.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list. Your code should satisfy the following assertion:\n```python\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n```\n\n    ### Response:\n```python\ndef max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n```\n\nIn this script, we define a function `max_product_tuple` that takes a list of tuples as input. We initialize a variable `max_product` to negative infinity. Then, for each tuple in the list, we calculate the absolute product of its elements and compare it with `max_product`. If the product is greater, we update `max_product`. Finally, we return `max_product`.\n\nThe assertion at the end checks if the function works correctly with the given example."}
