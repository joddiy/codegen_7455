{"task_id": "Mbpp/752", "completion": "\n```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\nassert jacobsthal_num(5) == 11\n```\n\nThis Python script defines a function `jacobsthal_num(n)` that calculates the nth Jacobsthal number. The function uses recursion to calculate the Jacobsthal number. The base cases are when `n` is 0 or 1, in which case the function returns 0 or 1 respectively. For `n > 1`, the function returns `2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)`.\n\nThe assertion at the end checks if the function works correctly for the given example. If the function works correctly, the assertion will pass and no output will be produced. If the function does not work correctly, the assertion will fail and an AssertionError will be raised.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... Your code should satisfy the following assertion:\n```python\nassert jacobsthal_num(5) == 11\n```\n\n    ### Response:\n```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\nassert jacobsthal_num(5) == 11\n```\n\nThis Python script defines a function `jacobsthal_num(n)` that calculates the nth Jacobsthal number. The function uses recursion to calculate the Jacobsthal number. The base cases are when `n` is 0 or 1, in which case the function returns 0 or 1 respectively. For `n > 1`, the function returns `2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)`.\n\nThe assertion at the end checks if the function works correctly for the given example. If the function works correctly, the assertion will pass and no output will be produced. If the function does not work correctly, the assertion will fail and an AssertionError will be raised."}
