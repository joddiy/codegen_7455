{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/16", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(input_string):\n    return input_string.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "completion": "def check_type(tup):\n    return all(isinstance(i, type(tup[0])) for i in tup)\n\nassert check_type((5, 6, 7, 3, 5, 6)) == True"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    # Find the first occurrence of the element\n    i = _binary_search(arr, 0, n-1, x)\n \n    # If element is not present, return false\n    if i == -1:\n        return False\n \n    # Check if the element is present more than n/2 times\n    if ((i + n//2) <= (n - 1)) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n \n# A binary search based method to find the first occurrence of x in arr[]\ndef _binary_search(arr, low, high, x):\n    if high >= low:\n        mid = low + (high - low)//2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return _binary_search(arr, (mid + 1), high, x)\n        else:\n            return _binary_search(arr, low, (mid -1), x)\n    return -1\n \n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(input_string):\n    return input_string[::2]\n\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\nassert min_of_three(10,20,0)==0"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    # Separate negative and positive numbers\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n\n    # Combine the negative and positive numbers\n    result = neg + pos\n\n    # Return the result\n    return result\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(string, char):\n    return string.replace(' ', char)\n\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3\n\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    return n | 0b10101010101010101010101010101010\n\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    dict_count = {}\n    for tup in lst:\n        if tup in dict_count:\n            dict_count[tup] += 1\n        else:\n            dict_count[tup] = 1\n    return dict_count\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D list to store the number of sequences for each value of m and n\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # There is only one sequence of length 1, which is [1]\n    for i in range(1, m+1):\n        dp[i][1] = 1\n\n    # For each length from 2 to n\n    for length in range(2, n+1):\n        # For each possible value of the last element in the sequence\n        for last in range(1, m+1):\n            # The number of sequences of length 'length' ending in 'last' is the sum of the number of sequences of length 'length-1' ending in all values less than 'last'\n            for prev in range(last//2, last):\n                dp[last][length] += dp[prev][length-1]\n\n    # The total number of sequences is the sum of the number of sequences of length 'n' ending in all values from 1 to m\n    total = sum(dp[i][n] for i in range(1, m+1))\n\n    return total\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)\n\nassert count_charac(\"python programming\")==18"}
{"task_id": "Mbpp/244", "completion": "import math\n\ndef next_Perfect_Square(n):\n    # Find the square root of n\n    root = math.sqrt(n)\n    \n    # If the square root is an integer, then n is already a perfect square\n    if root.is_integer():\n        root += 1\n    else:\n        # If the square root is not an integer, then find the next integer\n        root = math.ceil(root)\n    \n    # Return the square of the root\n    return root ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize variables\n    inc = [0]*n\n    dec = [0]*n\n    max_sum = [0]*n\n\n    # Initialize first element\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    # Calculate increasing subsequence\n    for i in range(1, n):\n        inc[i] = max(inc[i-1], arr[i])\n\n    # Calculate decreasing subsequence\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1], arr[i])\n\n    # Calculate maximum sum\n    for i in range(n):\n        max_sum[i] = inc[i] + dec[i] - arr[i]\n\n    # Return maximum sum\n    return max(max_sum)\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(s1, s2):\n    return ''.join([char for char in s1 if char not in s2])\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, element):\n    return tup.count(element)\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(complex_number):\n    return cmath.polar(complex_number)\n\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    return sum(1 for i in lst if isinstance(i, int))\n\nassert count_integer([1,2,'abc',1.2]) == 2"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))\n\nassert combinations_colors([\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a, b):\n    return (b, a)\n\nassert swap_numbers(10,20)==(20,10)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tuples1, tuples2):\n    result = []\n    for t1, t2 in zip(tuples1, tuples2):\n        result.append((max(t1[0], t2[0]), max(t1[1], t2[1])))\n    return tuple(result)\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nassert test_duplicate([1,2,3,4,5])==False"}
{"task_id": "Mbpp/260", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(a / b for a, b in zip(t1, t2))\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_age):\n    return human_age * 7\n\n# Test the function\nassert dog_age(12)==61"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return n * (n + 1) // 2\n\nassert find_star_num(3) == 37"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A')==65"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    # Convert the number to a string and sort it\n    sorted_n = sorted(str(n))\n    # Convert the sorted string back to an integer\n    sorted_n = int(''.join(sorted_n))\n    # Check if the number is a perfect square\n    return n == sorted_n ** 2\n\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum\n    sum = 0\n    # Calculate the binomial coefficients\n    for i in range(n+1):\n        # Calculate the binomial coefficient\n        coeff = 1\n        for j in range(i):\n            coeff = coeff * (n - j) // (j + 1)\n        # Add the coefficient to the sum if it's at an even index\n        if i % 2 == 0:\n            sum += coeff\n    return sum\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (7*n - 5) // 2\n\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\nassert all_unique([1,2,3]) == True"}
{"task_id": "Mbpp/56", "completion": "def check(n):\n    # Convert the number to string to reverse it\n    str_n = str(n)\n    # Reverse the string\n    reversed_str_n = str_n[::-1]\n    # Convert the reversed string back to integer\n    reversed_n = int(reversed_str_n)\n    # Check if the number is one less than twice its reverse\n    return n == (reversed_n * 2) - 1\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    # Convert the integer to a string to easily iterate over its digits\n    str_n = str(n)\n    # Iterate over each digit in the string\n    for digit in str_n:\n        # Check if the frequency of the digit is greater than the digit itself\n        if str_n.count(digit) > int(digit):\n            # If so, return False\n            return False\n    # If no digit has a frequency greater than its value, return True\n    return True\n\n# Test the function\nassert validate(1234) == True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(i == element for i in lst)\n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"task_id": "Mbpp/285", "completion": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Testing the function\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"ab\")==(False)\nassert text_match_two_three(\"abb\")==(True)\nassert text_match_two_three(\"abbb\")==(True)"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, n):\n    # Calculate the sum of the array\n    total_sum = sum(arr)\n    \n    # Calculate the sum of the array repeated k times\n    repeated_sum = total_sum * k\n    \n    # Calculate the maximum subarray sum\n    max_sum = max_sub_array_sum(arr, n)\n    \n    # Return the maximum of the sum of the array repeated k times and the maximum subarray sum\n    return max(repeated_sum, max_sum)\n\ndef max_sub_array_sum(arr, n):\n    # Initialize the maximum sum and current sum\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    # Iterate over the array\n    for i in range(0, n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    # Return the maximum sum\n    return max_so_far\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 4) == 30"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublist = [sublist for sublist in lst if len(sublist) == max_len][0]\n    return max_len, max_sublist\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "completion": "def find(num1, num2):\n    return num1 // num2\n\nassert find(10,3) == 3"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\nassert otherside_rightangle(7,8)==10.63014581273465"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = None\n    for item in lst:\n        if isinstance(item, int) or isinstance(item, float):\n            if max_val is None or item > max_val:\n                max_val = item\n    return max_val\n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(lst):\n    lst.sort(reverse=True)\n    return int(\"\".join(map(str, lst)))\n\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)\n\nassert sum_div(8)==7"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\nassert get_Inv_Count([1,20,6,4,5]) == 5"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    # Create a dictionary to store the aggregate of each name\n    aggregate_dict = {}\n    for name, score in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n\n    # Find the name with the maximum aggregate\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    return (max_name, aggregate_dict[max_name])\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < i:\n                dp[i][j] += dp[i - 1][j]\n\n    return dp[2 * n][n]\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        words_list = word.split()\n        for w in words_list:\n            if w.startswith('p') or w.startswith('P'):\n                return w,\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = 0\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    for j in range(1, n):\n        prefix_sum[j] = prefix_sum[j-1] + arr[j]\n    for j in range(i, n):\n        if arr[j] > arr[i-1] and arr[j] < arr[k]:\n            max_sum = max(max_sum, prefix_sum[j])\n    return max_sum\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    # Combine both lists into one\n    combined = [(a, b) for a in list1 for b in list2]\n    # Sort the combined list in descending order based on the product of the factors\n    combined.sort(key=lambda x: x[0]*x[1], reverse=True)\n    # Return the first n products\n    return [x[0]*x[1] for x in combined[:n]]\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\nassert maximum(5,10) == 10"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(x, y):\n    return (x ^ y) < 0\n\nassert opposite_Signs(1,-2) == True"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    else:\n        return n | (n + 1)\n\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius**2) * height\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\nassert highest_Power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, values, scores):\n    result = []\n    for i in range(len(keys)):\n        temp_dict = {keys[i]: {values[i]: scores[i]}}\n        result.append(temp_dict)\n    return result\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n*(7*n-5)//2\n\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/396", "completion": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\nassert check_char(\"abba\") == \"Valid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n\nassert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    return sum(int(digit) for number in lst for digit in str(number))\n\nassert sum_of_digits([10,2,56])==14"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    return len(set(tuple(sorted(i)) for i in lst))\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\nassert minimum(1,2) == 1"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, element):\n    if element in tuplex:\n        return True\n    else:\n        return False\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 != 0\n\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the pivot position\n    pivot = -1\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            pivot = i-1\n            break\n    \n    # If no pivot is found, the number is already the biggest possible\n    if pivot == -1:\n        return n\n    \n    # Find the smallest digit on the right of the pivot that is greater than the pivot\n    for i in range(len(digits)-1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            digits[i], digits[pivot] = digits[pivot], digits[i]\n            break\n    \n    # Reverse the digits from the pivot+1 to the end\n    digits[pivot+1:] = digits[:pivot:-1]\n    \n    # Convert the list of digits back to a number and return\n    return int(''.join(map(str, digits)))\n\nassert rearrange_bigger(12)==21"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    return min(x*y for x, y in lst)\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    # Filter out non-numeric values and find the minimum\n    min_val = min(x for x in lst if isinstance(x, (int, float)))\n    return min_val\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [i for i in lst if i % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [i[n] for i in lst]\n\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2]) if arr[-1]*arr[-2] > arr[0]*arr[1] else (arr[0], arr[1])\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    return max(lst, key=len)\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i*2\n    return sum\n\nassert cube_Sum(2) == 72"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(x) for x in tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average\n\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    # The directrix of a parabola is the line that is perpendicular to the axis of symmetry of the parabola.\n    # The equation of a line is y = mx + c, where m is the slope and c is the y-intercept.\n    # The equation of a line perpendicular to the axis of symmetry of a parabola is y = -1/m*x + c.\n    # The equation of a parabola is y = ax^2 + bx + c.\n    # The derivative of a parabola is 2ax + b.\n    # The derivative of a line is m.\n    # Therefore, m = -1/2a.\n    # Substituting m into the equation of a line, we get y = -1/(2a)*x + c.\n    # Substituting the values of a, b, and c into the equation of the parabola, we get y = -1/(2a)*(ax^2 + bx + c) + c.\n    # Simplifying, we get y = -1/(2a)*(ax^2 + bx) - c/2a + c.\n    # Therefore, the directrix of the parabola is y = -1/(2a)*(ax^2 + bx).\n    m = -1/(2*a)\n    return -m*(a*c**2 + b*c)\n\nassert parabola_directrix(5,3,2)==-198"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True"}
{"task_id": "Mbpp/432", "completion": "import math\n\ndef median_trapezium(a, b, c):\n    return math.sqrt((a+b)**2 - c**2)\n\nassert median_trapezium(15,25,35)==20"}
{"task_id": "Mbpp/433", "completion": "def check_greater(array, num):\n    for i in array:\n        if i <= num:\n            return False\n    return True\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10\n\nassert last_Digit(123) == 3"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [i for i in lst if i < 0]\n\nassert neg_nos([-1,4,5,-6]) == [-1,-6]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return s[::2]\n\nassert remove_odd(\"python\")==(\"yhn\")"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j] or tuples[i][::-1] == tuples[j]:\n                count += 1\n    return count\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))\n\nassert multiple_to_single([11, 33, 50])==113350"}
{"task_id": "Mbpp/440", "completion": "\nimport re\n\ndef find_adverb_position(sentence):\n    # List of adverbs\n    adverbs = ['clearly', 'easily', 'often', 'always', 'never', 'still', 'yet', 'just', 'now', 'here', 'there', 'everywhere', 'nowhere', 'hereafter', 'thereafter', 'everywhereafter', 'nowhereafter', 'hereby', 'thereby', 'everywhereby', 'nowhereby', 'herein', 'therein', 'everywherein', 'nowherein', 'hereof', 'thereof', 'everywhereof', 'nowhereof', 'hereto', 'thereto', 'everywhereto', 'nowhereto', 'hereunder', 'thereunder', 'everywhereunder', 'nowhereunder', 'hither', 'yon', 'thence', 'therefrom', 'therein', 'thereof', 'thereto', 'thereunder', 'therewith', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'thereunto', 'there"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6 * size * size\n\nassert surfacearea_cube(5)==150"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    count = 0\n    total = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        total += 1\n    return count / total\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tuples):\n    result = []\n    for i in range(len(tuples[0])):\n        temp = []\n        for j in range(len(tuples)):\n            temp.append(tuples[j][i])\n        result.append(tuple(temp))\n    return result\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    # Perrin sequence\n    perrin = [3, 0, 2]\n    for i in range(3, n+1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    return sum(perrin[:n])\n\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "completion": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return s.replace(' ', '')\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    if 'z' in text:\n        return True\n    else:\n        return False\n\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month number is in the list of months with 31 days\n    if month_number in months_with_31_days:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_monthnumb_number(5)==True"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    return min(lst, key=len)\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10,20)==200"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    return ''.join([c for c in s if not c.isupper()])\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\nassert recursive_list_sum([1, 2, [3,4],[5,6]])==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\nassert upper_ctr('PYthon') == 1"}
{"task_id": "Mbpp/462", "completion": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain(*map(lambda x: combinations(lst, x), range(len(lst)+1))))\n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = min_product = result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_prod = [0]*n\n    max_prod[0] = arr[0]\n    for i in range(1, n):\n        max_prod[i] = max(max_prod[i-1]*arr[i], arr[i])\n    return max(max_prod)\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) == 9"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))\n\nassert check_Consecutive([1,2,3,4,5]) == True"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/474", "completion": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n    else:\n        return min(arr) + max(arr)\n\n# Test the function\nassert big_sum([1,2,3]) == 4"}
{"task_id": "Mbpp/477", "completion": "def is_lower(s):\n    return s.lower()\n\nassert is_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += char\n    return result\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n\n\nassert first_Digit(123) == 1"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]\n\nassert Split([1,2,3,4,5,6]) == [1,3,5]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\")==\"pYTHON\""}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    # Initialize a 2D array to store the Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test the function\nassert bell_number(2)==2"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to easily access each digit\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Initialize the sum of differences\n    sum_diff = 0\n\n    # Iterate over each digit in the numbers\n    for i in range(max(len(num1_str), len(num2_str))):\n        # Get the digits from the numbers, or 0 if the number is shorter than the other\n        digit1 = int(num1_str[i]) if i < len(num1_str) else 0\n        digit2 = int(num2_str[i]) if i < len(num2_str) else 0\n\n        # Add the absolute difference between the digits to the sum\n        sum_diff += abs(digit1 - digit2)\n\n    return sum_diff\n\n# Test the function\nassert digit_distance_nums(1,2) == 1"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(lst, n):\n    max_sum = current_sum = sum(lst[:n])\n    for i in range(n, len(lst)):\n        current_sum = current_sum - lst[i - n] + lst[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    union = t1 + t2\n    return tuple(sorted(set(union)))\n\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"task_id": "Mbpp/563", "completion": "import re\n\ndef extract_values(string):\n    return re.findall(r'\"([^\"]*)\"', string)\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\nassert count_Pairs([1,2,1],3) == 2"}
{"task_id": "Mbpp/565", "completion": "def split(string):\n    return list(string)\n\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nassert sum_digits(345)==12"}
{"task_id": "Mbpp/567", "completion": "def is_sorted_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17])==True"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]\n\nassert empty_list(5)==[{},{},{},{},{}]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return (all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or\n            all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))\n\nassert is_Monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    return list(set(nums))\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/574", "completion": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # surface area = 2\u03c0rh + 2\u03c0r\u00b2\n    surface_area = 2 * math.pi * radius * height + 2 * math.pi * radius**2\n    return round(surface_area, 2)\n\nassert surfacearea_cylinder(10,5)==942.47"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(main_list, sub_list):\n    return sub_list in [main_list[i:len(sub_list)+i] for i in range(len(main_list))]\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result % 10\n\nassert last_Digit_Factorial(4) == 4"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [val for pair in zip(list1, list2, list3) for val in pair]\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets to remove duplicates and find dissimilar elements\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Find dissimilar elements\n    dissimilar = set1 ^ set2\n\n    # Convert back to tuple and return\n    return tuple(dissimilar)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "completion": "def extract_even(nested_tuple):\n    return tuple(i for i in nested_tuple if isinstance(i, int) and i % 2 == 0)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "completion": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the area of the lateral surface\n    lateral_surface_area = 4 * base_edge * height\n    \n    # Calculate the area of the top surface\n    top_surface_area = (base_edge ** 2) + (2 * base_edge * math.sqrt(height ** 2 + (base_edge ** 2) / 4))\n    \n    # Calculate the total surface area\n    total_surface_area = base_area + lateral_surface_area + top_surface_area\n    \n    return total_surface_area\n\n# Test the function\nassert surface_Area(3,4) == 33"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(main_list, sub_list):\n    return sub_list in main_list\n\nassert is_sublist([2,4,3,5,7],[3,7])==False"}
{"task_id": "Mbpp/582", "completion": "def is_dict_empty(my_dict):\n    return not bool(my_dict)\n\nassert is_dict_empty({10})==False"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res\n\nassert catalan_number(10)==16796"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    # Sort the dataset in descending order based on the price\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    # Return the first n items\n    return sorted_dataset[:n]\n\n# Test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)\n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(lst):\n    return max(lst) - min(lst)\n\nassert big_diff([1,2,3,4]) == 3"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    return [i**2 for i in range(int(start**0.5), int(end**0.5)+1)]\n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    def binomial_coefficient(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res = res * (n - i) // (i + 1)\n        return res\n\n    sum = 0\n    for i in range(1, n):\n        sum += binomial_coefficient(n, i) * binomial_coefficient(n, i + 1)\n    return sum\n\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t) != length:\n            return False\n    return True\n\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    ip_parts = ip.split('.')\n    new_ip_parts = [str(int(part)) for part in ip_parts]\n    return '.'.join(new_ip_parts)\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even - odd if even and odd else None\n\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count\n\nassert min_Swaps(\"1101\",\"1110\") == 1"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged = sorted(arr1 + arr2)\n    # Return the kth element\n    return merged[k - 1]\n\n# Test the function\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\nassert armstrong_number(153)==True"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum_num = n * (n + 1) // 2\n    avg_num = sum_num / n\n    return sum_num, avg_num\n\nassert sum_average(10)==(55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0\n\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n    return lst\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return \" \".join(s.split()[::-1])\n\nassert reverse_words(\"python program\")==(\"program python\")"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nassert prime_num(13)==True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef degree_to_radian(degree):\n    return degree * math.pi / 180\n\nassert degree_to_radian(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    return [list(i) for i in zip(*lst)]\n\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    return [sum(t)/len(t) for t in tuples]\n\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR operation to find the difference\n    xor_result = num1 ^ num2\n    # Count the number of set bits in the XOR result\n    count = bin(xor_result).count(\"1\")\n    # If count is 1, then the numbers differ at one bit position only\n    return count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13,9) == True"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\nassert dif_Square(5) == True"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = [i for i in s if i.isdigit()]\n    chars = [i for i in s if not i.isdigit()]\n    return ''.join(chars + nums)\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 != 0:\n        return merged_list[n//2]\n    else:\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2.0\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(string):\n    return string.upper()\n\nassert is_upper(\"person\") ==\"PERSON\""}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        # The area of the largest triangle that can be inscribed in a semicircle is given by the formula:\n        # Area = (r^2 * pi) / 2\n        return (radius ** 2 * math.pi) / 2\n\n# Testing the function\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == (1 ** 2 * math.pi) / 2\nassert triangle_area(2) == (2 ** 2 * math.pi) / 2"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(' ', '%20')\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "completion": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1,2,3,4,5]) == [2,4]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(colors, patterns):\n    return colors == patterns\n\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i != 0 or j != 0:\n                adjacent_coordinates.append([x + i, y + j])\n    return adjacent_coordinates\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_')\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    # Filter out the zeroes\n    zeroes = [num for num in lst if num == 0]\n    # Filter out the non-zeroes\n    non_zeroes = [num for num in lst if num != 0]\n    # Combine the non-zeroes and zeroes\n    return non_zeroes + zeroes\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += lst[i] ^ lst[j]\n    return sum\n\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[i] < lst[left]:\n            largest = left\n\n        if right < n and lst[largest] < lst[right]:\n            largest = right\n\n        if largest != i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n, -1, -1):\n        heapify(lst, n, i)\n\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(buy_price, sell_price):\n    if buy_price == sell_price:\n        return True\n    else:\n        return False\n\nassert noprofit_noloss(1500,1200)==False"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(V, T):\n    wci = 13.12 + 0.6215*T - 11.37*(V**0.16) + 0.3965*T*(V**0.16)\n    return round(wci)\n\nassert wind_chill(120,35)==40"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"}
{"task_id": "Mbpp/640", "completion": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\s*\\([^)]*\\)\\s*', '', s)\n\nassert remove_parenthesis(\"python (chrome)\") == \"python\""}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2\n\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(i % k == 0 for i in t):\n            result.append(t)\n    return result\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False\n\nassert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    # Initialize the first row\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    # Initialize the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    # Fill in the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    # Calculate the maximum average\n    max_average = dp[N-1][N-1] / (N*N)\n\n    return max_average\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "completion": "def filter_data(student_data, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in student_data.items() if height > min_height and weight > min_weight}\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    return sum(a == b for a, b in zip(list1, list2))\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n\nassert power_base_sum(2,100)==115"}
{"task_id": "Mbpp/725", "completion": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(n):\n    return n % 11 == 0\n\nassert is_Diff(12345) == False"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    # Lateral surface area of a cone = \u221a(r\u00b2 + h\u00b2) * \u03c0 * r\n    return math.sqrt(r**2 + h**2) * math.pi * r\n\nassert lateralsurface_cone(5,12)==204.20352248333654"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(text):\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == num:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum += prod\n    return sum\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n\n    # If n is a power of 2, return n - 1\n    if num_bits == 1:\n        return n - 1\n\n    # Calculate the mask to toggle bits from 1 to num_bits - 2\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the bits using the mask\n    n = n ^ mask\n\n    # Return the result\n    return n\n\n# Test the function\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, value):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\nassert left_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    pattern = r'^[aeiou]'\n    if re.match(pattern, s, re.IGNORECASE):\n        return True\n    else:\n        return False\n\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    # Initialize the index\n    index = 1\n    # Initialize the triangular number\n    triangular_number = 1\n    # Initialize the number of digits\n    num_digits = 1\n    # Loop until the number of digits is equal to n\n    while num_digits < n:\n        # Increment the index and triangular number\n        index += 1\n        triangular_number += index\n        # Calculate the number of digits\n        num_digits = len(str(triangular_number))\n    # Return the index\n    return index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0\n\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(string):\n    return len(set(string)) <= 1\n\nassert all_Characters_Same(\"python\") == False"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(edge_length):\n    # The formula to calculate the area of a tetrahedron is:\n    # Area = sqrt(3) * edge_length^2\n    return math.sqrt(3) * math.pow(edge_length, 2)\n\n# Test the function\nassert area_tetrahedron(3)==15.588457268119894"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return None in tup\n\nassert check_none((10, 4, 5, 6, None)) == True"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/746", "completion": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * math.pi * (radius**2)\n\nassert sector_area(4,45)==6.283185307179586"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    return ' '.join(s)\n\nassert capital_words_spaces(\"Python\") == 'P y t h o n'"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    # Convert all strings to integers\n    lst = [int(i) for i in lst]\n    # Sort the list\n    lst.sort()\n    return lst\n\n# Test the function\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    return lst + list(tup)\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(int(n/2) - 1, -1, -1):\n        if (2*i + 1 < n and arr[i] > arr[2*i + 1]) or (2*i + 2 < n and arr[i] > arr[2*i + 2]):\n            return False\n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n*(n+1)*(n+2)//6\n\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "completion": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1] or lst[j] == lst[i][::-1]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\nassert is_decimal('123.11')==True"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1\n\nassert unique_Element([1,1,1]) == True"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    # Months with 30 days: April, June, September, November\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days\n\n# Test the function\nassert check_monthnumber_number(6)==True"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius**3)\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "completion": "\n    A polite number is a number that can be represented as the sum of two or more consecutive positive integers. For example, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 20"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(nums, target_sum):\n    count = 0\n    nums_dict = {}\n    for num in nums:\n        if target_sum - num in nums_dict:\n            count += nums_dict[target_sum - num]\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    return count\n\nassert get_pairs_count([1,1,1,1],2) == 6"}
{"task_id": "Mbpp/769", "completion": "def Diff(li1, li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening = [\"(\", \"{\", \"[\"]\n    closing = [\")\", \"}\", \"]\"]\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n\n    return not stack\n\nassert check_expression(\"{()}[{}]\") == True"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    words = [word for word in words if len(word) != k]\n    return ' '.join(words)\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    start = string.find(substring)\n    if start == -1:\n        return None\n    else:\n        return (substring, start, start + len(substring) - 1)\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            return False\n    return True\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(s):\n    return chr((sum(ord(c) for c in s) % 26) + ord('a'))\n\nassert get_Char(\"abc\") == \"f\""}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(set(lst))\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst) and lst[j] == lst[i]:\n            j += 1\n        result.append(lst[i:j])\n        i = j\n    return result\n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for i in range(1, len(tuples) + 1):\n        for subset in combinations(tuples, i):\n            result.append((sum(x[0] for x in subset), sum(x[1] for x in subset)))\n    return result\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count % 2 == 0\n\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total_sum\n\nassert odd_length_sum([1,2,4]) == 14"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * odd\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return even * odd\n    return None\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tup_str):\n    # Remove the parentheses and split the string into a list of strings\n    str_list = tup_str[1:-1].split(\", \")\n    # Convert each string in the list to an integer and return as a tuple\n    return tuple(int(s) for s in str_list)\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] > val:\n            return i\n    return len(arr)\n\nassert right_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/787", "completion": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n < 1:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]\n\nassert sequence(10) == 6"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(*args):\n    return tuple(args)\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\nassert even_position([3,2,1]) == False"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    return tuple(i for i in tup if not isinstance(i, tuple))\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    return len(lst)\n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    try:\n        return len(arr) - 1 - arr[::-1].index(x)\n    except ValueError:\n        return -1\n\nassert last([1,2,3],1) == 0"}
{"task_id": "Mbpp/794", "completion": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\nassert text_starta_endb(\"aabbbb\")"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dict):\n    return sum(dict.values())\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n\nassert sum_in_range(2,5) == 8"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)\n\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    # In n<<d, last d bits are 0. To put first 32-d bits of n at last, do bitwise or of n<<d with n>>(32-d)\n    return (n << d)|(n >> (32 - d))\n\nassert left_rotate(16,2) == 64"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(' ', '')\n\nassert remove_all_spaces('python  program')==('pythonprogram')"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(1,2,1) == 2\nassert test_three_equal(1,2,3) == 0"}
{"task_id": "Mbpp/803", "completion": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n\nassert is_product_even([1,2,3]) == True"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    return max(lst, key=sum)\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\nassert first_odd([1,3,5]) == 1"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup\n\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] >= t2[i]:\n            return False\n    return True\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(string):\n    words = string.split()\n    return [word for word in words if len(word) >= 4]\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1\n\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, sub):\n    for string in lst:\n        if sub in string:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(len(n)-2):\n            if n[i] == n[i+1] == n[i+2]:\n                return False\n        return True\n\nassert is_undulating(1212121) == True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b\n\nassert power(3,4) == 81"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n\nassert Find_Min_Length([[1],[1,2]]) == 1"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(num_list):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    return bin(n)[2:]\n\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\nassert next_smallest_palindrome(99)==101"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    arr.sort()\n    return arr[k-1]\n\nassert kth_element([12,3,5,7,19], 2) == 3"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\nassert snake_to_camel('python_program')=='PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    # Create a 2D array to store the results of subproblems\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # Initialization\n    for i in range(m+1):\n        dp[0][i] = 1\n\n    # Fill the dp table in bottom-up manner\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i > j:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][m]\n\n# Test the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(lst)\n\nassert count([True,False,True]) == 2"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    # Concatenate the string with itself\n    s += s\n    # Find the length of the original string\n    n = len(s) // 2\n    # Find the length of the smallest rotation\n    min_rotation = min(s[i:i+n] for i in range(n))\n    # Return the number of rotations\n    return s.index(min_rotation)\n\n# Test the function\nassert find_Rotations(\"aaaa\") == 1"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, rotations):\n    # Calculate the number of odd values in the original binary string\n    original_odd_count = binary_string.count('1')\n\n    # Calculate the number of odd values in the rotated binary strings\n    rotated_odd_count = 0\n    for _ in range(rotations):\n        binary_string = binary_string[-1] + binary_string[:-1]  # Rotate the binary string\n        rotated_odd_count += binary_string.count('1')\n\n    # Calculate the number of binary strings with an odd value\n    odd_count = original_odd_count + rotated_odd_count\n\n    return odd_count\n\nassert odd_Equivalent(\"011001\",6) == 3"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    return list(set.intersection(*map(set, nested_lists)))\n\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\nassert check_integer(\"python\")==False"}
{"task_id": "Mbpp/115", "completion": "def empty_dict(lst):\n    return all(not d for d in lst)\n\nassert empty_dict([{},{},{}])==True"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))\n\nassert tuple_to_int((1,2,3))==123"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(lst):\n    return [tuple(map(float, sublist)) for sublist in lst]\n\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\")==['python','programming']"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n\nassert search([1,1,2,2,3]) == 3"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(string, char):\n    # Find the first and last occurrence of the character\n    first_occurrence = string.find(char)\n    last_occurrence = string.rfind(char)\n\n    # If the character is not found in the string, return the original string\n    if first_occurrence == -1:\n        return string\n\n    # If the first and last occurrence are the same, remove only one occurrence\n    if first_occurrence == last_occurrence:\n        return string[:first_occurrence] + string[first_occurrence+1:]\n\n    # If the first and last occurrence are different, remove both occurrences\n    else:\n        return string[:first_occurrence] + string[first_occurrence+1:last_occurrence] + string[last_occurrence+1:]\n\n# Test the function\nassert remove_Occ(\"hello\",\"l\") == \"heo\""}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36"}
{"task_id": "Mbpp/123", "completion": "def amicable_numbers_sum(n):\n    def d(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    amicable_numbers = set()\n    for i in range(1, n+1):\n        if i not in amicable_numbers:\n            j = d(i)\n            if i != j and d(j) == i:\n                amicable_numbers.update([i, j])\n\n    return sum(amicable_numbers)\n\nassert amicable_numbers_sum(999)==504"}
{"task_id": "Mbpp/124", "completion": "import cmath\nimport math\n\ndef angle_complex(z):\n    return cmath.phase(z)\n\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for char in binary_string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = abs(count_zero - count_one)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(num1, num2):\n    def common_divisors(num):\n        divisors = [1]\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors.extend([i, num//i])\n        return divisors\n\n    return sum(set(common_divisors(num1)) & set(common_divisors(num2)))\n\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10,20)==200"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\nassert long_words(3, \"python is a programming language\") == ['python','programming','language']"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    max_count = max(count_dict.values())\n    for key, value in count_dict.items():\n        if value == max_count:\n            return key\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==\"exercises\""}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(num_list):\n    return sum(num for num in num_list if num < 0)\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n*(2*n-1)\n\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "completion": "import math\n\ndef zero_count(arr):\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = sum(1 for num in arr if num != 0)\n    return zero_count / non_zero_count if non_zero_count != 0 else 0\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1\n        else:\n            n /= 2\n    return n == 0\n\nassert is_Sum_Of_Powers_Of_Two(10) == True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(list_of_lists):\n    return [num for sublist in list_of_lists for num in sublist]\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    for i in range(len(lst), 0, -1):\n        max_index = lst.index(max(lst[0:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                lst = lst[max_index::-1] + lst[max_index + 1:]\n            lst = lst[i - 1::-1] + lst[i:]\n    return lst\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"task_id": "Mbpp/143", "completion": "def find_lists(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, list):\n            count += 1\n    return count\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    # Calculate the area of the base\n    base_area = 0.5 * base * height\n    # Calculate the volume\n    volume = base_area * length\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)\n\nassert max_Abs_Diff((2,1,5,3)) == 4"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(lst1, lst2):\n    return [i for i in lst1 if i not in lst2]\n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/164", "completion": "def sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\nassert are_equivalent(36, 57) == False"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == chr(97 + i).lower():\n            count += 1\n    return count\n\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)\n\nassert frequency([1,2,3], 4) == 0"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
