{"task_id": "Mbpp/301", "completion": "\n```python\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\nThe function `dict_depth` checks if the input is a non-empty dictionary. If it is, it returns 1 (the depth of the dictionary). If it's not, it recursively calls itself on each value in the dictionary, and returns 1 plus the maximum depth of these values.\n\nThe assertion checks if the function returns the correct depth for the given dictionary. If the function is correct, the assertion will pass without any output. If the function is incorrect, the assertion will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the depth of a dictionary. Your code should satisfy the following assertion:\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\n    ### Response:\n```python\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\nThe function `dict_depth` checks if the input is a non-empty dictionary. If it is, it returns 1 (the depth of the dictionary). If it's not, it recursively calls itself on each value in the dictionary, and returns 1 plus the maximum depth of these values.\n\nThe assertion checks if the function returns the correct depth for the given dictionary. If the function is correct, the assertion will pass without any output. If the function is incorrect, the assertion will raise an AssertionError."}
