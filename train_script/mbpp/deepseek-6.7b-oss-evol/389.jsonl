{"task_id": "Mbpp/799", "completion": "\n```python\ndef left_rotate(n, d):\n    # In n<<d, last d bits are 0. To put first 32-d bits of n at last, do bitwise or of n<<d with n>>(32-d)\n    return (n << d)|(n >> (32 - d))\n\nassert left_rotate(16,2) == 64\n```\n\nThis function works by shifting the bits of the number to the left by d places and then combining this with the bits that have been shifted out to the right. The number of bits that are shifted out is determined by the total number of bits in the number (32) minus the number of bits that are being shifted (d).", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n    ### Response:\n```python\ndef left_rotate(n, d):\n    # In n<<d, last d bits are 0. To put first 32-d bits of n at last, do bitwise or of n<<d with n>>(32-d)\n    return (n << d)|(n >> (32 - d))\n\nassert left_rotate(16,2) == 64\n```\n\nThis function works by shifting the bits of the number to the left by d places and then combining this with the bits that have been shifted out to the right. The number of bits that are shifted out is determined by the total number of bits in the number (32) minus the number of bits that are being shifted (d)."}
