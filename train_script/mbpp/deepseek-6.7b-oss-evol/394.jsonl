{"task_id": "Mbpp/805", "completion": "\n```python\ndef max_sum_list(lst):\n    return max(lst, key=sum)\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n```\n\nThe function `max_sum_list` takes a list of lists as input. It uses the built-in `max` function with the `key` parameter set to `sum`. This means that the `max` function will return the list with the highest sum of its elements.\n\nThe assertion checks if the function works correctly. If the function returns the correct list, the assertion will pass. If not, it will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that returns the list in a list of lists whose sum of elements is the highest. Your code should satisfy the following assertion:\n```python\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n```\n\n    ### Response:\n```python\ndef max_sum_list(lst):\n    return max(lst, key=sum)\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n```\n\nThe function `max_sum_list` takes a list of lists as input. It uses the built-in `max` function with the `key` parameter set to `sum`. This means that the `max` function will return the list with the highest sum of its elements.\n\nThe assertion checks if the function works correctly. If the function returns the correct list, the assertion will pass. If not, it will raise an AssertionError."}
