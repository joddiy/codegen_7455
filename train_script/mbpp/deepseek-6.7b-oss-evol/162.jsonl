{"task_id": "Mbpp/297", "completion": "\n```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\nThis Python script defines a function `flatten_list` that takes a nested list as input and returns a flat list. It uses a for loop to iterate over each element in the input list. If the element is a list itself, the function calls itself recursively to flatten that sublist. If the element is not a list, it is appended to the `flat_list`. The function finally returns the `flat_list`. The assertion at the end verifies that the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to flatten a given nested list structure. Your code should satisfy the following assertion:\n```python\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\n    ### Response:\n```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\nThis Python script defines a function `flatten_list` that takes a nested list as input and returns a flat list. It uses a for loop to iterate over each element in the input list. If the element is a list itself, the function calls itself recursively to flatten that sublist. If the element is not a list, it is appended to the `flat_list`. The function finally returns the `flat_list`. The assertion at the end verifies that the function works as expected."}
