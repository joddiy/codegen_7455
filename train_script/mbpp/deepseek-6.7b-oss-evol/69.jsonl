{"task_id": "Mbpp/119", "completion": "\n```python\ndef search(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n\nassert search([1,1,2,2,3]) == 3\n```\n\nThe function `search` iterates over the array in steps of 2 (since every pair of elements either has the same value or is separated by another value). If the current element is not equal to the next one, it means that the current element is the only one in its pair, so it's the element we are looking for. If the function reaches the end of the array without finding such an element, it returns `None`.\n\nThe assertion checks if the function works correctly with the given test case.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n    ### Response:\n```python\ndef search(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n\nassert search([1,1,2,2,3]) == 3\n```\n\nThe function `search` iterates over the array in steps of 2 (since every pair of elements either has the same value or is separated by another value). If the current element is not equal to the next one, it means that the current element is the only one in its pair, so it's the element we are looking for. If the function reaches the end of the array without finding such an element, it returns `None`.\n\nThe assertion checks if the function works correctly with the given test case."}
