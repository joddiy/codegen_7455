{"task_id": "Mbpp/299", "completion": "\n```python\ndef max_aggregate(lst):\n    # Create a dictionary to store the aggregate of each name\n    aggregate_dict = {}\n    for name, score in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n\n    # Find the name with the maximum aggregate\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    return (max_name, aggregate_dict[max_name])\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\nThis script first creates a dictionary where the keys are the names and the values are the aggregates. Then it finds the name with the maximum aggregate and returns a tuple with this name and its aggregate. The assertion at the end checks if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to calculate the maximum aggregate from the list of tuples. Your code should satisfy the following assertion:\n```python\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\n    ### Response:\n```python\ndef max_aggregate(lst):\n    # Create a dictionary to store the aggregate of each name\n    aggregate_dict = {}\n    for name, score in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n\n    # Find the name with the maximum aggregate\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    return (max_name, aggregate_dict[max_name])\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\nThis script first creates a dictionary where the keys are the names and the values are the aggregates. Then it finds the name with the maximum aggregate and returns a tuple with this name and its aggregate. The assertion at the end checks if the function works correctly."}
