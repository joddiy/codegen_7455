{"task_id": "Mbpp/783", "completion": "\n```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\nThis Python script defines a function `rgb_to_hsv` that takes in three parameters representing the red, green, and blue components of an RGB color, and returns the corresponding HSV components. The function first normalizes the RGB values to the range [0, 1] by dividing by 255.0. Then it calculates the maximum and minimum values of the RGB components, and the difference between them. The hue is calculated based on the maximum and minimum values, and the saturation and value are calculated based on the maximum value and the difference. The hue is then converted to the range [0, 360] by taking the modulus of 360. The saturation and value are also converted to the range [0, 100] by multiplying by 100. The function then returns the calculated hue, saturation, and value as a tuple. The assertion at the end checks if the function works correctly for the RGB color (255, 255, 255), which should return the HSV color (0, 0.0, 100.0).", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/. Your code should satisfy the following assertion:\n```python\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\n    ### Response:\n```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\nThis Python script defines a function `rgb_to_hsv` that takes in three parameters representing the red, green, and blue components of an RGB color, and returns the corresponding HSV components. The function first normalizes the RGB values to the range [0, 1] by dividing by 255.0. Then it calculates the maximum and minimum values of the RGB components, and the difference between them. The hue is calculated based on the maximum and minimum values, and the saturation and value are calculated based on the maximum value and the difference. The hue is then converted to the range [0, 360] by taking the modulus of 360. The saturation and value are also converted to the range [0, 100] by multiplying by 100. The function then returns the calculated hue, saturation, and value as a tuple. The assertion at the end checks if the function works correctly for the RGB color (255, 255, 255), which should return the HSV color (0, 0.0, 100.0)."}
