{"task_id": "Mbpp/94", "completion": "\n```python\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\nIn the above Python script, the function `index_minimum` takes a list of tuples as an argument. The `min` function is used with the `key` parameter set to a lambda function that returns the second element of each tuple. This ensures that the minimum tuple is found based on the second element. The function then returns the first element of the minimum tuple.\n\nThe assertion at the end checks if the function works as expected. If the function returns the correct result, the assertion will pass, otherwise it will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value. Your code should satisfy the following assertion:\n```python\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\n    ### Response:\n```python\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\nIn the above Python script, the function `index_minimum` takes a list of tuples as an argument. The `min` function is used with the `key` parameter set to a lambda function that returns the second element of each tuple. This ensures that the minimum tuple is found based on the second element. The function then returns the first element of the minimum tuple.\n\nThe assertion at the end checks if the function works as expected. If the function returns the correct result, the assertion will pass, otherwise it will raise an AssertionError."}
