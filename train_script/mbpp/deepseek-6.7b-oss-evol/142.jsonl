{"task_id": "Mbpp/273", "completion": "\n```python\ndef substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n```\n\nThis Python script defines a function `substract_elements` that takes two tuples as arguments. It uses the `zip` function to pair up the elements of the two tuples at the same index. Then it uses a generator expression to subtract the second tuple's elements from the first tuple's elements. The result is a new tuple. The `assert` statement checks if the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index. Your code should satisfy the following assertion:\n```python\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n```\n\n    ### Response:\n```python\ndef substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n```\n\nThis Python script defines a function `substract_elements` that takes two tuples as arguments. It uses the `zip` function to pair up the elements of the two tuples at the same index. Then it uses a generator expression to subtract the second tuple's elements from the first tuple's elements. The result is a new tuple. The `assert` statement checks if the function works as expected."}
