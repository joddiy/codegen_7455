{"task_id": "Mbpp/784", "completion": "\n```python\ndef mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * odd\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return even * odd\n    return None\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n```\n\nIn the above Python script, we define a function `mul_even_odd` that takes a list as an argument. We initialize two variables `even` and `odd` to `None`. We then iterate over the list. If the number is even, we check if `even` is `None`. If it is, we assign the number to `even`. If it's not, we return the product of `even` and `odd`. If the number is odd, we do the same for `odd`. If `odd` is `None`, we assign the number to `odd`. If it's not, we return the product of `even` and `odd`. If no even or odd number is found, we return `None`. The assertion at the end checks if the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the product of first even and odd number of a given list. Your code should satisfy the following assertion:\n```python\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n```\n\n    ### Response:\n```python\ndef mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * odd\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return even * odd\n    return None\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n```\n\nIn the above Python script, we define a function `mul_even_odd` that takes a list as an argument. We initialize two variables `even` and `odd` to `None`. We then iterate over the list. If the number is even, we check if `even` is `None`. If it is, we assign the number to `even`. If it's not, we return the product of `even` and `odd`. If the number is odd, we do the same for `odd`. If `odd` is `None`, we assign the number to `odd`. If it's not, we return the product of `even` and `odd`. If no even or odd number is found, we return `None`. The assertion at the end checks if the function works as expected."}
