{"task_id": "Mbpp/472", "completion": "\n```python\ndef check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))\n\nassert check_Consecutive([1,2,3,4,5]) == True\n```\n\nThe function `check_Consecutive` takes a list as an argument and checks if the list contains consecutive numbers. It does this by first sorting the list and then comparing it to a list created by using the `range` function with the minimum and maximum values of the original list. If the two lists are identical, it means that the original list contains consecutive numbers.\n\nThe assertion at the end checks if the function works correctly. If the function works correctly, it will not raise any assertion errors. If it doesn't work correctly, it will raise an assertion error.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to check whether the given list contains consecutive numbers or not. Your code should satisfy the following assertion:\n```python\nassert check_Consecutive([1,2,3,4,5]) == True\n```\n\n    ### Response:\n```python\ndef check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))\n\nassert check_Consecutive([1,2,3,4,5]) == True\n```\n\nThe function `check_Consecutive` takes a list as an argument and checks if the list contains consecutive numbers. It does this by first sorting the list and then comparing it to a list created by using the `range` function with the minimum and maximum values of the original list. If the two lists are identical, it means that the original list contains consecutive numbers.\n\nThe assertion at the end checks if the function works correctly. If the function works correctly, it will not raise any assertion errors. If it doesn't work correctly, it will raise an assertion error."}
