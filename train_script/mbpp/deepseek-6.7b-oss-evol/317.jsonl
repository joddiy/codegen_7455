{"task_id": "Mbpp/639", "completion": "\n```python\ndef sample_nam(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n```\n\nThe function `sample_nam` takes a list of names as input. It uses a generator expression to iterate over the names in the list, and for each name, it checks if the first character is lowercase. If it is not, it adds the length of the name to the sum. The function then returns this sum.\n\nThe assertion checks if the function works correctly for the given example. If the function returns 16, the assertion passes, otherwise it raises an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. Your code should satisfy the following assertion:\n```python\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n```\n\n    ### Response:\n```python\ndef sample_nam(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n```\n\nThe function `sample_nam` takes a list of names as input. It uses a generator expression to iterate over the names in the list, and for each name, it checks if the first character is lowercase. If it is not, it adds the length of the name to the sum. The function then returns this sum.\n\nThe assertion checks if the function works correctly for the given example. If the function returns 16, the assertion passes, otherwise it raises an AssertionError."}
