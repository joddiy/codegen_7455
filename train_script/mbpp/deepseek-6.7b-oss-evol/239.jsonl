{"task_id": "Mbpp/473", "completion": "\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\nThis Python script defines a function `tuple_intersection` that takes two lists of tuples as input. It iterates over each tuple in the first list and checks if it is present in the second list. If it is, it adds the tuple to the `intersection` set. The function then returns the `intersection` set.\n\nThe assertion at the end checks if the function works as expected. If the function returns the expected result, the assertion will pass, otherwise it will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should satisfy the following assertion:\n```python\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n    ### Response:\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\nThis Python script defines a function `tuple_intersection` that takes two lists of tuples as input. It iterates over each tuple in the first list and checks if it is present in the second list. If it is, it adds the tuple to the `intersection` set. The function then returns the `intersection` set.\n\nThe assertion at the end checks if the function works as expected. If the function returns the expected result, the assertion will pass, otherwise it will raise an AssertionError."}
