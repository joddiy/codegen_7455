{"task_id": "Mbpp/71", "completion": "\n```python\ndef comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n    return lst\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\nThis script uses the comb sort algorithm to sort a list of elements. The comb sort algorithm is a variation of bubble sort that reduces the gap between elements to be sorted by a factor of 1.3 with each iteration until the gap is 1. The algorithm continues to swap elements until no more swaps are needed, indicating that the list is sorted.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n    ### Response:\n```python\ndef comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n    return lst\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\nThis script uses the comb sort algorithm to sort a list of elements. The comb sort algorithm is a variation of bubble sort that reduces the gap between elements to be sorted by a factor of 1.3 with each iteration until the gap is 1. The algorithm continues to swap elements until no more swaps are needed, indicating that the list is sorted."}
