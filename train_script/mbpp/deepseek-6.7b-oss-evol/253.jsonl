{"task_id": "Mbpp/562", "completion": "\n```python\ndef Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n```\n\nThe function `Find_Max_Length` takes a list of lists as an argument. It uses a generator expression to iterate over each sublist in the list and calculates the length of each sublist. The `max` function then returns the maximum length from these lengths. The `assert` statement checks if the function returns the expected result for the given input.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the length of the longest sublists. Your code should satisfy the following assertion:\n```python\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n```\n\n    ### Response:\n```python\ndef Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n```\n\nThe function `Find_Max_Length` takes a list of lists as an argument. It uses a generator expression to iterate over each sublist in the list and calculates the length of each sublist. The `max` function then returns the maximum length from these lengths. The `assert` statement checks if the function returns the expected result for the given input."}
