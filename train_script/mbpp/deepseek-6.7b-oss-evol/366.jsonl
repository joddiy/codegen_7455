{"task_id": "Mbpp/771", "completion": "\n```python\ndef check_expression(expression):\n    stack = []\n    opening = [\"(\", \"{\", \"[\"]\n    closing = [\")\", \"}\", \"]\"]\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n\n    return not stack\n\nassert check_expression(\"{()}[{}]\") == True\n```\n\nThis Python script uses a stack to keep track of the opening parentheses. When it encounters a closing parenthesis, it checks if the stack is empty or if the top of the stack does not match the closing parenthesis. If either condition is true, it returns False, indicating that the expression is not balanced. If the stack is empty at the end, it returns True, indicating that the expression is balanced.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/. Your code should satisfy the following assertion:\n```python\nassert check_expression(\"{()}[{}]\") == True\n```\n\n    ### Response:\n```python\ndef check_expression(expression):\n    stack = []\n    opening = [\"(\", \"{\", \"[\"]\n    closing = [\")\", \"}\", \"]\"]\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n\n    return not stack\n\nassert check_expression(\"{()}[{}]\") == True\n```\n\nThis Python script uses a stack to keep track of the opening parentheses. When it encounters a closing parenthesis, it checks if the stack is empty or if the top of the stack does not match the closing parenthesis. If either condition is true, it returns False, indicating that the expression is not balanced. If the stack is empty at the end, it returns True, indicating that the expression is balanced."}
