{"task_id": "Mbpp/390", "completion": "\n```python\ndef add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n```\n\nThe function `add_string` takes a list and a format string as input. It uses a list comprehension to apply the format string to each element in the list. The `{0}` in the format string is replaced by the corresponding element from the list. The result is a new list where each element is a formatted string.\n\nThe assertion checks if the function works correctly. If the function works correctly, it will not raise any assertion error. If the function does not work correctly, it will raise an assertion error.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to apply a given format string to all of the elements in a list. Your code should satisfy the following assertion:\n```python\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n```\n\n    ### Response:\n```python\ndef add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n```\n\nThe function `add_string` takes a list and a format string as input. It uses a list comprehension to apply the format string to each element in the list. The `{0}` in the format string is replaced by the corresponding element from the list. The result is a new list where each element is a formatted string.\n\nThe assertion checks if the function works correctly. If the function works correctly, it will not raise any assertion error. If the function does not work correctly, it will raise an assertion error."}
