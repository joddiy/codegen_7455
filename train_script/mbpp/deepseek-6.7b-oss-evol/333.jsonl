{"task_id": "Mbpp/733", "completion": "\n```python\ndef find_first_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == num:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\nThis Python script uses binary search to find the first occurrence of a given number in a sorted array. It starts by setting the low and high pointers to the start and end of the array, respectively. It then enters a while loop, which continues until the low pointer is less than or equal to the high pointer.\n\nIn each iteration of the loop, it calculates the mid index and checks if the number at the mid index is equal to the target number. If it is, it sets the result to the mid index and moves the high pointer one step to the left. This is because we want to find the first occurrence of the number, so we keep searching to the left.\n\nIf the number at the mid index is less than the target number, it moves the low pointer one step to the right. If the number at the mid index is greater than the target number, it moves the high pointer one step to the left.\n\nFinally, it returns the result, which is the index of the first occurrence of the target number in the array. If the target number is not found in the array, it returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following assertion:\n```python\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n    ### Response:\n```python\ndef find_first_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == num:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\nThis Python script uses binary search to find the first occurrence of a given number in a sorted array. It starts by setting the low and high pointers to the start and end of the array, respectively. It then enters a while loop, which continues until the low pointer is less than or equal to the high pointer.\n\nIn each iteration of the loop, it calculates the mid index and checks if the number at the mid index is equal to the target number. If it is, it sets the result to the mid index and moves the high pointer one step to the left. This is because we want to find the first occurrence of the number, so we keep searching to the left.\n\nIf the number at the mid index is less than the target number, it moves the low pointer one step to the right. If the number at the mid index is greater than the target number, it moves the high pointer one step to the left.\n\nFinally, it returns the result, which is the index of the first occurrence of the target number in the array. If the target number is not found in the array, it returns -1."}
