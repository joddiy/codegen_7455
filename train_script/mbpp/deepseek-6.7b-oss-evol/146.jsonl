{"task_id": "Mbpp/278", "completion": "\n```python\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n```\n\nIn this Python script, we define a function `count_first_elements` that takes a tuple as an argument. We initialize a counter `count` to 0. Then we iterate over the elements of the tuple. If we encounter a tuple, we break the loop. Otherwise, we increment the counter. Finally, we return the counter. The assertion checks if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple. Your code should satisfy the following assertion:\n```python\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n```\n\n    ### Response:\n```python\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n```\n\nIn this Python script, we define a function `count_first_elements` that takes a tuple as an argument. We initialize a counter `count` to 0. Then we iterate over the elements of the tuple. If we encounter a tuple, we break the loop. Otherwise, we increment the counter. Finally, we return the counter. The assertion checks if the function works correctly."}
