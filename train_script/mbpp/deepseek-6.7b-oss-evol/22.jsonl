{"task_id": "Mbpp/64", "completion": "\n```python\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nThe function `subject_marks` sorts the list of tuples `marks` based on the second value of each tuple (i.e., the marks). The `key` parameter of the `sorted` function is set to a lambda function that returns the second element of each tuple, so the tuples are sorted based on their marks. The sorted list is then returned.\n\nThe assertion checks if the function works correctly. If the function returns the expected sorted list, the assertion passes, otherwise it raises an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of tuples using the second value of each tuple. Your code should satisfy the following assertion:\n```python\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\n    ### Response:\n```python\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nThe function `subject_marks` sorts the list of tuples `marks` based on the second value of each tuple (i.e., the marks). The `key` parameter of the `sorted` function is set to a lambda function that returns the second element of each tuple, so the tuples are sorted based on their marks. The sorted list is then returned.\n\nThe assertion checks if the function works correctly. If the function returns the expected sorted list, the assertion passes, otherwise it raises an `AssertionError`."}
