{"task_id": "Mbpp/438", "completion": "\n```python\ndef count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j] or tuples[i][::-1] == tuples[j]:\n                count += 1\n    return count\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n```\n\nIn this Python script, we define a function `count_bidirectional` that takes a list of tuples as an argument. We initialize a counter `count` to 0. Then, we iterate over the list of tuples, and for each pair of tuples, we check if they are the same or their reversed versions are the same. If they are, we increment the counter. Finally, we return the counter.\n\nThe assertion at the end checks if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to count bidirectional tuple pairs. Your code should satisfy the following assertion:\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n    ### Response:\n```python\ndef count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j] or tuples[i][::-1] == tuples[j]:\n                count += 1\n    return count\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n```\n\nIn this Python script, we define a function `count_bidirectional` that takes a list of tuples as an argument. We initialize a counter `count` to 0. Then, we iterate over the list of tuples, and for each pair of tuples, we check if they are the same or their reversed versions are the same. If they are, we increment the counter. Finally, we return the counter.\n\nThe assertion at the end checks if the function works correctly."}
