{"task_id": "Mbpp/753", "completion": "\n```python\ndef min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n```\n\nIn the above code, we are using the built-in `sorted` function in Python which sorts the list of tuples based on the second element of each tuple. The `key` parameter of the `sorted` function is a function that takes one argument and returns a key to use for sorting purposes. In this case, we are using a lambda function that returns the second element of each tuple.\n\nThe `[:k]` at the end of the `sorted` function call is a slice that takes the first `k` elements from the sorted list. This is how we get the minimum `k` records.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement does nothing. If the function does not return the expected result, the `assert` statement raises an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases. Your code should satisfy the following assertion:\n```python\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n```\n\n    ### Response:\n```python\ndef min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n```\n\nIn the above code, we are using the built-in `sorted` function in Python which sorts the list of tuples based on the second element of each tuple. The `key` parameter of the `sorted` function is a function that takes one argument and returns a key to use for sorting purposes. In this case, we are using a lambda function that returns the second element of each tuple.\n\nThe `[:k]` at the end of the `sorted` function call is a slice that takes the first `k` elements from the sorted list. This is how we get the minimum `k` records.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement does nothing. If the function does not return the expected result, the `assert` statement raises an `AssertionError`."}
