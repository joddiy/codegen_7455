{"task_id": "Mbpp/580", "completion": "\n```python\ndef extract_even(nested_tuple):\n    return tuple(i for i in nested_tuple if isinstance(i, int) and i % 2 == 0)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\nThe function `extract_even` uses a generator expression to iterate over each element in the nested tuple. If the element is an integer and even, it is included in the new tuple. If the element is not an integer or odd, it is ignored. The function then returns the new tuple.\n\nThe assertion checks if the function works as expected. If the function returns the expected result, the assertion passes, otherwise it raises an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to remove uneven elements in the nested mixed tuple. Your code should satisfy the following assertion:\n```python\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\n    ### Response:\n```python\ndef extract_even(nested_tuple):\n    return tuple(i for i in nested_tuple if isinstance(i, int) and i % 2 == 0)\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\nThe function `extract_even` uses a generator expression to iterate over each element in the nested tuple. If the element is an integer and even, it is included in the new tuple. If the element is not an integer or odd, it is ignored. The function then returns the new tuple.\n\nThe assertion checks if the function works as expected. If the function returns the expected result, the assertion passes, otherwise it raises an AssertionError."}
