{"task_id": "Mbpp/730", "completion": "\n```python\ndef consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n```\n\nThe function `consecutive_duplicates` uses list comprehension to create a new list that only includes elements from the original list if they are not equal to the previous element. This effectively removes consecutive duplicates from the list. The assertion at the end checks if the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to remove consecutive duplicates of a given list. Your code should satisfy the following assertion:\n```python\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n```\n\n    ### Response:\n```python\ndef consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n```\n\nThe function `consecutive_duplicates` uses list comprehension to create a new list that only includes elements from the original list if they are not equal to the previous element. This effectively removes consecutive duplicates from the list. The assertion at the end checks if the function works as expected."}
