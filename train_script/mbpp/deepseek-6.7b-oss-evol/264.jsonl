{"task_id": "Mbpp/576", "completion": "\n```python\ndef is_Sub_Array(main_list, sub_list):\n    return sub_list in [main_list[i:len(sub_list)+i] for i in range(len(main_list))]\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\nThe function `is_Sub_Array` checks if a given sublist is a sublist of a main list by slicing the main list into smaller lists of the same length as the sublist and checking if the sublist is in these smaller lists. If the sublist is found in any of these smaller lists, the function returns `True`, otherwise it returns `False`.\n\nThe assertion `assert is_Sub_Array([1,4,3,5],[1,2]) == False` checks if the function correctly identifies that the sublist [1,2] is not a sublist of the main list [1,4,3,5]. If the function is correct, this assertion should pass without any error.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to check whether a list is sublist of another or not. Your code should satisfy the following assertion:\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\n    ### Response:\n```python\ndef is_Sub_Array(main_list, sub_list):\n    return sub_list in [main_list[i:len(sub_list)+i] for i in range(len(main_list))]\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\nThe function `is_Sub_Array` checks if a given sublist is a sublist of a main list by slicing the main list into smaller lists of the same length as the sublist and checking if the sublist is in these smaller lists. If the sublist is found in any of these smaller lists, the function returns `True`, otherwise it returns `False`.\n\nThe assertion `assert is_Sub_Array([1,4,3,5],[1,2]) == False` checks if the function correctly identifies that the sublist [1,2] is not a sublist of the main list [1,4,3,5]. If the function is correct, this assertion should pass without any error."}
