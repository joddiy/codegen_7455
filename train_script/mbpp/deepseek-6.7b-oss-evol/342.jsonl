{"task_id": "Mbpp/743", "completion": "\n```python\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\nIn this Python script, we define a function `rotate_right` that takes a list and a number `n` as input. It returns a new list that is the result of rotating the original list to the right by `n` items. The `[-n:]` part of the expression gets the last `n` items of the list, and the `[:-n]` part gets all but the last `n` items of the list. These are then concatenated in the correct order to form the rotated list.\n\nThe assertion at the end checks that the function works correctly. If the function is correct, the assertion will not raise any errors. If the function is incorrect, the assertion will raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/. Your code should satisfy the following assertion:\n```python\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\n    ### Response:\n```python\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\nIn this Python script, we define a function `rotate_right` that takes a list and a number `n` as input. It returns a new list that is the result of rotating the original list to the right by `n` items. The `[-n:]` part of the expression gets the last `n` items of the list, and the `[:-n]` part gets all but the last `n` items of the list. These are then concatenated in the correct order to form the rotated list.\n\nThe assertion at the end checks that the function works correctly. If the function is correct, the assertion will not raise any errors. If the function is incorrect, the assertion will raise an `AssertionError`."}
