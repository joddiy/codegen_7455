{"task_id": "Mbpp/229", "completion": "\n```python\ndef re_arrange_array(arr, n):\n    # Separate negative and positive numbers\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n\n    # Combine the negative and positive numbers\n    result = neg + pos\n\n    # Return the result\n    return result\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n```\n\nThis Python script defines a function `re_arrange_array` that takes in an array and an integer n. It separates the first n elements of the array into two lists: one for negative numbers and one for positive numbers. It then combines these two lists in the desired order, and returns the result. The function is then tested with the given assertion.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. Your code should satisfy the following assertion:\n```python\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n```\n\n    ### Response:\n```python\ndef re_arrange_array(arr, n):\n    # Separate negative and positive numbers\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n\n    # Combine the negative and positive numbers\n    result = neg + pos\n\n    # Return the result\n    return result\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n```\n\nThis Python script defines a function `re_arrange_array` that takes in an array and an integer n. It separates the first n elements of the array into two lists: one for negative numbers and one for positive numbers. It then combines these two lists in the desired order, and returns the result. The function is then tested with the given assertion."}
