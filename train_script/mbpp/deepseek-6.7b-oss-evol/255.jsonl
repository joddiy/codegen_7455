{"task_id": "Mbpp/564", "completion": "\n```python\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\nassert count_Pairs([1,2,1],3) == 2\n```\n\nThe function `count_Pairs` takes a list of integers `lst` and the length of the list `n` as input. It initializes a counter `count` to 0. It then iterates over the list using two nested loops, where the outer loop starts from the first element and the inner loop starts from the next element of the outer loop. If the elements at the current positions are not equal, it increments the counter. Finally, it returns the counter.\n\nThe assertion `assert count_Pairs([1,2,1],3) == 2` checks if the function `count_Pairs` returns the expected output for the given input. If the function returns the expected output, the assertion will pass, otherwise it will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. Your code should satisfy the following assertion:\n```python\nassert count_Pairs([1,2,1],3) == 2\n```\n\n    ### Response:\n```python\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\nassert count_Pairs([1,2,1],3) == 2\n```\n\nThe function `count_Pairs` takes a list of integers `lst` and the length of the list `n` as input. It initializes a counter `count` to 0. It then iterates over the list using two nested loops, where the outer loop starts from the first element and the inner loop starts from the next element of the outer loop. If the elements at the current positions are not equal, it increments the counter. Finally, it returns the counter.\n\nThe assertion `assert count_Pairs([1,2,1],3) == 2` checks if the function `count_Pairs` returns the expected output for the given input. If the function returns the expected output, the assertion will pass, otherwise it will raise an AssertionError."}
