{"task_id": "Mbpp/308", "completion": "\n```python\ndef large_product(list1, list2, n):\n    # Combine both lists into one\n    combined = [(a, b) for a in list1 for b in list2]\n    # Sort the combined list in descending order based on the product of the factors\n    combined.sort(key=lambda x: x[0]*x[1], reverse=True)\n    # Return the first n products\n    return [x[0]*x[1] for x in combined[:n]]\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n```\n\nThis script first combines the two input lists into one list of tuples, where each tuple contains one factor from each list. It then sorts this combined list in descending order based on the product of the factors. Finally, it returns the products of the first n tuples in the sorted list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list. Your code should satisfy the following assertion:\n```python\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n```\n\n    ### Response:\n```python\ndef large_product(list1, list2, n):\n    # Combine both lists into one\n    combined = [(a, b) for a in list1 for b in list2]\n    # Sort the combined list in descending order based on the product of the factors\n    combined.sort(key=lambda x: x[0]*x[1], reverse=True)\n    # Return the first n products\n    return [x[0]*x[1] for x in combined[:n]]\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n```\n\nThis script first combines the two input lists into one list of tuples, where each tuple contains one factor from each list. It then sorts this combined list in descending order based on the product of the factors. Finally, it returns the products of the first n tuples in the sorted list."}
