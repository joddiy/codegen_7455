{"task_id": "Mbpp/475", "completion": "\n```python\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\nThe `sort_counter` function takes a dictionary `d` as input and returns a list of tuples, where each tuple is a key-value pair from the dictionary, sorted by value in descending order. The `sorted` function is used with a lambda function as the key argument to sort the items by value. The `reverse=True` argument is used to sort in descending order.\n\nThe assertion checks if the function is working correctly. If the function returns the expected result, the assertion will pass, otherwise it will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a dictionary by value. Your code should satisfy the following assertion:\n```python\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\n    ### Response:\n```python\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\nThe `sort_counter` function takes a dictionary `d` as input and returns a list of tuples, where each tuple is a key-value pair from the dictionary, sorted by value in descending order. The `sorted` function is used with a lambda function as the key argument to sort the items by value. The `reverse=True` argument is used to sort in descending order.\n\nThe assertion checks if the function is working correctly. If the function returns the expected result, the assertion will pass, otherwise it will raise an AssertionError."}
