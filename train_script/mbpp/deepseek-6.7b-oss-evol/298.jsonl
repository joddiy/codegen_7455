{"task_id": "Mbpp/614", "completion": "\n```python\ndef cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n```\n\nThe function `cummulative_sum` takes a list of tuples as input. It initializes a variable `total` to 0. Then it iterates over each tuple in the list, adds the sum of the tuple to `total`, and finally returns `total`.\n\nThe assertion checks if the function works correctly by comparing the result of the function with the expected output. If the function works correctly, the assertion will pass, otherwise it will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list. Your code should satisfy the following assertion:\n```python\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n```\n\n    ### Response:\n```python\ndef cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n```\n\nThe function `cummulative_sum` takes a list of tuples as input. It initializes a variable `total` to 0. Then it iterates over each tuple in the list, adds the sum of the tuple to `total`, and finally returns `total`.\n\nThe assertion checks if the function works correctly by comparing the result of the function with the expected output. If the function works correctly, the assertion will pass, otherwise it will raise an AssertionError."}
