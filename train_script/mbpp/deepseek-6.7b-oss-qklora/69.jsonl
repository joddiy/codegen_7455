{"task_id": "Mbpp/119", "completion": "\n```python\ndef search(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n    return arr[left]\n```\n\n    ### Explanation:\n    The function uses binary search to find the element that appears only once in a sorted array. It starts with the left and right pointers at the beginning and end of the array, respectively. It then iterates through the array, checking the midpoint of the current subarray. If the midpoint is the same as the element before it, it checks if the midpoint is even or odd to determine which side of the array to search next. If the midpoint is the same as the element after it, it does the same. If the midpoint is not the same as either of its neighbors, it returns the element.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n    ### Response:\n```python\ndef search(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n    return arr[left]\n```\n\n    ### Explanation:\n    The function uses binary search to find the element that appears only once in a sorted array. It starts with the left and right pointers at the beginning and end of the array, respectively. It then iterates through the array, checking the midpoint of the current subarray. If the midpoint is the same as the element before it, it checks if the midpoint is even or odd to determine which side of the array to search next. If the midpoint is the same as the element after it, it does the same. If the midpoint is not the same as either of its neighbors, it returns the element."}
