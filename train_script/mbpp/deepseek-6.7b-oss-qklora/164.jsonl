{"task_id": "Mbpp/300", "completion": "\n    ```python\n    import math\n\n    def count_binary_seq(n):\n        if n == 1:\n            return 2.0\n        else:\n            return 2 * count_binary_seq(n - 1)\n\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    ```\n\n    The `count_binary_seq` function takes an integer `n` as input and returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. The base case is when `n` is 1, in which case the function returns 2.0. The recursive case multiplies the count by 2 for each iteration. The assertion checks if the count of binary sequences of length 2 for `n` is approximately equal to 2.0.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should satisfy the following assertion:\n```python\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\n    ### Response:\n    ```python\n    import math\n\n    def count_binary_seq(n):\n        if n == 1:\n            return 2.0\n        else:\n            return 2 * count_binary_seq(n - 1)\n\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    ```\n\n    The `count_binary_seq` function takes an integer `n` as input and returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. The base case is when `n` is 1, in which case the function returns 2.0. The recursive case multiplies the count by 2 for each iteration. The assertion checks if the count of binary sequences of length 2 for `n` is approximately equal to 2.0."}
