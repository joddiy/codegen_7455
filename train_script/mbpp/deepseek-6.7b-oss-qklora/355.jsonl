{"task_id": "Mbpp/758", "completion": "\n```python\ndef unique_sublists(lst):\n    unique_sublists = {}\n    for sublist in lst:\n        if tuple(sublist) in unique_sublists:\n            unique_sublists[tuple(sublist)] += 1\n        else:\n            unique_sublists[tuple(sublist)] = 1\n    return unique_sublists\n```\n\n    ### Test:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. Your code should satisfy the following assertion:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\n    ### Response:\n```python\ndef unique_sublists(lst):\n    unique_sublists = {}\n    for sublist in lst:\n        if tuple(sublist) in unique_sublists:\n            unique_sublists[tuple(sublist)] += 1\n        else:\n            unique_sublists[tuple(sublist)] = 1\n    return unique_sublists\n```\n\n    ### Test:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```"}
