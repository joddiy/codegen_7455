{"task_id": "Mbpp/256", "completion": "\n```python\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```\n\nThe `count_Primes_nums` function iterates through all numbers from 2 to the given number and counts the number of prime numbers. The `is_prime` function checks if a number is prime by iterating through all numbers up to the square root of the given number and checking if it is divisible by any of them. If the number is prime, the function returns True, otherwise it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number. Your code should satisfy the following assertion:\n```python\nassert count_Primes_nums(5) == 2\n```\n\n    ### Response:\n```python\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```\n\nThe `count_Primes_nums` function iterates through all numbers from 2 to the given number and counts the number of prime numbers. The `is_prime` function checks if a number is prime by iterating through all numbers up to the square root of the given number and checking if it is divisible by any of them. If the number is prime, the function returns True, otherwise it returns False."}
