{"task_id": "Mbpp/223", "completion": "\n```python\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x in arr\n    i = binary_search(arr, 0, n-1, x)\n    # If element is not present, return false\n    if i == -1:\n        return False\n    # Check if the element is present more than n/2 times\n    if (i + n//2 <= n-1) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid -1), x)\n    return -1\n```\n\n    ### Explanation:\n    The `is_majority` function first uses binary search to find the index of the first occurrence of the element x in the sorted array arr. If the element is not present, it returns False. If the element is present, it checks if the element is present more than n/2 times by comparing the index of the first occurrence with the index of the element that would be at the middle of the array if it were sorted. If the element is present more than n/2 times, it returns True, otherwise it returns False.\n\n    The `binary_search` function is a recursive implementation of the binary search algorithm. It takes the array, the starting and ending indices, and the element to be searched as input and returns the index of the first occurrence of the element in the array. If the element is not present, it returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.). Your code should satisfy the following assertion:\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n    ### Response:\n```python\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x in arr\n    i = binary_search(arr, 0, n-1, x)\n    # If element is not present, return false\n    if i == -1:\n        return False\n    # Check if the element is present more than n/2 times\n    if (i + n//2 <= n-1) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid -1), x)\n    return -1\n```\n\n    ### Explanation:\n    The `is_majority` function first uses binary search to find the index of the first occurrence of the element x in the sorted array arr. If the element is not present, it returns False. If the element is present, it checks if the element is present more than n/2 times by comparing the index of the first occurrence with the index of the element that would be at the middle of the array if it were sorted. If the element is present more than n/2 times, it returns True, otherwise it returns False.\n\n    The `binary_search` function is a recursive implementation of the binary search algorithm. It takes the array, the starting and ending indices, and the element to be searched as input and returns the index of the first occurrence of the element in the array. If the element is not present, it returns -1."}
