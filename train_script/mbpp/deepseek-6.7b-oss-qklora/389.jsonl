{"task_id": "Mbpp/799", "completion": "\n```python\ndef left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a number to the left by d positions.\n\n    Args:\n    num (int): The number to rotate.\n    d (int): The number of positions to rotate.\n\n    Returns:\n    int: The rotated number.\n    \"\"\"\n    return ((num << d) | (num >> (32 - d))) & 0xFFFFFFFF\n```\n\n    ### Explanation:\n    The function `left_rotate` takes two arguments: `num`, which is the number to rotate, and `d`, which is the number of positions to rotate. It uses bitwise operations to rotate the bits of `num` to the left by `d` positions. The `<<` operator shifts the bits of `num` to the left by `d` positions, and the `>>` operator shifts the bits of `num` to the right by `32 - d` positions. The `|` operator combines the shifted bits, and the `&` operator masks the result to ensure that it is a 32-bit number. The result is then returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n    ### Response:\n```python\ndef left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a number to the left by d positions.\n\n    Args:\n    num (int): The number to rotate.\n    d (int): The number of positions to rotate.\n\n    Returns:\n    int: The rotated number.\n    \"\"\"\n    return ((num << d) | (num >> (32 - d))) & 0xFFFFFFFF\n```\n\n    ### Explanation:\n    The function `left_rotate` takes two arguments: `num`, which is the number to rotate, and `d`, which is the number of positions to rotate. It uses bitwise operations to rotate the bits of `num` to the left by `d` positions. The `<<` operator shifts the bits of `num` to the left by `d` positions, and the `>>` operator shifts the bits of `num` to the right by `32 - d` positions. The `|` operator combines the shifted bits, and the `&` operator masks the result to ensure that it is a 32-bit number. The result is then returned."}
