{"task_id": "Mbpp/311", "completion": "\n```python\ndef set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    if num & (num + 1) == 0:\n        return num\n    return num | (num + 1)\n```\n\n    ### Explanation:\n    The function `set_left_most_unset_bit` takes an integer `num` as input and returns the integer with the left most unset bit set. If the input is 0, the function returns 1. If the input has no unset bits, the function returns the input itself. Otherwise, it returns the input with the left most unset bit set.\n\n    The function uses bitwise operations to determine the left most unset bit and sets it. If the input is 0, the function returns 1. If the input has no unset bits, the function returns the input itself. Otherwise, it returns the input with the left most unset bit set.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to set the left most unset bit. Your code should satisfy the following assertion:\n```python\nassert set_left_most_unset_bit(10) == 14\n```\n\n    ### Response:\n```python\ndef set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    if num & (num + 1) == 0:\n        return num\n    return num | (num + 1)\n```\n\n    ### Explanation:\n    The function `set_left_most_unset_bit` takes an integer `num` as input and returns the integer with the left most unset bit set. If the input is 0, the function returns 1. If the input has no unset bits, the function returns the input itself. Otherwise, it returns the input with the left most unset bit set.\n\n    The function uses bitwise operations to determine the left most unset bit and sets it. If the input is 0, the function returns 1. If the input has no unset bits, the function returns the input itself. Otherwise, it returns the input with the left most unset bit set."}
