{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    # Sort the list of numbers in descending order\n    numbers.sort(reverse=True)\n    \n    # Initialize the subset with the first number\n    subset = [numbers[0]]\n    \n    # Iterate through the remaining numbers\n    for num in numbers[1:]:\n        # Check if the current number is divisible by the last number in the subset\n        if num % subset[-1] == 0:\n            # If it is, add the number to the subset\n            subset.append(num)\n    \n    # Return the size of the largest subset\n    return len(subset)\n```\n\n    ### Test:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(numbers):\n    # Sort the list of numbers in descending order\n    numbers.sort(reverse=True)\n    \n    # Initialize the subset with the first number\n    subset = [numbers[0]]\n    \n    # Iterate through the remaining numbers\n    for num in numbers[1:]:\n        # Check if the current number is divisible by the last number in the subset\n        if num % subset[-1] == 0:\n            # If it is, add the number to the subset\n            subset.append(num)\n    \n    # Return the size of the largest subset\n    return len(subset)\n```\n\n    ### Test:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```"}
