{"task_id": "Mbpp/783", "completion": "\n    ```python\n    def rgb_to_hsv(r, g, b):\n        r, g, b = r / 255.0, g / 255.0, b / 255.0\n        cmax = max(r, g, b)\n        cmin = min(r, g, b)\n        delta = cmax - cmin\n        if cmax == cmin:\n            h = 0\n        elif cmax == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif cmax == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        elif cmax == b:\n            h = (60 * ((r - g) / delta) + 240) % 360\n        if cmax == 0:\n            s = 0\n        else:\n            s = (delta / cmax) * 100\n        v = cmax * 100\n        return h, s, v\n    ```\n    This function takes in RGB values (r, g, b) and returns the corresponding HSV values (h, s, v). It first normalizes the RGB values to be between 0 and 1, then calculates the HSV values based on the formula provided in the link. The function returns the HSV values as a tuple.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/. Your code should satisfy the following assertion:\n```python\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\n    ### Response:\n    ```python\n    def rgb_to_hsv(r, g, b):\n        r, g, b = r / 255.0, g / 255.0, b / 255.0\n        cmax = max(r, g, b)\n        cmin = min(r, g, b)\n        delta = cmax - cmin\n        if cmax == cmin:\n            h = 0\n        elif cmax == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif cmax == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        elif cmax == b:\n            h = (60 * ((r - g) / delta) + 240) % 360\n        if cmax == 0:\n            s = 0\n        else:\n            s = (delta / cmax) * 100\n        v = cmax * 100\n        return h, s, v\n    ```\n    This function takes in RGB values (r, g, b) and returns the corresponding HSV values (h, s, v). It first normalizes the RGB values to be between 0 and 1, then calculates the HSV values based on the formula provided in the link. The function returns the HSV values as a tuple."}
