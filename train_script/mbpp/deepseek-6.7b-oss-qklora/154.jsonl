{"task_id": "Mbpp/286", "completion": "\n    ```python\n    def max_sub_array_sum_repeated(arr, k, n):\n        # Calculate the maximum sum of a contiguous subarray in the modified array\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n * k):\n            current_sum = max(current_sum + arr[i % n], arr[i % n])\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    ```\n    The `max_sub_array_sum_repeated` function takes three arguments: `arr`, `k`, and `n`. It calculates the maximum sum of a contiguous subarray in the modified array by repeating the given array `k` times. The function iterates through the modified array and updates the maximum sum and current sum as it goes. Finally, it returns the maximum sum.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times. Your code should satisfy the following assertion:\n```python\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n```\n\n    ### Response:\n    ```python\n    def max_sub_array_sum_repeated(arr, k, n):\n        # Calculate the maximum sum of a contiguous subarray in the modified array\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n * k):\n            current_sum = max(current_sum + arr[i % n], arr[i % n])\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    ```\n    The `max_sub_array_sum_repeated` function takes three arguments: `arr`, `k`, and `n`. It calculates the maximum sum of a contiguous subarray in the modified array by repeating the given array `k` times. The function iterates through the modified array and updates the maximum sum and current sum as it goes. Finally, it returns the maximum sum."}
