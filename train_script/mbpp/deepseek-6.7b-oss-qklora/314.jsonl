{"task_id": "Mbpp/635", "completion": "\n    ```python\n    def heap_sort(arr):\n        n = len(arr)\n        for i in range(n, -1, -1):\n            heapify(arr, n, i)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n        return arr\n\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    ```\n\n    ### Explanation:\n    The heap_sort function first builds a max heap from the given list. Then, it repeatedly swaps the root element with the last element, reduces the size of the heap by one, and calls heapify on the reduced heap. This process sorts the list in ascending order.\n\n    The heapify function takes an array, the size of the heap, and the index of the root element. It compares the root element with its left and right child, and swaps it with the largest element if necessary. This process ensures that the subtree rooted at the given index satisfies the max heap property.\n\n    The heap_sort function repeatedly calls heapify on the array to build a max heap, and then swaps the root element with the last element, reducing the size of the heap by one, and calls heapify on the reduced heap. This process sorts the list in ascending order.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort the given list. Your code should satisfy the following assertion:\n```python\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n    ### Response:\n    ```python\n    def heap_sort(arr):\n        n = len(arr)\n        for i in range(n, -1, -1):\n            heapify(arr, n, i)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n        return arr\n\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    ```\n\n    ### Explanation:\n    The heap_sort function first builds a max heap from the given list. Then, it repeatedly swaps the root element with the last element, reduces the size of the heap by one, and calls heapify on the reduced heap. This process sorts the list in ascending order.\n\n    The heapify function takes an array, the size of the heap, and the index of the root element. It compares the root element with its left and right child, and swaps it with the largest element if necessary. This process ensures that the subtree rooted at the given index satisfies the max heap property.\n\n    The heap_sort function repeatedly calls heapify on the array to build a max heap, and then swaps the root element with the last element, reducing the size of the heap by one, and calls heapify on the reduced heap. This process sorts the list in ascending order."}
