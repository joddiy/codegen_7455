{"task_id": "Mbpp/771", "completion": "\n    ```python\n    def check_expression(expression):\n        stack = []\n        for char in expression:\n            if char in [\"(\", \"{\", \"[\"]:\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                if char == \")\" and stack[-1] != \"(\":\n                    return False\n                if char == \"}\" and stack[-1] != \"{\":\n                    return False\n                if char == \"]\" and stack[-1] != \"[\":\n                    return False\n                stack.pop()\n        return not stack\n    ```\n    The `check_expression` function uses a stack to keep track of the opening brackets. It iterates through the expression, pushing opening brackets onto the stack and popping them off when it encounters a closing bracket. If the stack is empty at the end, the expression is balanced, and the function returns `True`. If the stack is not empty at the end, the expression is not balanced, and the function returns `False`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/. Your code should satisfy the following assertion:\n```python\nassert check_expression(\"{()}[{}]\") == True\n```\n\n    ### Response:\n    ```python\n    def check_expression(expression):\n        stack = []\n        for char in expression:\n            if char in [\"(\", \"{\", \"[\"]:\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                if char == \")\" and stack[-1] != \"(\":\n                    return False\n                if char == \"}\" and stack[-1] != \"{\":\n                    return False\n                if char == \"]\" and stack[-1] != \"[\":\n                    return False\n                stack.pop()\n        return not stack\n    ```\n    The `check_expression` function uses a stack to keep track of the opening brackets. It iterates through the expression, pushing opening brackets onto the stack and popping them off when it encounters a closing bracket. If the stack is empty at the end, the expression is balanced, and the function returns `True`. If the stack is not empty at the end, the expression is not balanced, and the function returns `False`."}
