{"task_id": "Mbpp/558", "completion": "\n```python\ndef digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    distance = 0\n    for i in range(len(num1_str)):\n        distance += abs(int(num1_str[i]) - int(num2_str[i]))\n    return distance\n```\n\n    ### Test:\n```python\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(12,23) == 3\nassert digit_distance_nums(123,234) == 3\nassert digit_distance_nums(1234,2345) == 4\nassert digit_distance_nums(12345,23456) == 5\nassert digit_distance_nums(123456,234567) == 6\nassert digit_distance_nums(1234567,2345678) == 7\nassert digit_distance_nums(12345678,23456789) == 8\nassert digit_distance_nums(123456789,234567890) == 9\nassert digit_distance_nums(1234567890,2345678901) == 10\nassert digit_distance_nums(12345678901,23456789012) == 11\nassert digit_distance_nums(123456789012,234567890123) == 12\nassert digit_distance_nums(1234567890123,2345678901234) == 13\nassert digit_distance_nums(12345678901234,23456789012345) == 14\nassert digit_distance_nums(123456789012345,234567890123456) == 15\nassert digit_distance_nums(1234567890123456,2345678901234567) == 16\nassert digit_distance_nums(12345678901234567,23456789012345678) == 17\nassert digit_distance_nums(123456789012345678,234567890123456789) == 18\nassert digit_distance_nums(1234567890123456789,2345678901234567890) == 19\nassert digit_distance_nums(12345678901234567890,23456789012345678901) == 20\nassert digit_distance_nums(123456789012345678901,234567890123456789012) == 21\nassert digit_distance_nums(1234567890123456789012,2345678901234567890123) == 22\nassert digit_distance_nums(1234567890123", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n    ### Response:\n```python\ndef digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    distance = 0\n    for i in range(len(num1_str)):\n        distance += abs(int(num1_str[i]) - int(num2_str[i]))\n    return distance\n```\n\n    ### Test:\n```python\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(12,23) == 3\nassert digit_distance_nums(123,234) == 3\nassert digit_distance_nums(1234,2345) == 4\nassert digit_distance_nums(12345,23456) == 5\nassert digit_distance_nums(123456,234567) == 6\nassert digit_distance_nums(1234567,2345678) == 7\nassert digit_distance_nums(12345678,23456789) == 8\nassert digit_distance_nums(123456789,234567890) == 9\nassert digit_distance_nums(1234567890,2345678901) == 10\nassert digit_distance_nums(12345678901,23456789012) == 11\nassert digit_distance_nums(123456789012,234567890123) == 12\nassert digit_distance_nums(1234567890123,2345678901234) == 13\nassert digit_distance_nums(12345678901234,23456789012345) == 14\nassert digit_distance_nums(123456789012345,234567890123456) == 15\nassert digit_distance_nums(1234567890123456,2345678901234567) == 16\nassert digit_distance_nums(12345678901234567,23456789012345678) == 17\nassert digit_distance_nums(123456789012345678,234567890123456789) == 18\nassert digit_distance_nums(1234567890123456789,2345678901234567890) == 19\nassert digit_distance_nums(12345678901234567890,23456789012345678901) == 20\nassert digit_distance_nums(123456789012345678901,234567890123456789012) == 21\nassert digit_distance_nums(1234567890123456789012,2345678901234567890123) == 22\nassert digit_distance_nums(1234567890123"}
