{"task_id": "Mbpp/803", "completion": "\n    ```python\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        if num == 0 or num == 1:\n            return True\n        start = 1\n        end = num\n        while start <= end:\n            mid = (start + end) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return False\n    ```\n\n    The `is_perfect_square` function takes a number `num` as input and returns `True` if the number is a perfect square, and `False` otherwise. It uses a binary search approach to find if the number is a perfect square. If the number is less than 0, it returns `False`. If the number is 0 or 1, it returns `True`. Otherwise, it initializes `start` to 1 and `end` to `num`. It then uses a binary search approach to find if the number is a perfect square. If the mid value squared is equal to the number, it returns `True`. If the mid value squared is less than the number, it updates `start` to `mid + 1`. Otherwise, it updates `end` to `mid - 1`. If the loop completes without finding a perfect square, it returns `False`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/. Your code should satisfy the following assertion:\n```python\nassert not is_perfect_square(10)\n```\n\n    ### Response:\n    ```python\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        if num == 0 or num == 1:\n            return True\n        start = 1\n        end = num\n        while start <= end:\n            mid = (start + end) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return False\n    ```\n\n    The `is_perfect_square` function takes a number `num` as input and returns `True` if the number is a perfect square, and `False` otherwise. It uses a binary search approach to find if the number is a perfect square. If the number is less than 0, it returns `False`. If the number is 0 or 1, it returns `True`. Otherwise, it initializes `start` to 1 and `end` to `num`. It then uses a binary search approach to find if the number is a perfect square. If the mid value squared is equal to the number, it returns `True`. If the mid value squared is less than the number, it updates `start` to `mid + 1`. Otherwise, it updates `end` to `mid - 1`. If the loop completes without finding a perfect square, it returns `False`."}
