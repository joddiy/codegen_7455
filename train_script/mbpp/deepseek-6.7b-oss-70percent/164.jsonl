{"task_id": "Mbpp/300", "completion": "\n```python\nimport math\n\ndef count_binary_seq(n):\n    # Initialize the count of binary sequences\n    count = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the integer to binary string\n        binary_str = bin(i)[2:].zfill(2*n)\n\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\n            count += 1\n\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should satisfy the following assertion:\n```python\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\n    ### Response:\n```python\nimport math\n\ndef count_binary_seq(n):\n    # Initialize the count of binary sequences\n    count = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the integer to binary string\n        binary_str = bin(i)[2:].zfill(2*n)\n\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\n            count += 1\n\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```"}
