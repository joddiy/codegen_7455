{"task_id": "Mbpp/119", "completion": "\n```python\ndef search(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid-1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid+1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n    return arr[left]\n```\nThe `search` function uses binary search to find the element that appears only once in the sorted array. It iterates through the array, comparing elements at mid and mid+1 indices. If the elements are equal, it updates the left or right index based on the parity of the mid index. If the elements are not equal, it returns the element at the mid index.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n    ### Response:\n```python\ndef search(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid-1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid+1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n    return arr[left]\n```\nThe `search` function uses binary search to find the element that appears only once in the sorted array. It iterates through the array, comparing elements at mid and mid+1 indices. If the elements are equal, it updates the left or right index based on the parity of the mid index. If the elements are not equal, it returns the element at the mid index."}
