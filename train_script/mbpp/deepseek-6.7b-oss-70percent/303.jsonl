{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, index, current_subset):\n        if index == len(numbers):\n            return current_subset\n        for i in range(index, len(numbers)):\n            if all(is_divisible(numbers[i], num) for num in current_subset):\n                new_subset = find_subset(numbers, i + 1, current_subset + [numbers[i]])\n                if len(new_subset) > len(current_subset):\n                    current_subset = new_subset\n        return current_subset\n\n    return len(find_subset(numbers, 0, []))\n```\n\nThe `largest_subset` function first defines a helper function `is_divisible` to check if two numbers are divisible. Then, it uses a recursive approach to find the largest subset of numbers that satisfy the divisibility condition. The `find_subset` function iterates through the list of numbers, adding each number to the current subset if it satisfies the divisibility condition with all other numbers in the subset. The function returns the length of the largest subset found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, index, current_subset):\n        if index == len(numbers):\n            return current_subset\n        for i in range(index, len(numbers)):\n            if all(is_divisible(numbers[i], num) for num in current_subset):\n                new_subset = find_subset(numbers, i + 1, current_subset + [numbers[i]])\n                if len(new_subset) > len(current_subset):\n                    current_subset = new_subset\n        return current_subset\n\n    return len(find_subset(numbers, 0, []))\n```\n\nThe `largest_subset` function first defines a helper function `is_divisible` to check if two numbers are divisible. Then, it uses a recursive approach to find the largest subset of numbers that satisfy the divisibility condition. The `find_subset` function iterates through the list of numbers, adding each number to the current subset if it satisfies the divisibility condition with all other numbers in the subset. The function returns the length of the largest subset found."}
