{"task_id": "Mbpp/260", "completion": "\n```python\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        if num == 1:\n            return 2\n        elif num == 2:\n            return 3\n        else:\n            return newman_shanks_williams(num - 1) + newman_shanks_williams(num - newman_shanks_williams(num - 1))\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(newman_shanks_williams(num)):\n            count += 1\n        num += 1\n    return newman_shanks_williams(num - 1)\n\nassert newman_prime(3) == 7\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number. Your code should satisfy the following assertion:\n```python\nassert newman_prime(3) == 7\n```\n\n    ### Response:\n```python\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        if num == 1:\n            return 2\n        elif num == 2:\n            return 3\n        else:\n            return newman_shanks_williams(num - 1) + newman_shanks_williams(num - newman_shanks_williams(num - 1))\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(newman_shanks_williams(num)):\n            count += 1\n        num += 1\n    return newman_shanks_williams(num - 1)\n\nassert newman_prime(3) == 7\n```"}
