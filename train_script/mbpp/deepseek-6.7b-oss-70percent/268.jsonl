{"task_id": "Mbpp/580", "completion": "\n```python\ndef extract_even(nested_tuple):\n    def is_even(x):\n        return x % 2 == 0\n\n    def extract_even_helper(t):\n        if isinstance(t, tuple):\n            return tuple(extract_even_helper(x) for x in t if is_even(x))\n        else:\n            return t\n\n    return extract_even_helper(nested_tuple)\n```\n\nThe `extract_even` function takes a nested tuple as input and uses a helper function `extract_even_helper` to recursively remove uneven elements. The `is_even` function checks if a number is even. The `extract_even_helper` function recursively processes the nested tuple, keeping only the even elements. The result is returned as a new nested tuple.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to remove uneven elements in the nested mixed tuple. Your code should satisfy the following assertion:\n```python\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\n    ### Response:\n```python\ndef extract_even(nested_tuple):\n    def is_even(x):\n        return x % 2 == 0\n\n    def extract_even_helper(t):\n        if isinstance(t, tuple):\n            return tuple(extract_even_helper(x) for x in t if is_even(x))\n        else:\n            return t\n\n    return extract_even_helper(nested_tuple)\n```\n\nThe `extract_even` function takes a nested tuple as input and uses a helper function `extract_even_helper` to recursively remove uneven elements. The `is_even` function checks if a number is even. The `extract_even_helper` function recursively processes the nested tuple, keeping only the even elements. The result is returned as a new nested tuple."}
