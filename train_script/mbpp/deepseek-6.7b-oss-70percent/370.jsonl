{"task_id": "Mbpp/777", "completion": "\n```python\ndef find_sum(lst):\n    unique_elements = set()\n    repeated_elements = set()\n    for num in lst:\n        if num in unique_elements:\n            repeated_elements.add(num)\n        else:\n            unique_elements.add(num)\n    return sum(unique_elements) - sum(repeated_elements)\n```\nThe `find_sum` function first initializes two sets: `unique_elements` and `repeated_elements`. It then iterates through the input list, adding each element to the `unique_elements` set if it's not already present, and adding it to the `repeated_elements` set if it's already present. Finally, it returns the sum of unique elements minus the sum of repeated elements.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the sum of non-repeated elements in a given list. Your code should satisfy the following assertion:\n```python\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\n    ### Response:\n```python\ndef find_sum(lst):\n    unique_elements = set()\n    repeated_elements = set()\n    for num in lst:\n        if num in unique_elements:\n            repeated_elements.add(num)\n        else:\n            unique_elements.add(num)\n    return sum(unique_elements) - sum(repeated_elements)\n```\nThe `find_sum` function first initializes two sets: `unique_elements` and `repeated_elements`. It then iterates through the input list, adding each element to the `unique_elements` set if it's not already present, and adding it to the `repeated_elements` set if it's already present. Finally, it returns the sum of unique elements minus the sum of repeated elements."}
