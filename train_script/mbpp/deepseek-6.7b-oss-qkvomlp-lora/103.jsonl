{"task_id": "Mbpp/223", "completion": "\n```python\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x in the sorted array\n    low = binary_search(arr, 0, n-1, x)\n\n    # If x is not present in the array, return False\n    if low == -1:\n        return False\n\n    # If x is present in the array, check if it is the majority element\n    if (low + n//2 < n) and arr[low + n//2] == x:\n        return True\n    else:\n        return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid - 1), x)\n    return -1\n```\n\nThe `is_majority` function first uses binary search to find the index of the first occurrence of the given element in the sorted array. If the element is present, it then checks if it is the majority element by comparing its index with the length of the array divided by 2. If the element is the majority element, the function returns True; otherwise, it returns False. The `binary_search` function is used to perform binary search on the given array.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.). Your code should satisfy the following assertion:\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n    ### Response:\n```python\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x in the sorted array\n    low = binary_search(arr, 0, n-1, x)\n\n    # If x is not present in the array, return False\n    if low == -1:\n        return False\n\n    # If x is present in the array, check if it is the majority element\n    if (low + n//2 < n) and arr[low + n//2] == x:\n        return True\n    else:\n        return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid - 1), x)\n    return -1\n```\n\nThe `is_majority` function first uses binary search to find the index of the first occurrence of the given element in the sorted array. If the element is present, it then checks if it is the majority element by comparing its index with the length of the array divided by 2. If the element is the majority element, the function returns True; otherwise, it returns False. The `binary_search` function is used to perform binary search on the given array."}
