{"task_id": "Mbpp/558", "completion": "\n    ```python\n    def digit_distance_nums(num1, num2):\n        num1_str = str(num1)\n        num2_str = str(num2)\n        distance = 0\n        for i in range(min(len(num1_str), len(num2_str))):\n            distance += abs(int(num1_str[i]) - int(num2_str[i]))\n        return distance\n    ```\n    The `digit_distance_nums` function takes two integers `num1` and `num2` as input and returns the sum of the per-digit difference between them. It first converts the integers to strings, then iterates through the strings to calculate the per-digit difference and accumulates the result in the `distance` variable. Finally, it returns the calculated distance.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n    ### Response:\n    ```python\n    def digit_distance_nums(num1, num2):\n        num1_str = str(num1)\n        num2_str = str(num2)\n        distance = 0\n        for i in range(min(len(num1_str), len(num2_str))):\n            distance += abs(int(num1_str[i]) - int(num2_str[i]))\n        return distance\n    ```\n    The `digit_distance_nums` function takes two integers `num1` and `num2` as input and returns the sum of the per-digit difference between them. It first converts the integers to strings, then iterates through the strings to calculate the per-digit difference and accumulates the result in the `distance` variable. Finally, it returns the calculated distance."}
