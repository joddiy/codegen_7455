{"task_id": "Mbpp/771", "completion": "\n    ```python\n    def check_expression(expression):\n        stack = []\n        brackets = {')': '(', ']': '[', '}': '{'}\n        for char in expression:\n            if char in brackets.values():\n                stack.append(char)\n            elif char in brackets.keys():\n                if not stack or brackets[char] != stack.pop():\n                    return False\n        return not stack\n    ```\n    The `check_expression` function uses a stack to keep track of opening brackets and checks if the closing brackets match the corresponding opening brackets. If the expression is balanced, the function returns True; otherwise, it returns False.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/. Your code should satisfy the following assertion:\n```python\nassert check_expression(\"{()}[{}]\") == True\n```\n\n    ### Response:\n    ```python\n    def check_expression(expression):\n        stack = []\n        brackets = {')': '(', ']': '[', '}': '{'}\n        for char in expression:\n            if char in brackets.values():\n                stack.append(char)\n            elif char in brackets.keys():\n                if not stack or brackets[char] != stack.pop():\n                    return False\n        return not stack\n    ```\n    The `check_expression` function uses a stack to keep track of opening brackets and checks if the closing brackets match the corresponding opening brackets. If the expression is balanced, the function returns True; otherwise, it returns False."}
