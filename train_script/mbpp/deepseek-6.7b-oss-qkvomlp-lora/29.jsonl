{"task_id": "Mbpp/71", "completion": "\n```python\ndef comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(0, len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst\n```\n\nThe `comb_sort` function takes a list `lst` as input and sorts it using the Comb Sort algorithm. It initializes the gap size to the length of the list and then iterates through the list, comparing adjacent elements and swapping them if they are in the wrong order. The gap size is then reduced by a factor of 1.3 and the process is repeated until the list is sorted. Finally, the sorted list is returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n    ### Response:\n```python\ndef comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(0, len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst\n```\n\nThe `comb_sort` function takes a list `lst` as input and sorts it using the Comb Sort algorithm. It initializes the gap size to the length of the list and then iterates through the list, comparing adjacent elements and swapping them if they are in the wrong order. The gap size is then reduced by a factor of 1.3 and the process is repeated until the list is sorted. Finally, the sorted list is returned."}
