{"task_id": "Mbpp/392", "completion": "\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106\n```\n\nThe `get_max_sum` function recursively calculates the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). The base case is when n is less than or equal to 1, in which case the function returns n. The function then returns the maximum of the sum of the recursive calls and n. The assertion at the end verifies that the function returns the correct result for the given input.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should satisfy the following assertion:\n```python\nassert get_max_sum(60) == 106\n```\n\n    ### Response:\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106\n```\n\nThe `get_max_sum` function recursively calculates the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). The base case is when n is less than or equal to 1, in which case the function returns n. The function then returns the maximum of the sum of the recursive calls and n. The assertion at the end verifies that the function returns the correct result for the given input."}
