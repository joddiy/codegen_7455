{"task_id": "Mbpp/620", "completion": "\n```python\ndef largest_subset(numbers):\n    numbers.sort()\n    subset = [numbers[0]]\n    for num in numbers[1:]:\n        if num % subset[-1] == 0:\n            subset.append(num)\n    return len(subset)\n```\nThe `largest_subset` function first sorts the input list of numbers. It then iterates through the sorted list, adding each number to the subset if it is divisible by the last number in the subset. Finally, it returns the length of the largest subset found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n```python\ndef largest_subset(numbers):\n    numbers.sort()\n    subset = [numbers[0]]\n    for num in numbers[1:]:\n        if num % subset[-1] == 0:\n            subset.append(num)\n    return len(subset)\n```\nThe `largest_subset` function first sorts the input list of numbers. It then iterates through the sorted list, adding each number to the subset if it is divisible by the last number in the subset. Finally, it returns the length of the largest subset found."}
