{"task_id": "Mbpp/605", "completion": "\n```python\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n```\nThe `prime_num` function takes an integer `num` as input and checks if it is a prime number. It returns `True` if the number is prime, and `False` otherwise. The function uses a simple algorithm to check if the number is prime by iterating through all the numbers from 2 to the square root of the given number and checking if it is divisible by any of them. If the number is divisible by any of these numbers, it is not a prime number, and the function returns `False`. If the number is not divisible by any of these numbers, it is a prime number, and the function returns `True`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given integer is a prime number. Your code should satisfy the following assertion:\n```python\nassert prime_num(13)==True\n```\n\n    ### Response:\n```python\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n```\nThe `prime_num` function takes an integer `num` as input and checks if it is a prime number. It returns `True` if the number is prime, and `False` otherwise. The function uses a simple algorithm to check if the number is prime by iterating through all the numbers from 2 to the square root of the given number and checking if it is divisible by any of them. If the number is divisible by any of these numbers, it is not a prime number, and the function returns `False`. If the number is not divisible by any of these numbers, it is a prime number, and the function returns `True`."}
