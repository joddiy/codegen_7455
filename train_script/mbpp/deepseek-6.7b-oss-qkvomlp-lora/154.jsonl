{"task_id": "Mbpp/286", "completion": "\n```python\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, i + n * k):\n            curr_sum += arr[j % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n```\n\nThe `max_sub_array_sum_repeated` function takes an array `arr`, an integer `k`, and an integer `n` as input. It initializes `max_sum` to the smallest possible integer value. Then, it iterates through the array `arr` `n` times, calculating the sum of the contiguous subarray and updating `max_sum` if the sum is greater than the current `max_sum`. Finally, it returns the maximum sum of a contiguous subarray in the modified array.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times. Your code should satisfy the following assertion:\n```python\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n```\n\n    ### Response:\n```python\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, i + n * k):\n            curr_sum += arr[j % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n```\n\nThe `max_sub_array_sum_repeated` function takes an array `arr`, an integer `k`, and an integer `n` as input. It initializes `max_sum` to the smallest possible integer value. Then, it iterates through the array `arr` `n` times, calculating the sum of the contiguous subarray and updating `max_sum` if the sum is greater than the current `max_sum`. Finally, it returns the maximum sum of a contiguous subarray in the modified array."}
