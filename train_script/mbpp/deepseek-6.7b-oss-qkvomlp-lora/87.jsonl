{"task_id": "Mbpp/141", "completion": "\n    ```python\n    def pancake_sort(arr):\n        def flip(arr, k):\n            i = 0\n            while i < k:\n                arr[i], arr[k] = arr[k], arr[i]\n                i += 1\n                k -= 1\n\n        def find_max(arr, n):\n            mi = 0\n            for i in range(n):\n                if arr[i] > arr[mi]:\n                    mi = i\n            return mi\n\n        n = len(arr)\n        current_size = n\n        while current_size > 1:\n            mi = find_max(arr, current_size)\n            if mi != current_size - 1:\n                flip(arr, mi)\n                flip(arr, current_size - 1)\n            current_size -= 1\n        return arr\n    ```\n\n    The `pancake_sort` function first defines a `flip` function to reverse the order of the first `k` elements in the array. It then defines a `find_max` function to find the index of the maximum element in the array. The main `pancake_sort` function then iterates through the array, finding the maximum element and flipping it to the end of the array. This process is repeated until the array is sorted.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n```\n\n    ### Response:\n    ```python\n    def pancake_sort(arr):\n        def flip(arr, k):\n            i = 0\n            while i < k:\n                arr[i], arr[k] = arr[k], arr[i]\n                i += 1\n                k -= 1\n\n        def find_max(arr, n):\n            mi = 0\n            for i in range(n):\n                if arr[i] > arr[mi]:\n                    mi = i\n            return mi\n\n        n = len(arr)\n        current_size = n\n        while current_size > 1:\n            mi = find_max(arr, current_size)\n            if mi != current_size - 1:\n                flip(arr, mi)\n                flip(arr, current_size - 1)\n            current_size -= 1\n        return arr\n    ```\n\n    The `pancake_sort` function first defines a `flip` function to reverse the order of the first `k` elements in the array. It then defines a `find_max` function to find the index of the maximum element in the array. The main `pancake_sort` function then iterates through the array, finding the maximum element and flipping it to the end of the array. This process is repeated until the array is sorted."}
