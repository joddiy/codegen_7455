{"task_id": "Mbpp/778", "completion": "\n```python\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if not current_sublist or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result\n```\n\nThe `pack_consecutive_duplicates` function iterates through the input list and creates a new sublist whenever the current element is different from the previous one. It then appends the sublist to the result list and returns the final result.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following assertion:\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n    ### Response:\n```python\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if not current_sublist or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result\n```\n\nThe `pack_consecutive_duplicates` function iterates through the input list and creates a new sublist whenever the current element is different from the previous one. It then appends the sublist to the result list and returns the final result."}
