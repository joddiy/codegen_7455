{"task_id": "Mbpp/438", "completion": "\n    ```python\n    def count_bidirectional(tuples):\n        bidirectional_pairs = set()\n        for t in tuples:\n            if (t[1], t[0]) in bidirectional_pairs:\n                bidirectional_pairs.remove((t[1], t[0]))\n            else:\n                bidirectional_pairs.add(t)\n        return len(bidirectional_pairs)\n    ```\n    The `count_bidirectional` function takes a list of tuples as input and uses a set to keep track of bidirectional pairs. It iterates through the input tuples, checking if the reverse of each tuple is already present in the set. If it is, the pair is removed from the set; otherwise, it is added to the set. Finally, the function returns the number of bidirectional pairs found in the input list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to count bidirectional tuple pairs. Your code should satisfy the following assertion:\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n    ### Response:\n    ```python\n    def count_bidirectional(tuples):\n        bidirectional_pairs = set()\n        for t in tuples:\n            if (t[1], t[0]) in bidirectional_pairs:\n                bidirectional_pairs.remove((t[1], t[0]))\n            else:\n                bidirectional_pairs.add(t)\n        return len(bidirectional_pairs)\n    ```\n    The `count_bidirectional` function takes a list of tuples as input and uses a set to keep track of bidirectional pairs. It iterates through the input tuples, checking if the reverse of each tuple is already present in the set. If it is, the pair is removed from the set; otherwise, it is added to the set. Finally, the function returns the number of bidirectional pairs found in the input list."}
