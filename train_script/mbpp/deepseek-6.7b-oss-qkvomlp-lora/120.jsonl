{"task_id": "Mbpp/247", "completion": "\n    ```python\n    def lps(s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][n-1]\n    ```\n    The `lps` function uses dynamic programming to find the length of the longest palindromic subsequence in the given string. It initializes a 2D array `dp` to store the lengths of palindromic subsequences, and then fills it up using nested loops. Finally, it returns the length of the longest palindromic subsequence in the given string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the length of the longest palindromic subsequence in the given string. Your code should satisfy the following assertion:\n```python\nassert lps(\"TENS FOR TENS\") == 5\n```\n\n    ### Response:\n    ```python\n    def lps(s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][n-1]\n    ```\n    The `lps` function uses dynamic programming to find the length of the longest palindromic subsequence in the given string. It initializes a 2D array `dp` to store the lengths of palindromic subsequences, and then fills it up using nested loops. Finally, it returns the length of the longest palindromic subsequence in the given string."}
