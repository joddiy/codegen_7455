{"task_id": "Mbpp/299", "completion": "\n```python\ndef max_aggregate(tuples):\n    max_aggregate_value = 0\n    max_aggregate_name = ''\n    aggregate_dict = {}\n\n    for name, value in tuples:\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        else:\n            aggregate_dict[name] = value\n\n    for name, aggregate in aggregate_dict.items():\n        if aggregate > max_aggregate_value:\n            max_aggregate_value = aggregate\n            max_aggregate_name = name\n\n    return (max_aggregate_name, max_aggregate_value)\n```\n\n    The `max_aggregate` function takes a list of tuples as input and calculates the maximum aggregate for each name. It uses a dictionary to store the aggregates for each name and then finds the name with the maximum aggregate. The function returns a tuple containing the name with the maximum aggregate and its value.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to calculate the maximum aggregate from the list of tuples. Your code should satisfy the following assertion:\n```python\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\n    ### Response:\n```python\ndef max_aggregate(tuples):\n    max_aggregate_value = 0\n    max_aggregate_name = ''\n    aggregate_dict = {}\n\n    for name, value in tuples:\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        else:\n            aggregate_dict[name] = value\n\n    for name, aggregate in aggregate_dict.items():\n        if aggregate > max_aggregate_value:\n            max_aggregate_value = aggregate\n            max_aggregate_name = name\n\n    return (max_aggregate_name, max_aggregate_value)\n```\n\n    The `max_aggregate` function takes a list of tuples as input and calculates the maximum aggregate for each name. It uses a dictionary to store the aggregates for each name and then finds the name with the maximum aggregate. The function returns a tuple containing the name with the maximum aggregate and its value."}
