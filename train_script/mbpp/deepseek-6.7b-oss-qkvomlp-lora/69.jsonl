{"task_id": "Mbpp/119", "completion": "\n    ```python\n    def search(arr):\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == arr[mid - 1]:\n                if mid % 2 == 0:\n                    right = mid - 2\n                else:\n                    left = mid + 1\n            elif arr[mid] == arr[mid + 1]:\n                if mid % 2 == 0:\n                    left = mid + 2\n                else:\n                    right = mid - 1\n            else:\n                return arr[mid]\n        return arr[left]\n    ```\n\n    The `search` function uses binary search to find the element that appears only once in the sorted array. It iterates through the array, comparing the middle element with its neighbors. If the middle element is the same as its neighbor, it adjusts the search range based on the parity of the middle index. If the middle element is different from its neighbors, it returns the middle element as the element that appears only once.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n    ### Response:\n    ```python\n    def search(arr):\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == arr[mid - 1]:\n                if mid % 2 == 0:\n                    right = mid - 2\n                else:\n                    left = mid + 1\n            elif arr[mid] == arr[mid + 1]:\n                if mid % 2 == 0:\n                    left = mid + 2\n                else:\n                    right = mid - 1\n            else:\n                return arr[mid]\n        return arr[left]\n    ```\n\n    The `search` function uses binary search to find the element that appears only once in the sorted array. It iterates through the array, comparing the middle element with its neighbors. If the middle element is the same as its neighbor, it adjusts the search range based on the parity of the middle index. If the middle element is different from its neighbors, it returns the middle element as the element that appears only once."}
