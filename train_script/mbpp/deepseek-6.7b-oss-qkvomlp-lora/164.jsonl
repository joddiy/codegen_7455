{"task_id": "Mbpp/300", "completion": "\n    ```python\n    import math\n\n    def count_binary_seq(n):\n        # Base case: n = 1\n        if n == 1:\n            return 2.0\n        else:\n            # Recursive case: count_binary_seq(n) = count_binary_seq(n-1) * 2\n            return count_binary_seq(n-1) * 2\n\n    # Test the function\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    ```\n\n    The `count_binary_seq` function recursively calculates the count of binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits. The base case is when n = 1, in which case the count is 2.0. The recursive case is when n > 1, in which case the count is calculated as count_binary_seq(n-1) * 2. The assertion at the end of the code verifies that the function returns the correct count for n = 1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should satisfy the following assertion:\n```python\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\n    ### Response:\n    ```python\n    import math\n\n    def count_binary_seq(n):\n        # Base case: n = 1\n        if n == 1:\n            return 2.0\n        else:\n            # Recursive case: count_binary_seq(n) = count_binary_seq(n-1) * 2\n            return count_binary_seq(n-1) * 2\n\n    # Test the function\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    ```\n\n    The `count_binary_seq` function recursively calculates the count of binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits. The base case is when n = 1, in which case the count is 2.0. The recursive case is when n > 1, in which case the count is calculated as count_binary_seq(n-1) * 2. The assertion at the end of the code verifies that the function returns the correct count for n = 1."}
