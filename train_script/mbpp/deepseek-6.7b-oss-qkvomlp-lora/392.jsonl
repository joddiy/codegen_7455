{"task_id": "Mbpp/803", "completion": "\n    ```python\n    import math\n\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num * sqrt_num == num\n    ```\n\n    The `is_perfect_square` function takes a number `num` as input and returns `True` if the number is a perfect square, and `False` otherwise. It first checks if the number is negative, and then calculates the square root of the number using the `math.sqrt` function. If the square of the square root is equal to the original number, it returns `True`, indicating that the number is a perfect square. Otherwise, it returns `False`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/. Your code should satisfy the following assertion:\n```python\nassert not is_perfect_square(10)\n```\n\n    ### Response:\n    ```python\n    import math\n\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num * sqrt_num == num\n    ```\n\n    The `is_perfect_square` function takes a number `num` as input and returns `True` if the number is a perfect square, and `False` otherwise. It first checks if the number is negative, and then calculates the square root of the number using the `math.sqrt` function. If the square of the square root is equal to the original number, it returns `True`, indicating that the number is a perfect square. Otherwise, it returns `False`."}
