{"task_id": "Mbpp/752", "completion": "\n    ```python\n    def jacobsthal_num(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n    ```\n    The `jacobsthal_num` function uses a recursive approach to calculate the nth Jacobsthal number. It first checks for the base cases of 0 and 1 and returns the corresponding values. For any other value of n, it recursively calculates the Jacobsthal number using the formula: `jacobsthal_num(n) = jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)`. This solution satisfies the given assertion.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... Your code should satisfy the following assertion:\n```python\nassert jacobsthal_num(5) == 11\n```\n\n    ### Response:\n    ```python\n    def jacobsthal_num(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n    ```\n    The `jacobsthal_num` function uses a recursive approach to calculate the nth Jacobsthal number. It first checks for the base cases of 0 and 1 and returns the corresponding values. For any other value of n, it recursively calculates the Jacobsthal number using the formula: `jacobsthal_num(n) = jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)`. This solution satisfies the given assertion."}
