{"task_id": "Mbpp/129", "completion": "\n    ```python\n    def magic_square_test(matrix):\n        n = len(matrix)\n        # Check if the matrix is a square\n        if len(matrix) != len(matrix[0]):\n            return False\n        \n        # Calculate the sum of the first row\n        row_sum = sum(matrix[0])\n        \n        # Check if the sum of each row is equal to the row_sum\n        for row in matrix:\n            if sum(row) != row_sum:\n                return False\n        \n        # Check if the sum of each column is equal to the row_sum\n        for i in range(n):\n            col_sum = 0\n            for j in range(n):\n                col_sum += matrix[j][i]\n            if col_sum != row_sum:\n                return False\n        \n        # Check if the sum of the diagonals is equal to the row_sum\n        diag_sum1 = 0\n        diag_sum2 = 0\n        for i in range(n):\n            diag_sum1 += matrix[i][i]\n            diag_sum2 += matrix[i][n-i-1]\n        if diag_sum1 != row_sum or diag_sum2 != row_sum:\n            return False\n        \n        return True\n    ```\n    This solution defines a function `magic_square_test` that takes a matrix as input and checks if it is a magic square. It first checks if the matrix is a square and then calculates the sum of the first row. It then iterates through each row, column, and diagonal to ensure that the sums are equal to the row_sum. If all checks pass, the function returns True, indicating that the matrix is a magic square.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to calculate whether the matrix is a magic square. Your code should satisfy the following assertion:\n```python\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n```\n\n    ### Response:\n    ```python\n    def magic_square_test(matrix):\n        n = len(matrix)\n        # Check if the matrix is a square\n        if len(matrix) != len(matrix[0]):\n            return False\n        \n        # Calculate the sum of the first row\n        row_sum = sum(matrix[0])\n        \n        # Check if the sum of each row is equal to the row_sum\n        for row in matrix:\n            if sum(row) != row_sum:\n                return False\n        \n        # Check if the sum of each column is equal to the row_sum\n        for i in range(n):\n            col_sum = 0\n            for j in range(n):\n                col_sum += matrix[j][i]\n            if col_sum != row_sum:\n                return False\n        \n        # Check if the sum of the diagonals is equal to the row_sum\n        diag_sum1 = 0\n        diag_sum2 = 0\n        for i in range(n):\n            diag_sum1 += matrix[i][i]\n            diag_sum2 += matrix[i][n-i-1]\n        if diag_sum1 != row_sum or diag_sum2 != row_sum:\n            return False\n        \n        return True\n    ```\n    This solution defines a function `magic_square_test` that takes a matrix as input and checks if it is a magic square. It first checks if the matrix is a square and then calculates the sum of the first row. It then iterates through each row, column, and diagonal to ensure that the sums are equal to the row_sum. If all checks pass, the function returns True, indicating that the matrix is a magic square."}
