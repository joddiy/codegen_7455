{"task_id": "Mbpp/799", "completion": "\n    ```python\n    def left_rotate(num, d):\n        # Convert the number to binary representation\n        binary_num = bin(num)[2:].zfill(32)\n        # Rotate the bits to the left\n        rotated_bits = binary_num[d:] + binary_num[:d]\n        # Convert the rotated bits back to decimal\n        rotated_num = int(rotated_bits, 2)\n        return rotated_num\n    ```\n    The `left_rotate` function takes a number `num` and a rotation amount `d` as input. It converts the number to binary representation, rotates the bits to the left by `d` positions, and then converts the rotated bits back to decimal. The rotated number is then returned as the output.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n    ### Response:\n    ```python\n    def left_rotate(num, d):\n        # Convert the number to binary representation\n        binary_num = bin(num)[2:].zfill(32)\n        # Rotate the bits to the left\n        rotated_bits = binary_num[d:] + binary_num[:d]\n        # Convert the rotated bits back to decimal\n        rotated_num = int(rotated_bits, 2)\n        return rotated_num\n    ```\n    The `left_rotate` function takes a number `num` and a rotation amount `d` as input. It converts the number to binary representation, rotates the bits to the left by `d` positions, and then converts the rotated bits back to decimal. The rotated number is then returned as the output."}
