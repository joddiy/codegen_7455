{"task_id": "Mbpp/295", "completion": "\n```python\ndef sum_div(n):\n    divisors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.extend([i, n//i])\n    if int(n**0.5)**2 == n:\n        divisors.remove(int(n**0.5))\n    return sum(set(divisors))\n```\nThe `sum_div` function takes a number `n` as input and returns the sum of all its divisors. It iterates through all the numbers from 2 to the square root of `n` and checks if they are divisors of `n`. If a number is a divisor, it adds it to the list of divisors. Finally, it removes the square root of `n` if it is a perfect square and returns the sum of the unique divisors.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to return the sum of all divisors of a number. Your code should satisfy the following assertion:\n```python\nassert sum_div(8)==7\n```\n\n    ### Response:\n```python\ndef sum_div(n):\n    divisors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.extend([i, n//i])\n    if int(n**0.5)**2 == n:\n        divisors.remove(int(n**0.5))\n    return sum(set(divisors))\n```\nThe `sum_div` function takes a number `n` as input and returns the sum of all its divisors. It iterates through all the numbers from 2 to the square root of `n` and checks if they are divisors of `n`. If a number is a divisor, it adds it to the list of divisors. Finally, it removes the square root of `n` if it is a perfect square and returns the sum of the unique divisors."}
