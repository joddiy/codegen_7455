{"task_id": "Mbpp/473", "completion": "\n    ```python\n    def tuple_intersection(tuple_list1, tuple_list2):\n        intersection = set()\n        for tup1 in tuple_list1:\n            for tup2 in tuple_list2:\n                if tup1 == tup2 or tup1 == tup2[::-1]:\n                    intersection.add(tup1)\n        return intersection\n    ```\n    The `tuple_intersection` function takes two lists of tuples as input and returns the intersection of the tuples irrespective of their order. It iterates through each tuple in the first list and checks if it exists in the second list. If it does, it adds the tuple to the intersection set. The function also checks for reverse tuples and adds them to the intersection set if found. Finally, it returns the intersection set.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should satisfy the following assertion:\n```python\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n    ### Response:\n    ```python\n    def tuple_intersection(tuple_list1, tuple_list2):\n        intersection = set()\n        for tup1 in tuple_list1:\n            for tup2 in tuple_list2:\n                if tup1 == tup2 or tup1 == tup2[::-1]:\n                    intersection.add(tup1)\n        return intersection\n    ```\n    The `tuple_intersection` function takes two lists of tuples as input and returns the intersection of the tuples irrespective of their order. It iterates through each tuple in the first list and checks if it exists in the second list. If it does, it adds the tuple to the intersection set. The function also checks for reverse tuples and adds them to the intersection set if found. Finally, it returns the intersection set."}
