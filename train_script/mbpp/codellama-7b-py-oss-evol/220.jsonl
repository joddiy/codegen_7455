{"task_id": "Mbpp/448", "completion": "\n Here is a Python script that calculates the sum of Perrin numbers.\n\n```python\ndef cal_sum(n):\n    perrin_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return sum(i for i in perrin_numbers if i <= n)\n\nassert cal_sum(9) == 49\n```\n\nIn this script, we first define a list of Perrin numbers (numbers that are only divisible by 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47). Then, we use a generator expression to sum up all the numbers in the list that are less than or equal to `n`. The `assert` statement is used to test our function with the given input.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to calculate the sum of perrin numbers. Your code should satisfy the following assertion:\n```python\nassert cal_sum(9) == 49\n```\n\n    ### Response:\n Here is a Python script that calculates the sum of Perrin numbers.\n\n```python\ndef cal_sum(n):\n    perrin_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return sum(i for i in perrin_numbers if i <= n)\n\nassert cal_sum(9) == 49\n```\n\nIn this script, we first define a list of Perrin numbers (numbers that are only divisible by 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47). Then, we use a generator expression to sum up all the numbers in the list that are less than or equal to `n`. The `assert` statement is used to test our function with the given input."}
