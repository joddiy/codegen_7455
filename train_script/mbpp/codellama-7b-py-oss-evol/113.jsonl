{"task_id": "Mbpp/237", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef check_occurences(lst):\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n```\n\nYou can test this function with the provided assertion:\n\n```python\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\nThis function works by iterating over each tuple in the list, and then either incrementing the count of that tuple in the result dictionary, or adding it to the dictionary with a count of 1 if it's not already in the dictionary.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. Your code should satisfy the following assertion:\n```python\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef check_occurences(lst):\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n```\n\nYou can test this function with the provided assertion:\n\n```python\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\nThis function works by iterating over each tuple in the list, and then either incrementing the count of that tuple in the result dictionary, or adding it to the dictionary with a count of 1 if it's not already in the dictionary."}
