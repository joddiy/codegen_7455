{"task_id": "Mbpp/622", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size//2] + merged_list[size//2 - 1]) / 2\n    else:\n        return merged_list[size//2]\n```\n\nThis function first merges the two input lists into one. It then sorts the merged list. If the size of the merged list is even, the median is the average of the two middle numbers. If the size is odd, the median is the middle number.\n\nThe function is tested with the provided assertion:\n\n```python\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\nThis assertion should pass if the function is correct.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the median of two sorted lists of same size. Your code should satisfy the following assertion:\n```python\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size//2] + merged_list[size//2 - 1]) / 2\n    else:\n        return merged_list[size//2]\n```\n\nThis function first merges the two input lists into one. It then sorts the merged list. If the size of the merged list is even, the median is the average of the two middle numbers. If the size is odd, the median is the middle number.\n\nThe function is tested with the provided assertion:\n\n```python\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\nThis assertion should pass if the function is correct."}
