{"task_id": "Mbpp/391", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef convert_list_dictionary(student_ids, locations, scores):\n    result = []\n    for i in range(len(student_ids)):\n        temp_dict = {student_ids[i]: {locations[i]: scores[i]}}\n        result.append(temp_dict)\n    return result\n```\n\nThis function takes three lists as input: `student_ids`, `locations`, and `scores`. It iterates over the indices of the input lists, creates a dictionary for each student with their location and score, and appends it to the result list. The result list is then returned.\n\nThe provided assertion checks if the function `convert_list_dictionary` returns the expected output for the given input.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to convert more than one list to nested dictionary. Your code should satisfy the following assertion:\n```python\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef convert_list_dictionary(student_ids, locations, scores):\n    result = []\n    for i in range(len(student_ids)):\n        temp_dict = {student_ids[i]: {locations[i]: scores[i]}}\n        result.append(temp_dict)\n    return result\n```\n\nThis function takes three lists as input: `student_ids`, `locations`, and `scores`. It iterates over the indices of the input lists, creates a dictionary for each student with their location and score, and appends it to the result list. The result list is then returned.\n\nThe provided assertion checks if the function `convert_list_dictionary` returns the expected output for the given input."}
