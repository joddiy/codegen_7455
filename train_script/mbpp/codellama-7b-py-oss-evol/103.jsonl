{"task_id": "Mbpp/223", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2\n```\n\nThis function iterates through the array and counts the number of times the given element appears. If the count is more than n/2, it returns True, otherwise it returns False.\n\nThe function can be tested with the provided assertion:\n\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\nThis will return True, as the number 3 appears more than 7/2 = 3.5 times in the array, which is more than 3.5.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.). Your code should satisfy the following assertion:\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2\n```\n\nThis function iterates through the array and counts the number of times the given element appears. If the count is more than n/2, it returns True, otherwise it returns False.\n\nThe function can be tested with the provided assertion:\n\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\nThis will return True, as the number 3 appears more than 7/2 = 3.5 times in the array, which is more than 3.5."}
