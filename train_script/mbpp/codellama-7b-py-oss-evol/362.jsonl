{"task_id": "Mbpp/766", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```\n\nThis function uses list comprehension to iterate over the list and create pairs of consecutive items. It uses the `range()` function to generate indices for the list, and then uses these indices to access the corresponding elements in the list.\n\nThe function can be tested with the provided assertion:\n\n```python\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\nIf the assertion is true, the function is working correctly. If it is false, there is an error in the function.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to return a list of all pairs of consecutive items in a given list. Your code should satisfy the following assertion:\n```python\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```\n\nThis function uses list comprehension to iterate over the list and create pairs of consecutive items. It uses the `range()` function to generate indices for the list, and then uses these indices to access the corresponding elements in the list.\n\nThe function can be tested with the provided assertion:\n\n```python\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\nIf the assertion is true, the function is working correctly. If it is false, there is an error in the function."}
