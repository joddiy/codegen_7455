{"task_id": "Mbpp/4", "completion": "\n Here is a Python script that solves the problem:\n\n```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\nIn this script, we use the heapq module in Python, which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. The nlargest function returns the n largest elements from the given iterable.\n\nThe assertion checks if our function returns the correct result for the given input. If the result is not as expected, the assertion will raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order. Your code should satisfy the following assertion:\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\nIn this script, we use the heapq module in Python, which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. The nlargest function returns the n largest elements from the given iterable.\n\nThe assertion checks if our function returns the correct result for the given input. If the result is not as expected, the assertion will raise an AssertionError."}
