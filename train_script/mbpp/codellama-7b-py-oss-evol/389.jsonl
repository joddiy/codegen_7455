{"task_id": "Mbpp/799", "completion": "\n Here is a Python function that implements the left rotation:\n\n```python\ndef left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))\n```\n\nThis function works by shifting the bits of the number to the left by `d` places and then combining the bits that were shifted out of the left side with the bits that were shifted out of the right side. The expression `n >> (32 - d)` performs a right shift operation on the bits of `n` by `32 - d` places, which effectively gets the bits that were shifted out of the left side.\n\nThe function can be tested with the provided assertion:\n\n```python\nassert left_rotate(16, 2) == 64\n```\n\nThis assertion should pass if the function is implemented correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n    ### Response:\n Here is a Python function that implements the left rotation:\n\n```python\ndef left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))\n```\n\nThis function works by shifting the bits of the number to the left by `d` places and then combining the bits that were shifted out of the left side with the bits that were shifted out of the right side. The expression `n >> (32 - d)` performs a right shift operation on the bits of `n` by `32 - d` places, which effectively gets the bits that were shifted out of the left side.\n\nThe function can be tested with the provided assertion:\n\n```python\nassert left_rotate(16, 2) == 64\n```\n\nThis assertion should pass if the function is implemented correctly."}
