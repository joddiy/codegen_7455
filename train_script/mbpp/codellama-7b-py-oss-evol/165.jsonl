{"task_id": "Mbpp/301", "completion": "\n Here is a Python function that calculates the depth of a dictionary:\n\n```python\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n```\n\nThis function works by recursively checking the depth of each value in the dictionary. The `max` function is used to find the maximum depth of all the values. If the input is not a dictionary, the function returns 0.\n\nYou can test the function with the provided assertion:\n\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\nThis assertion should pass, as the dictionary 'b' has a depth of 4.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the depth of a dictionary. Your code should satisfy the following assertion:\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\n    ### Response:\n Here is a Python function that calculates the depth of a dictionary:\n\n```python\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n```\n\nThis function works by recursively checking the depth of each value in the dictionary. The `max` function is used to find the maximum depth of all the values. If the input is not a dictionary, the function returns 0.\n\nYou can test the function with the provided assertion:\n\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\nThis assertion should pass, as the dictionary 'b' has a depth of 4."}
