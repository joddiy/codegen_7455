{"task_id": "Mbpp/778", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef pack_consecutive_duplicates(lst):\n    result = []\n    sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append(sublist)\n            sublist = [lst[i]]\n    result.append(sublist)\n    return result\n```\n\nThis function works by iterating over the input list and creating sublists of consecutive duplicates. When it encounters a non-duplicate, it appends the current sublist to the result and starts a new sublist. At the end, it appends the last sublist to the result.\n\nYou can test the function with the provided assertion:\n\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\nThis will return `True` if the function works correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following assertion:\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef pack_consecutive_duplicates(lst):\n    result = []\n    sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append(sublist)\n            sublist = [lst[i]]\n    result.append(sublist)\n    return result\n```\n\nThis function works by iterating over the input list and creating sublists of consecutive duplicates. When it encounters a non-duplicate, it appends the current sublist to the result and starts a new sublist. At the end, it appends the last sublist to the result.\n\nYou can test the function with the provided assertion:\n\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\nThis will return `True` if the function works correctly."}
