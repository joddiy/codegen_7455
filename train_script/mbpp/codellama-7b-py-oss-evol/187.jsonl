{"task_id": "Mbpp/407", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef rearrange_bigger(n):\n    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    return int(''.join(num_list))\n\nassert rearrange_bigger(12)==21\n```\n\nThis function works by first converting the input number to a string, then converting that string to a list of characters. It then sorts the list in reverse order (so the largest digit is first), and finally joins the list back into a string and converts it back into an integer.\n\nThe function is tested with the provided assertion, which should pass if the function is implemented correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef rearrange_bigger(n):\n    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    return int(''.join(num_list))\n\nassert rearrange_bigger(12)==21\n```\n\nThis function works by first converting the input number to a string, then converting that string to a list of characters. It then sorts the list in reverse order (so the largest digit is first), and finally joins the list back into a string and converts it back into an integer.\n\nThe function is tested with the provided assertion, which should pass if the function is implemented correctly."}
