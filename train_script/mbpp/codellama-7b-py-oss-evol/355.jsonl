{"task_id": "Mbpp/758", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef unique_sublists(lst):\n    sublists = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists\n```\n\nThis function iterates over the input list, converts each sublist to a tuple, and then checks if this tuple is already a key in the `sublists` dictionary. If it is, it increments the value associated with this key by 1. If it is not, it adds a new key-value pair to the dictionary with the tuple as the key and 1 as the value.\n\nThe function then returns the `sublists` dictionary.\n\nYou can test the function with the provided assertion:\n\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\nThis assertion should pass, because the function correctly counts the occurrences of each sublist in the input list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. Your code should satisfy the following assertion:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef unique_sublists(lst):\n    sublists = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists\n```\n\nThis function iterates over the input list, converts each sublist to a tuple, and then checks if this tuple is already a key in the `sublists` dictionary. If it is, it increments the value associated with this key by 1. If it is not, it adds a new key-value pair to the dictionary with the tuple as the key and 1 as the value.\n\nThe function then returns the `sublists` dictionary.\n\nYou can test the function with the provided assertion:\n\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\nThis assertion should pass, because the function correctly counts the occurrences of each sublist in the input list."}
