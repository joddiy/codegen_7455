{"task_id": "Mbpp/272", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef rear_extract(lst):\n    return [t[-1] for t in lst]\n```\n\nThis function uses a list comprehension to iterate over each tuple in the input list, and then extracts the last element (which is the rear element of the tuple) and adds it to the new list.\n\nYou can test the function with the provided assertion:\n\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\nIf the assertion is true, the function is working correctly. If it is not, the function is not working correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Your code should satisfy the following assertion:\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef rear_extract(lst):\n    return [t[-1] for t in lst]\n```\n\nThis function uses a list comprehension to iterate over each tuple in the input list, and then extracts the last element (which is the rear element of the tuple) and adds it to the new list.\n\nYou can test the function with the provided assertion:\n\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\nIf the assertion is true, the function is working correctly. If it is not, the function is not working correctly."}
