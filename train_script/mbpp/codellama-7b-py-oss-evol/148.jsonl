{"task_id": "Mbpp/280", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef sequential_search(array, element):\n    try:\n        index = array.index(element)\n        return (True, index)\n    except ValueError:\n        return (False, -1)\n```\n\nThis function uses Python's built-in list method `index()` to find the index of the element in the array. If the element is found, it returns a tuple `(True, index)`. If the element is not found, it raises a `ValueError` exception, which we catch and return `(False, -1)`.\n\nYou can test the function with the provided assertion:\n\n```python\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). Your code should satisfy the following assertion:\n```python\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef sequential_search(array, element):\n    try:\n        index = array.index(element)\n        return (True, index)\n    except ValueError:\n        return (False, -1)\n```\n\nThis function uses Python's built-in list method `index()` to find the index of the element in the array. If the element is found, it returns a tuple `(True, index)`. If the element is not found, it raises a `ValueError` exception, which we catch and return `(False, -1)`.\n\nYou can test the function with the provided assertion:\n\n```python\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```"}
