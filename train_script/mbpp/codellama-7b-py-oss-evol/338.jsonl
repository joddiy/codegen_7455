{"task_id": "Mbpp/739", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1\n```\n\nThis function starts with `i = 1` and then checks if the triangular number with `i` as the base is of `n` digits. If it is, it returns `i`. If not, it increments `i` and continues the loop.\n\nThis function satisfies the given assertion:\n\n```python\nassert find_Index(2) == 4\n```\n\nThis assertion checks if the function `find_Index` returns `4` when given `2` as input, which is true.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/. Your code should satisfy the following assertion:\n```python\nassert find_Index(2) == 4\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1\n```\n\nThis function starts with `i = 1` and then checks if the triangular number with `i` as the base is of `n` digits. If it is, it returns `i`. If not, it increments `i` and continues the loop.\n\nThis function satisfies the given assertion:\n\n```python\nassert find_Index(2) == 4\n```\n\nThis assertion checks if the function `find_Index` returns `4` when given `2` as input, which is true."}
