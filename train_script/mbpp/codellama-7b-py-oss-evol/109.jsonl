{"task_id": "Mbpp/232", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n```\n\nThis function works by sorting the list in descending order and then taking the first n elements. The sorted function in Python sorts the list in ascending order by default, so we use the reverse=True argument to sort it in descending order.\n\nThe set function is used to remove duplicate values from the list because the problem statement mentions that the n largest items from the list should be unique.\n\nThe assertion checks if the function works as expected. If the function returns the correct result, the assertion will pass. If the function returns the wrong result, the assertion will fail and raise an AssertionError.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list. Your code should satisfy the following assertion:\n```python\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n```\n\nThis function works by sorting the list in descending order and then taking the first n elements. The sorted function in Python sorts the list in ascending order by default, so we use the reverse=True argument to sort it in descending order.\n\nThe set function is used to remove duplicate values from the list because the problem statement mentions that the n largest items from the list should be unique.\n\nThe assertion checks if the function works as expected. If the function returns the correct result, the assertion will pass. If the function returns the wrong result, the assertion will fail and raise an AssertionError."}
