{"task_id": "Mbpp/123", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef sum_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if sum_divisors(i) == i and i != sum_divisors(i):\n            sum += i\n    return sum\n\nassert amicable_numbers_sum(999) == 504\n```\n\nIn this script, the `sum_divisors` function calculates the sum of all divisors of a number. The `amicable_numbers_sum` function calculates the sum of all amicable numbers from 1 to a specified number. An amicable number is a number that is equal to the sum of its proper divisors, but not equal to the sum of its divisors.\n\nThe assertion checks if the function `amicable_numbers_sum` returns the correct sum for the input 999.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sum all amicable numbers from 1 to a specified number. Your code should satisfy the following assertion:\n```python\nassert amicable_numbers_sum(999)==504\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef sum_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if sum_divisors(i) == i and i != sum_divisors(i):\n            sum += i\n    return sum\n\nassert amicable_numbers_sum(999) == 504\n```\n\nIn this script, the `sum_divisors` function calculates the sum of all divisors of a number. The `amicable_numbers_sum` function calculates the sum of all amicable numbers from 1 to a specified number. An amicable number is a number that is equal to the sum of its proper divisors, but not equal to the sum of its divisors.\n\nThe assertion checks if the function `amicable_numbers_sum` returns the correct sum for the input 999."}
