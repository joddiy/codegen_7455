{"task_id": "Mbpp/450", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef extract_string(input_list, size):\n    return [s for s in input_list if len(s) == size]\n```\n\nThis function uses a list comprehension to iterate over the input list and only include the strings that have the specified size. The `len(s) == size` condition checks the length of each string and includes it in the new list only if it matches the specified size.\n\nYou can test this function with the provided assertion:\n\n```python\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n```\n\nThis will return `True` if the function is working as expected, and `False` otherwise.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to extract specified size of strings from a given list of string values. Your code should satisfy the following assertion:\n```python\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef extract_string(input_list, size):\n    return [s for s in input_list if len(s) == size]\n```\n\nThis function uses a list comprehension to iterate over the input list and only include the strings that have the specified size. The `len(s) == size` condition checks the length of each string and includes it in the new list only if it matches the specified size.\n\nYou can test this function with the provided assertion:\n\n```python\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n```\n\nThis will return `True` if the function is working as expected, and `False` otherwise."}
