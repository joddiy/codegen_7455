{"task_id": "Mbpp/281", "completion": "\n Here is a simple Python function that checks if all elements in a list are unique:\n\n```python\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n```\n\nThis function works by converting the list to a set. A set in Python is an unordered collection of unique elements. By comparing the lengths of the list and the set, we can determine if all elements in the list are unique. If the lengths are equal, then all elements are unique. If not, then there are duplicate elements in the list.\n\nYou can test this function with the provided assertion:\n\n```python\nassert all_unique([1,2,3]) == True\n```\n\nThis assertion should pass, because all elements in the list [1,2,3] are unique.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to check if the elements of a given list are unique or not. Your code should satisfy the following assertion:\n```python\nassert all_unique([1,2,3]) == True\n```\n\n    ### Response:\n Here is a simple Python function that checks if all elements in a list are unique:\n\n```python\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n```\n\nThis function works by converting the list to a set. A set in Python is an unordered collection of unique elements. By comparing the lengths of the list and the set, we can determine if all elements in the list are unique. If the lengths are equal, then all elements are unique. If not, then there are duplicate elements in the list.\n\nYou can test this function with the provided assertion:\n\n```python\nassert all_unique([1,2,3]) == True\n```\n\nThis assertion should pass, because all elements in the list [1,2,3] are unique."}
