{"task_id": "Mbpp/126", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef sum_common_divisors(num1, num2):\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors1 = find_divisors(num1)\n    divisors2 = find_divisors(num2)\n\n    common_divisors = list(set(divisors1) & set(divisors2))\n\n    return sum(common_divisors)\n\nassert sum_common_divisors(10,15) == 6\n```\n\nThis function works by first finding all divisors of each number using a helper function `find_divisors()`. Then it finds the intersection of these two lists (which are the common divisors), and finally sums these common divisors.\n\nThe assertion checks if the function `sum_common_divisors(10,15)` returns `6` as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the sum of common divisors of two given numbers. Your code should satisfy the following assertion:\n```python\nassert sum(10,15) == 6\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef sum_common_divisors(num1, num2):\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors1 = find_divisors(num1)\n    divisors2 = find_divisors(num2)\n\n    common_divisors = list(set(divisors1) & set(divisors2))\n\n    return sum(common_divisors)\n\nassert sum_common_divisors(10,15) == 6\n```\n\nThis function works by first finding all divisors of each number using a helper function `find_divisors()`. Then it finds the intersection of these two lists (which are the common divisors), and finally sums these common divisors.\n\nThe assertion checks if the function `sum_common_divisors(10,15)` returns `6` as expected."}
