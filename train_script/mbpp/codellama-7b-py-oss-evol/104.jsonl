{"task_id": "Mbpp/224", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\nThis function works by shifting the bits of the number to the right (using the \">>=\" operator) and then checking the least significant bit (using the \"&\" operator). If the least significant bit is 1, it increments the count. This process continues until there are no more bits in the number.\n\nThe function is tested with the provided assertion:\n\n```python\nassert count_Set_Bits(2) == 1\n```\n\nIf the assertion is true, the function works as expected. If it is false, an AssertionError will be raised.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number. Your code should satisfy the following assertion:\n```python\nassert count_Set_Bits(2) == 1\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\nThis function works by shifting the bits of the number to the right (using the \">>=\" operator) and then checking the least significant bit (using the \"&\" operator). If the least significant bit is 1, it increments the count. This process continues until there are no more bits in the number.\n\nThe function is tested with the provided assertion:\n\n```python\nassert count_Set_Bits(2) == 1\n```\n\nIf the assertion is true, the function works as expected. If it is false, an AssertionError will be raised."}
