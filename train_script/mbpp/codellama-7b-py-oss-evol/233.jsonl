{"task_id": "Mbpp/463", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_subarray = []\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        if num < min_product:\n            min_product = num\n        if max_product * num > max_product:\n            max_product *= num\n        if min_product * num < min_product:\n            min_product *= num\n        if max_product > 0 and max_product > max_subarray[-1]:\n            max_subarray.append(max_product)\n    return max_subarray[-1]\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\nThis function works by keeping track of the maximum and minimum product seen so far. It also keeps track of the maximum and minimum subarray products. If the current number is greater than the maximum product, it updates the maximum product. If the current number is less than the minimum product, it updates the minimum product. If the maximum product times the current number is greater than the maximum product, it updates the maximum product. If the minimum product times the current number is less than the minimum product, it updates the minimum product. If the maximum product is greater than zero and greater than the last element of the maximum subarray, it appends the maximum product to the maximum subarray. Finally, it returns the last element of the maximum subarray, which is the maximum product of a subarray.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the maximum product subarray of the given array. Your code should satisfy the following assertion:\n```python\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_subarray = []\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        if num < min_product:\n            min_product = num\n        if max_product * num > max_product:\n            max_product *= num\n        if min_product * num < min_product:\n            min_product *= num\n        if max_product > 0 and max_product > max_subarray[-1]:\n            max_subarray.append(max_product)\n    return max_subarray[-1]\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\nThis function works by keeping track of the maximum and minimum product seen so far. It also keeps track of the maximum and minimum subarray products. If the current number is greater than the maximum product, it updates the maximum product. If the current number is less than the minimum product, it updates the minimum product. If the maximum product times the current number is greater than the maximum product, it updates the maximum product. If the minimum product times the current number is less than the minimum product, it updates the minimum product. If the maximum product is greater than zero and greater than the last element of the maximum subarray, it appends the maximum product to the maximum subarray. Finally, it returns the last element of the maximum subarray, which is the maximum product of a subarray."}
