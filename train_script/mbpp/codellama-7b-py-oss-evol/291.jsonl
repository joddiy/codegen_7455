{"task_id": "Mbpp/605", "completion": "\n Here is a Python function that checks if a given integer is a prime number:\n\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\nThis function works by first checking if the number is less than or equal to 1, in which case it's not prime. Then it checks if the number is 2 or 3, in which case it's prime. Then it checks if the number is divisible by 2 or 3, in which case it's not prime. Then it checks if the number is divisible by any number up to its square root, in which case it's not prime. If none of these conditions are met, then the number is prime.\n\nYou can test this function with the provided assertion:\n\n```python\nassert prime_num(13)==True\n```\n\nThis should return `True` because 13 is a prime number.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given integer is a prime number. Your code should satisfy the following assertion:\n```python\nassert prime_num(13)==True\n```\n\n    ### Response:\n Here is a Python function that checks if a given integer is a prime number:\n\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\nThis function works by first checking if the number is less than or equal to 1, in which case it's not prime. Then it checks if the number is 2 or 3, in which case it's prime. Then it checks if the number is divisible by 2 or 3, in which case it's not prime. Then it checks if the number is divisible by any number up to its square root, in which case it's not prime. If none of these conditions are met, then the number is prime.\n\nYou can test this function with the provided assertion:\n\n```python\nassert prime_num(13)==True\n```\n\nThis should return `True` because 13 is a prime number."}
