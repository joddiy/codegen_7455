{"task_id": "Mbpp/284", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n```\n\nThis function uses the built-in `all()` function to check if all items in the list are equal to the given element. The `all()` function returns `True` if all items in the iterable are true (or if the iterable is empty). If any item is not equal to the given element, `all()` returns `False`.\n\nThe function uses a generator expression `(item == element for item in lst)` to generate a series of boolean values. The `all()` function then checks if all these values are `True`.\n\nThe assertion checks if the function returns `False` when all items in the list are not equal to the given element.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element. Your code should satisfy the following assertion:\n```python\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n```\n\nThis function uses the built-in `all()` function to check if all items in the list are equal to the given element. The `all()` function returns `True` if all items in the iterable are true (or if the iterable is empty). If any item is not equal to the given element, `all()` returns `False`.\n\nThe function uses a generator expression `(item == element for item in lst)` to generate a series of boolean values. The `all()` function then checks if all these values are `True`.\n\nThe assertion checks if the function returns `False` when all items in the list are not equal to the given element."}
