{"task_id": "Mbpp/138", "completion": "\n Here is a Python function that checks if a given number can be represented as a sum of non-zero powers of 2:\n\n```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            if i % 2 == 0:\n                return False\n            n = n // i\n    if n > 1:\n        return False\n    return True\n```\n\nThis function works by first checking if the number is 0. If it is, it returns True because 0 can be represented as the sum of 0 powers of 2.\n\nNext, it checks if the number is less than 0. If it is, it returns False because negative numbers cannot be represented as a sum of non-zero powers of 2.\n\nThen, it reduces the number by dividing it by 2 until it is no longer divisible by 2. This is because any power of 2 can be represented as 2^n for some integer n.\n\nIf the number is now 1, it returns True because 1 can be represented as the sum of 1 power of 2.\n\nFinally, it checks if the number is greater than 1. If it is, it means the number is not a power of 2 and it returns False.\n\nIf the number is 1 or less after these checks, it means the number can be represented as a sum of non-zero powers of 2 and it returns True.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. Your code should satisfy the following assertion:\n```python\nassert is_Sum_Of_Powers_Of_Two(10) == True\n```\n\n    ### Response:\n Here is a Python function that checks if a given number can be represented as a sum of non-zero powers of 2:\n\n```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            if i % 2 == 0:\n                return False\n            n = n // i\n    if n > 1:\n        return False\n    return True\n```\n\nThis function works by first checking if the number is 0. If it is, it returns True because 0 can be represented as the sum of 0 powers of 2.\n\nNext, it checks if the number is less than 0. If it is, it returns False because negative numbers cannot be represented as a sum of non-zero powers of 2.\n\nThen, it reduces the number by dividing it by 2 until it is no longer divisible by 2. This is because any power of 2 can be represented as 2^n for some integer n.\n\nIf the number is now 1, it returns True because 1 can be represented as the sum of 1 power of 2.\n\nFinally, it checks if the number is greater than 1. If it is, it means the number is not a power of 2 and it returns False.\n\nIf the number is 1 or less after these checks, it means the number can be represented as a sum of non-zero powers of 2 and it returns True."}
