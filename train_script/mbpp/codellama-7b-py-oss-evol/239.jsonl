{"task_id": "Mbpp/473", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef tuple_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1 & set2\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\nIn this script, we first convert the input lists into sets. Then, we find the intersection of the two sets using the `&` operator. This operation returns a new set that contains only the elements that are common to both sets. Finally, we return this intersection set.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement will pass. If the function returns a different result, the `assert` statement will fail, causing the program to raise an `AssertionError`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should satisfy the following assertion:\n```python\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef tuple_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1 & set2\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\nIn this script, we first convert the input lists into sets. Then, we find the intersection of the two sets using the `&` operator. This operation returns a new set that contains only the elements that are common to both sets. Finally, we return this intersection set.\n\nThe `assert` statement is used to test the function. If the function returns the expected result, the `assert` statement will pass. If the function returns a different result, the `assert` statement will fail, causing the program to raise an `AssertionError`."}
