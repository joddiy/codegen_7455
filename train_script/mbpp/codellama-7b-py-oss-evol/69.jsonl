{"task_id": "Mbpp/119", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef search(arr):\n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]\n```\n\nThis function works by iterating over the array in steps of 2. If the current element is not equal to the next one, it means that the next element is the one that appears only once. If the loop finishes without finding such an element, it means that the last element is the one that appears only once.\n\nThe function satisfies the given assertion:\n\n```python\nassert search([1,1,2,2,3]) == 3\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef search(arr):\n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]\n```\n\nThis function works by iterating over the array in steps of 2. If the current element is not equal to the next one, it means that the next element is the one that appears only once. If the loop finishes without finding such an element, it means that the last element is the one that appears only once.\n\nThe function satisfies the given assertion:\n\n```python\nassert search([1,1,2,2,3]) == 3\n```"}
