{"task_id": "Mbpp/140", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n```\n\nIn this script, the function `extract_singly` uses a list comprehension to iterate over each sublist in the input list `lst` and for each sublist, it iterates over each number in the sublist. The `set()` function is used to remove any duplicate numbers. The assertion checks if the function is working as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to flatten the list of lists into a single set of numbers. Your code should satisfy the following assertion:\n```python\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n```\n\nIn this script, the function `extract_singly` uses a list comprehension to iterate over each sublist in the input list `lst` and for each sublist, it iterates over each number in the sublist. The `set()` function is used to remove any duplicate numbers. The assertion checks if the function is working as expected."}
