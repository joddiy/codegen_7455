{"task_id": "Mbpp/590", "completion": "\n Here is a Python function that converts polar coordinates to rectangular coordinates:\n\n```python\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n```\n\nThis function uses the `cmath` module in Python, which provides functions for complex number arithmetic. The `cmath.cos` and `cmath.sin` functions take an angle in radians and return the cosine and sine of that angle, respectively.\n\nThe function `polar_rect` takes the radius `r` and the angle `theta` as input, calculates the x and y coordinates using the formulas `x = r * cos(theta)` and `y = r * sin(theta)`, and returns a tuple of the two coordinates.\n\nThe assertion checks if the function `polar_rect` correctly converts the polar coordinates `(3, 4)` to rectangular coordinates. The expected output is `(5.0, 0.9272952180016122)` for the x-coordinate and `(-2+2.4492935982947064e-16j)` for the y-coordinate. The `e-16j` is a very small imaginary part due to the precision of floating point arithmetic.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to convert polar coordinates to rectangular coordinates. Your code should satisfy the following assertion:\n```python\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\n    ### Response:\n Here is a Python function that converts polar coordinates to rectangular coordinates:\n\n```python\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n```\n\nThis function uses the `cmath` module in Python, which provides functions for complex number arithmetic. The `cmath.cos` and `cmath.sin` functions take an angle in radians and return the cosine and sine of that angle, respectively.\n\nThe function `polar_rect` takes the radius `r` and the angle `theta` as input, calculates the x and y coordinates using the formulas `x = r * cos(theta)` and `y = r * sin(theta)`, and returns a tuple of the two coordinates.\n\nThe assertion checks if the function `polar_rect` correctly converts the polar coordinates `(3, 4)` to rectangular coordinates. The expected output is `(5.0, 0.9272952180016122)` for the x-coordinate and `(-2+2.4492935982947064e-16j)` for the y-coordinate. The `e-16j` is a very small imaginary part due to the precision of floating point arithmetic."}
