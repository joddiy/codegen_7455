{"task_id": "Mbpp/392", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\nassert get_max_sum(60) == 106\n```\n\nThis script defines a function `get_max_sum(n)` that recursively calculates the maximum sum possible by using the given equation. The base case for the recursion is when `n` equals 1, in which case the maximum sum is 1. For all other values of `n`, the function returns the maximum of the sum of the maximum sums of the fractions and `n` itself. The `assert` statement verifies that the function works correctly for the given test case.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should satisfy the following assertion:\n```python\nassert get_max_sum(60) == 106\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\nassert get_max_sum(60) == 106\n```\n\nThis script defines a function `get_max_sum(n)` that recursively calculates the maximum sum possible by using the given equation. The base case for the recursion is when `n` equals 1, in which case the maximum sum is 1. For all other values of `n`, the function returns the maximum of the sum of the maximum sums of the fractions and `n` itself. The `assert` statement verifies that the function works correctly for the given test case."}
