{"task_id": "Mbpp/395", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef first_non_repeating_character(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None\n```\n\nThis function first counts the occurrences of each character in the string. Then it iterates through the string again, returning the first character that only occurs once. If no such character exists, it returns None.\n\nThe provided assertion will pass if the function works correctly:\n\n```python\nassert first_non_repeating_character(\"abcabc\") == None\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the first non-repeated character in a given string. Your code should satisfy the following assertion:\n```python\nassert first_non_repeating_character(\"abcabc\") == None\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef first_non_repeating_character(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None\n```\n\nThis function first counts the occurrences of each character in the string. Then it iterates through the string again, returning the first character that only occurs once. If no such character exists, it returns None.\n\nThe provided assertion will pass if the function works correctly:\n\n```python\nassert first_non_repeating_character(\"abcabc\") == None\n```"}
