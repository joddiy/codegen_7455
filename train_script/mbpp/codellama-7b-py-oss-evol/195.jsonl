{"task_id": "Mbpp/419", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n```\n\nIn this script, we define a function `round_and_sum` that takes a list of numbers as input. It initializes a variable `total` to 0 and then iterates over each number in the list. For each number, it rounds it to the nearest integer and adds it to `total`. After going through all the numbers, it returns the product of `total` and the length of the list.\n\nThe assertion checks whether the function `round_and_sum` returns the correct result for the given input. If the function is correct, the assertion will not raise an error. If the function is incorrect, the assertion will raise an error.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Your code should satisfy the following assertion:\n```python\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n```\n\nIn this script, we define a function `round_and_sum` that takes a list of numbers as input. It initializes a variable `total` to 0 and then iterates over each number in the list. For each number, it rounds it to the nearest integer and adds it to `total`. After going through all the numbers, it returns the product of `total` and the length of the list.\n\nThe assertion checks whether the function `round_and_sum` returns the correct result for the given input. If the function is correct, the assertion will not raise an error. If the function is incorrect, the assertion will raise an error."}
