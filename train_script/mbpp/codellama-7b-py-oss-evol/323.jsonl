{"task_id": "Mbpp/721", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] / (N * N)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\nThis script uses dynamic programming to solve the problem. It first initializes a 2D array `dp` where `dp[i][j]` is the maximum average of a path that ends at cell `(i, j)`. Then it fills up the `dp` array in a bottom-up manner. The time complexity of this script is O(N^2) where N is the size of the matrix.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path. Your code should satisfy the following assertion:\n```python\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] / (N * N)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\nThis script uses dynamic programming to solve the problem. It first initializes a 2D array `dp` where `dp[i][j]` is the maximum average of a path that ends at cell `(i, j)`. Then it fills up the `dp` array in a bottom-up manner. The time complexity of this script is O(N^2) where N is the size of the matrix."}
