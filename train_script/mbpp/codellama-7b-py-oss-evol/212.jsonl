{"task_id": "Mbpp/438", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef count_bidirectional(tuples):\n    pairs = set()\n    for t in tuples:\n        pairs.add(t)\n        pairs.add((t[1], t[0]))\n    return len(pairs)\n```\n\nThis function works by iterating over each tuple in the input list, and adding both the tuple and its reverse to a set. Since a set only contains unique elements, this automatically removes any duplicate pairs. Finally, it returns the length of the set, which is the count of unique bidirectional pairs.\n\nYou can test this function with the provided assertion:\n\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n```\n\nThis will pass if the function is implemented correctly.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to count bidirectional tuple pairs. Your code should satisfy the following assertion:\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef count_bidirectional(tuples):\n    pairs = set()\n    for t in tuples:\n        pairs.add(t)\n        pairs.add((t[1], t[0]))\n    return len(pairs)\n```\n\nThis function works by iterating over each tuple in the input list, and adding both the tuple and its reverse to a set. Since a set only contains unique elements, this automatically removes any duplicate pairs. Finally, it returns the length of the set, which is the count of unique bidirectional pairs.\n\nYou can test this function with the provided assertion:\n\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n```\n\nThis will pass if the function is implemented correctly."}
