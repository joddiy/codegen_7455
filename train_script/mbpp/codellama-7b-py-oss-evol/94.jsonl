{"task_id": "Mbpp/164", "completion": "\n Here is a Python function that solves the problem:\n\n```python\ndef divisors(n):\n    divs = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef are_equivalent(a, b):\n    return sum(divisors(a)) == sum(divisors(b))\n```\n\nIn this code, the `divisors` function finds all divisors of a number. The `are_equivalent` function then checks if the sum of the divisors of the two numbers are the same.\n\nThe assertion `assert are_equivalent(36, 57) == False` will pass because the sum of divisors of 36 (1, 2, 3, 4, 6, 9, 12, 18) is not equal to the sum of divisors of 57 (1, 2, 3, 5, 6, 9, 10, 14, 15, 21, 28, 35).", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to determine if the sum of the divisors of two integers are the same. Your code should satisfy the following assertion:\n```python\nassert are_equivalent(36, 57) == False\n```\n\n    ### Response:\n Here is a Python function that solves the problem:\n\n```python\ndef divisors(n):\n    divs = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef are_equivalent(a, b):\n    return sum(divisors(a)) == sum(divisors(b))\n```\n\nIn this code, the `divisors` function finds all divisors of a number. The `are_equivalent` function then checks if the sum of the divisors of the two numbers are the same.\n\nThe assertion `assert are_equivalent(36, 57) == False` will pass because the sum of divisors of 36 (1, 2, 3, 4, 6, 9, 12, 18) is not equal to the sum of divisors of 57 (1, 2, 3, 5, 6, 9, 10, 14, 15, 21, 28, 35)."}
