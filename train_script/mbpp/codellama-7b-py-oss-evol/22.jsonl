{"task_id": "Mbpp/64", "completion": "\n Here is a Python script that solves the problem:\n\n```python\ndef subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nIn this script, the function `subject_marks` takes a list of tuples as input. It uses the built-in `sorted` function to sort the list of tuples. The `key` argument of the `sorted` function is a function that takes a tuple and returns a value to sort by. In this case, the `key` function is a lambda function that returns the second element of each tuple. The sorted list is then returned.\n\nThe `assert` statement checks if the output of `subject_marks` is as expected. If the output is not as expected, an `AssertionError` will be raised.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of tuples using the second value of each tuple. Your code should satisfy the following assertion:\n```python\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\n    ### Response:\n Here is a Python script that solves the problem:\n\n```python\ndef subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\nIn this script, the function `subject_marks` takes a list of tuples as input. It uses the built-in `sorted` function to sort the list of tuples. The `key` argument of the `sorted` function is a function that takes a tuple and returns a value to sort by. In this case, the `key` function is a lambda function that returns the second element of each tuple. The sorted list is then returned.\n\nThe `assert` statement checks if the output of `subject_marks` is as expected. If the output is not as expected, an `AssertionError` will be raised."}
