{"task_id": "Mbpp/803", "completion": "\n Here is a Python function that checks if a given number is a perfect square:\n\n```python\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    else:\n        root = round(n ** 0.5)\n        return root * root == n\n```\n\nThis function first checks if the number is negative, in which case it cannot be a perfect square. Then it calculates the square root of the number and rounds it to the nearest integer. If the square of this integer is equal to the original number, then the number is a perfect square.\n\nYou can test this function with the provided assertion:\n\n```python\nassert not is_perfect_square(10)\n```\n\nThis will pass the assertion because 10 is not a perfect square.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/. Your code should satisfy the following assertion:\n```python\nassert not is_perfect_square(10)\n```\n\n    ### Response:\n Here is a Python function that checks if a given number is a perfect square:\n\n```python\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    else:\n        root = round(n ** 0.5)\n        return root * root == n\n```\n\nThis function first checks if the number is negative, in which case it cannot be a perfect square. Then it calculates the square root of the number and rounds it to the nearest integer. If the square of this integer is equal to the original number, then the number is a perfect square.\n\nYou can test this function with the provided assertion:\n\n```python\nassert not is_perfect_square(10)\n```\n\nThis will pass the assertion because 10 is not a perfect square."}
