{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    return s.islower() and \"_\" in s"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "completion": "def check_type(t):\n    return len(set(type(i) for i in t)) == 1"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(s, c):\n    return s.replace(' ', c)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    return n | (n >> 1)"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    return len(s) * (len(s) + 1) // 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    else:\n        return sum(get_total_number_of_sequences(i, n - 1) for i in range(2, m + 1, 2))\n\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(string):\n    return len(string)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(n):\n    return (n + 1) ** 2"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    max_ending_here = max_ending_so_far = 0\n    start = end = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here = max_ending_here + arr[i]\n            if max_ending_here > max_ending_so_far:\n                max_ending_so_far = max_ending_here\n                start = end = i\n        else:\n            max_ending_here = 0\n            end = i\n    return max_ending_so_far + arr[start]\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    for char in str2:\n        str1 = str1.replace(char, '')\n    return str1\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0 for x in range(n)]for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, x):\n    return tup.count(x)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, elem):\n    return [elem] + [elem + x for x in lst]"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(num):\n    return cmath.polar(num)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "completion": "from itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))\n\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(is_prime(i) for i in range(n))"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        if t1[i][0] > t2[i][0]:\n            result.append(t1[i])\n        elif t1[i][0] < t2[i][0]:\n            result.append(t2[i])\n        else:\n            if t1[i][1] > t2[i][1]:\n                result.append(t1[i])\n            else:\n                result.append(t2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(lst):\n    return len(lst) != len(set(lst))"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_nth_prime(n):\n        count = 0\n        num = 1\n        while count < n:\n            num += 1\n            if is_prime(num):\n                count += 1\n        return num\n\n    return find_nth_prime(n)\n\n\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "completion": "def division_elements(tup1, tup2):\n    return tuple(a / b if b != 0 else 0 for a, b in zip(tup1, tup2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_age):\n    # A dog's age is approximately 1/7th of a human's age.\n    return human_age / 7"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + 8*find_star_num(n-1)"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(i for i in lst[::2] if i % 2 == 0)"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return n % sum_of_digits == 0"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(0, n*2, 2):\n        sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [t[-1] for t in lst]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(t1, t2):\n    return tuple(x - y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    return sum\n\ndef binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k))"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(t):\n    count = 0\n    for i in t:\n        if not isinstance(i, tuple):\n            count += 1\n        else:\n            count += len(i)\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * ((3 * n) - 2)\n\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    try:\n        index = array.index(element)\n        return (True, index)\n    except ValueError:\n        return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/56", "completion": "def check(n):\n    reverse = int(str(n)[::-1])\n    return n == reverse - 2"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    assert len(list1) == len(list2), \"Lists must be of the same length\"\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    num_str = str(n)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(s):\n    return s.startswith('a') and (s[1:].startswith('bb') or s[1:].startswith('bbb'))"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, m):\n    # Repeat the array k times\n    repeated_arr = arr * k\n\n    # Initialize the maximum sum and current sum\n    max_sum = current_sum = 0\n\n    # Iterate over the repeated array\n    for num in repeated_arr:\n        # Add the number to the current sum\n        current_sum += num\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        max_sum = max(max_sum, current_sum)\n\n        # If the current sum is less than zero, reset the current sum\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_len = max(len(sub_lst) for sub_lst in lst)\n    return (max_len, [item for sub_lst in lst for item in sub_lst if len(sub_lst) == max_len])\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "completion": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return round(c, 2)\n\nassert otherside_rightangle(7,8)==10.63"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    return max(lst)"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))\n\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    result = []\n    for i in nested_list:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    # Create a dictionary to store the aggregate scores for each student\n    scores = {}\n    for name, score in lst:\n        if name in scores:\n            scores[name] += score\n        else:\n            scores[name] = score\n\n    # Find the maximum aggregate score\n    max_score = max(scores.values())\n\n    # Find the student(s) with the maximum aggregate score\n    max_students = [name for name, score in scores.items() if score == max_score]\n\n    # Return the student(s) with the maximum aggregate score and their aggregate score\n    return (max_students, max_score)\n\n# Test the function\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==(('Juan Whelan',), 212)"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    # Initialize count to 0\n    count = 0\n\n    # Iterate over all possible sums of first n bits\n    for i in range(2**n):\n        # Convert the sum to binary and count the number of 1's\n        count += bin(i).count('1')\n\n    # Return the count\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    result = []\n    for word in words:\n        if word.split()[0].lower() == 'p':\n            result.extend(word.split())\n    return tuple(result[:2])"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, i, k, j):\n    if i > j:\n        return 0\n    if i == j:\n        return arr[i]\n    dp = [0] * (j + 1)\n    dp[i] = arr[i]\n    for x in range(i + 1, j + 1):\n        dp[x] = max(dp[x - 1], dp[x - 2] + arr[x])\n    return dp[k]\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    # Create a list to store the products\n    products = []\n\n    # Iterate over the lists\n    for num1 in list1:\n        for num2 in list2:\n            # Multiply the numbers and add to the list\n            products.append(num1 * num2)\n\n    # Sort the list in descending order\n    products.sort(reverse=True)\n\n    # Return the n largest products\n    return products[:n]"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    return max(a, b)\n\nassert maximum(5,10) == 10"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(a, b):\n    return (a < 0 and b > 0) or (a > 0 and b < 0)"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    return n | (1 << (n.bit_length()))"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = [2, 1]\n        for i in range(2, n + 1):\n            lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n        return lucas_numbers[n]"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(student_ids, locations, scores):\n    result = []\n    for i in range(len(student_ids)):\n        temp_dict = {student_ids[i]: {locations[i]: scores[i]}}\n        result.append(temp_dict)\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n*(5*n-3)//2\n\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/396", "completion": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n\nassert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(lst):\n    return sum(int(digit) for number in lst for digit in str(number))\n\nassert sum_of_digits([10,2,56])==14"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    return len(set(lst))"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    return min(a, b)"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(n):\n    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    return int(''.join(num_list))\n\nassert rearrange_bigger(12)==21"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    # Flatten the list of tuples\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(flat_list)\n    \n    # Return the product of the smallest two numbers\n    return sorted_list[0] * sorted_list[1]\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    return min(lst, key=lambda x: (str(x).lower(), x) if not isinstance(x, str) else (x, float('inf')))\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(i) for i in tup)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / (n ** 3)"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, elem):\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(lst):\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    return date[8:10] + '-' + date[5:7] + '-' + date[:4]\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n\n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n\n            # add a[i] to the elements that have been gap sorted\n            temp = arr[i]\n\n            # shift earlier gap-sorted elements up until the correct location for a[i] is found\n            j = i\n            while  j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n\n            # put temp (the original a[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(min(a, b) for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # If the discriminant is positive, the parabola has two distinct real roots\n    if d > 0:\n        # The directrix is the line y = -b / (2a)\n        return -b / (2*a)\n    # If the discriminant is zero, the parabola has one real root\n    elif d == 0:\n        # The directrix is the line y = -b / (2a)\n        return -b / (2*a)\n    # If the discriminant is negative, the parabola has two complex roots\n    else:\n        # The directrix is the line y = -b / (2a)\n        return -b / (2*a)"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    return any(i in list2 for i in list1)"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    # calculate the perimeter of the trapezium\n    perimeter = a + b + c\n    # calculate the median length\n    median = perimeter / 2\n    return median"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    # Sort the tuples by the first element of each tuple\n    tuples.sort()\n    \n    # Initialize the maximum difference to be the difference between the first and second elements of the first tuple\n    max_diff = tuples[1][0] - tuples[0][0]\n    \n    # Iterate through the sorted tuples\n    for i in range(1, len(tuples)):\n        # Update the maximum difference if the difference between the current tuple and the previous one is larger\n        max_diff = max(max_diff, tuples[i][0] - tuples[i-1][1])\n    \n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return ''.join([ch for i, ch in enumerate(s) if (i+1)%2 == 0])\n\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    pairs = set()\n    for t in tuples:\n        pairs.add(t)\n        pairs.add((t[1], t[0]))\n    return len(pairs)"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))\n\nassert multiple_to_single([11, 33, 50])==113350"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence):\n    adverbs = ['clearly', 'quickly', 'slowly', 'softly', 'hardly', 'easily', 'quick', 'slow', 'soft', 'hard', 'easy']\n    for adverb in adverbs:\n        if adverb in sentence:\n            return sentence.index(adverb), sentence.index(adverb) + len(adverb) - 1, adverb\n    return None\n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    # Count the number of positive numbers in the array\n    positive_count = sum(1 for num in arr if num > 0)\n    \n    # Calculate the ratio of positive numbers\n    ratio = positive_count / len(arr)\n    \n    return ratio"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(t1, t2):\n    return tuple(tuple(a*b for a, b in zip(t1[i], t2[i])) for i in range(len(t1)))"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tuple_list, elements):\n    count = 0\n    for element in elements:\n        count += tuple_list.count(element)\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(lst):\n    return [i**3 for i in lst]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    perrin_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return sum(i for i in perrin_numbers if i <= n)\n\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "completion": "def extract_string(input_list, size):\n    return [s for s in input_list if len(s) == size]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    if 'z' in text:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    return ''.join([c for c in s if c.islower() or c.isdigit() or c.isspace()])\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\nassert recursive_list_sum([1, 2, [3,4],[5,6]])==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    else:\n        return [x + [lst[0]] for x in combinations_list(lst[1:])] + combinations_list(lst[1:])\n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_subarray = []\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        if num < min_product:\n            min_product = num\n        if max_product * num > max_product:\n            max_product *= num\n        if min_product * num < min_product:\n            min_product *= num\n        if max_product > 0 and max_product > max_subarray[-1]:\n            max_subarray.append(max_product)\n    return max_subarray[-1]\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < max_ending_here:\n            min_so_far = min(min_so_far, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max(max_so_far * min_so_far, max_so_far * (n - max_so_far.bit_length()))\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return all(lst[i] == lst[i+1]-1 for i in range(len(lst)-1))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1 & set2\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)"}
{"task_id": "Mbpp/474", "completion": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    return ''.join(s[i] for i in range(len(s)) if not s[i].islower())\n\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i]^arr[j])%2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\ndef partition_count(n):\n    bell = bell_number(n)\n    return bell\n\nassert partition_count(2)==2"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    sum_diff = 0\n    for i in range(max(len(num1_str), len(num2_str))):\n        digit1 = int(num1_str[i]) if i < len(num1_str) else 0\n        digit2 = int(num2_str[i]) if i < len(num2_str) else 0\n        sum_diff += abs(digit1 - digit2)\n    return sum_diff"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(lst, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(lst)):\n        current_sum += lst[i]\n        if i >= k - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= lst[i - k + 1]\n    return max_sum\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    return sorted(set(t1 + t2))\n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(s):\n    return [i.strip('\"') for i in s.split(',')]"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return lst == sorted(lst)"}
{"task_id": "Mbpp/568", "completion": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def remove_duplicates(nums):\n    return list(set(nums))\n\ndef two_unique_nums(nums):\n    return remove_duplicates(nums)"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_nums = list(set(lst))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "completion": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(main_list, sub_list):\n    return sub_list in main_list"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    return [val for tup in zip(list1, list2, list3) for val in tup]\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    t1_set = set(t1)\n    t2_set = set(t2)\n    return tuple(t1_set.symmetric_difference(t2_set))"}
{"task_id": "Mbpp/580", "completion": "def extract_even(nested_tuple):\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base, height):\n    return 2 * base * height + base ** 2"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(main_list, sublist):\n    return sublist in main_list"}
{"task_id": "Mbpp/582", "completion": "def is_dict_empty(d):\n    return not bool(d)\n\n# Testing the function\nassert is_dict_empty({10}) == False"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    # Sort the dataset by price in descending order\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n items\n    return sorted_dataset[:n]\n\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    return [i**2 for i in range(start, end+1) if i**2 == int(i**2)]"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "completion": "def sum_of_product(n):\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*(i+2)\n    return sum"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))\n\nassert removezero_ip(\"216.08.094.196\")=='216.8.94.196'"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 != 0]\n    return abs(evens[0] - odds[0])"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(bin1, bin2):\n    swaps = 0\n    bin1 = list(bin1)\n    bin2 = list(bin2)\n    while bin1:\n        i = bin1.index('1')\n        temp = bin1[i]\n        bin1[i] = '0'\n        j = bin2.index('1')\n        bin2[j] = '0'\n        swaps += 1\n    return swaps - 1"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 == 0:\n        return arr2[k - 1]\n    if len2 == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    if arr1[0] < arr2[0]:\n        if k <= len1:\n            return find_kth(arr1[1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[1:], k - len1 - 1)\n    else:\n        if k <= len1 + len2:\n            return find_kth(arr1, arr2[1:], k)\n        else:\n            return find_kth(arr1[1:], arr2, k - len1 - 1)"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(n):\n    # Convert the number to a string to easily get each digit\n    str_n = str(n)\n    length = len(str_n)\n    sum = 0\n\n    # Calculate the sum of the cubes of each digit\n    for digit_str in str_n:\n        digit = int(digit_str)\n        sum += digit ** length\n\n    # If the calculated sum is equal to the original number, it's an Armstrong number\n    return sum == n"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum_num = (n * (n + 1)) // 2\n    avg_num = n / 2.0\n    return (sum_num, avg_num)\n\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    for i in range(len(s)):\n        if s.count(s[i]) > 1:\n            return s[i]\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludic = []\n    for num in range(1, n+1):\n        if all(num%i!=0 for i in range(2, num)):\n            ludic.append(num)\n    return ludic\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(lst):\n    n = len(lst)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n\n        for i in range(n - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n\n    return lst"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])\n\nassert reverse_words(\"python program\")==(\"program python\")"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    # Create a 2D list to store Bell numbers\n    bell = [[0 for x in range(n+1)] for x in range(n+1)]\n\n    # Initializing first Bell number\n    bell[0][0] = 1\n\n    # Filling the Bell triangle in bottom up manner\n    for i in range(1, n+1):\n        for j in range(i+1):\n            if(j == 0 or j == i):\n                bell[i][j] = 1\n            else:\n                bell[i][j] = bell[i-1][j-1] + bell[i-1][j]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    return [sum(t)/len(t) for t in tuples]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    # Convert the numbers to binary and remove the '0b' prefix\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # If the lengths of the binary strings are not equal, they differ at more than one bit position\n    if len(bin1) != len(bin2):\n        return False\n\n    # Check each bit in the binary strings\n    for b1, b2 in zip(bin1, bin2):\n        if b1 != b2:\n            return True\n\n    # If no differences found, the numbers differ at no more than one bit position\n    return False"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = int((n - i * i) ** 0.5)\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [a/b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = [ch for ch in s if ch.isdigit()]\n    alphas = [ch for ch in s if ch.isalpha()]\n    return ''.join(alphas + nums)"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(lst):\n    n = len(lst)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if lst[i - 1] % lst[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size//2] + merged_list[size//2 - 1]) / 2\n    else:\n        return merged_list[size//2]"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(lst, n):\n    return [i ** n for i in lst]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * math.sqrt(3) * (radius ** 2)\n\nassert triangle_area(-1) == None"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "completion": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n    for i in range(len(strings)):\n        if strings[i] != patterns[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    x, y = coord\n    return [[a, b] for a in range(x-1, x+2) for b in range(y-1, y+2) if (a, b) != coord]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    if ' ' in s:\n        return s.replace(' ', '_')\n    else:\n        return s.replace('_', ' ')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    return [i for i in lst if i != 0] + [0]*lst.count(0)"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(lst, x):\n    sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum += lst[i] ^ lst[j]\n    return sum ^ x"}
{"task_id": "Mbpp/635", "completion": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(cost, price):\n    if cost == price:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(velocity, temperature):\n    return round(13.12 + 0.6215*temperature - 11.37*(velocity**0.16) + 0.3965*temperature*(velocity**0.16))"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    sum_length = 0\n    for name in names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"}
{"task_id": "Mbpp/640", "completion": "def remove_parenthesis(input_list):\n    output_list = []\n    for string in input_list:\n        new_string = ''.join(ch for ch in string if ch not in '()')\n        output_list.append(new_string)\n    return output_list"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return n*(7*n-5)//2"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(i % k == 0 for i in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    # Remove the start and end characters if they are 'z'\n    text = text.lstrip('z').rstrip('z')\n    # Check if the modified string contains 'z'\n    return 'z' in text"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] / (N * N)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "completion": "def filter_data(data, min_height, min_weight):\n    return {name: info for name, info in data.items() if info[0] > min_height and info[1] > min_weight}\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = 0\n    for _ in range(power):\n        result += base\n    return sum(int(digit) for digit in str(result))\n\nassert power_base_sum(2,100)==115"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(s):\n    return [x.strip('\"') for x in s.split('\"') if x not in ['', ' ']]\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a+b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/77", "completion": "def is_Divisible_by_11(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    result = [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]\n    return result"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * h"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(s):\n    return s.replace(' ',':').replace(',',':').replace('.',':')\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\n    return -1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        subarray_sum = 1\n        for j in range(i, n):\n            subarray_sum *= arr[j]\n            total_sum += subarray_sum\n    return total_sum"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    n = ~n  # bitwise NOT operation to flip all bits\n    n = n & 0x6  # bitwise AND operation to keep only the first and last bit\n    n = ~n  # bitwise NOT operation to flip all bits again\n    return n"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    vowels = \"aeiou\"\n    if re.match(\"^[\" + vowels + \"]\", s):\n        return True\n    else:\n        return False\n\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(t):\n    return dict(zip(t[::2], t[1::2]))\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(edge_length):\n    return (edge_length ** 2) * math.sqrt(2) / 12"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "completion": "def check_none(t):\n    return any(item is None for item in t)"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(int(digit)%num == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "completion": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * math.pi * radius**2"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    words = s.split(' ')\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = ' ' + words[i]\n    return ''.join(words)"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: (int(x.lstrip('-')), x[0] == '-'))\n\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500'])==['-500', '-12', '0', '4', '7', '12', '45', '100', '200']"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tpl):\n    return lst + list(tpl)\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[2*i+1]:\n            return False\n        if 2*i+2 < n:\n            if arr[i] > arr[2*i+2]:\n                return False\n    return True"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(n - 1):\n            a, b = b, 2 * b + a\n        return b"}
{"task_id": "Mbpp/753", "completion": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for n in numbers:\n        if n <= smallest:\n            smallest, second_smallest = n, smallest\n        elif n < second_smallest:\n            second_smallest = n\n    return second_smallest"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][::-1] == lst[j]:\n                count += 1\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    sublists = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        num = float(s)\n        if num.is_integer():\n            return False\n        else:\n            return round(num, 2) == num\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month):\n    thirty_days_months = [4, 6, 9, 11]\n    return month in thirty_days_months"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\n# Test the function with the provided assertion\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 2 * is_polite(n - 1) + is_polite(n - 2)"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(nums, sum):\n    count = 0\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            count += nums_dict[num]\n        nums_dict[sum - num] = nums_dict.get(sum - num, 0) + 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(list1, list2):\n    return [i for i in list1 if i not in list2]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    result = ' '.join([word for word in words if len(word) != k])\n    return result"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    if string.find(substring) == -1:\n        return None\n    else:\n        return (substring, string.find(substring), string.find(substring) + len(substring) - 1)"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(s):\n    sum_ascii = sum(ord(c) for c in s)\n    return chr((sum_ascii % 26) + ord('a'))\n\nassert get_Char(\"abc\") == \"f\""}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    result = []\n    sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append(sublist)\n            sublist = [lst[i]]\n    result.append(sublist)\n    return result"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations\n\ndef find_combinations(lst):\n    result = []\n    for i in range(1, len(lst) + 1):\n        for subset in combinations(lst, i):\n            if sum(x[0] for x in subset) == sum(x[1] for x in subset):\n                result.append(tuple(sum(x) for x in zip(*subset)))\n    return result\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2 != 0:\n                sum += sum_of_subarray(arr, i, j)\n    return sum\n\ndef sum_of_subarray(arr, start, end):\n    return sum(arr[start:end+1])\n\nprint(odd_length_sum([1,2,4]))  # Output: 14"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return round(h, 1), round(s*100, 1), round(v*100, 1)"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n        else:\n            odd_product *= num\n            odd_count += 1\n    if even_count > 0:\n        return even_product\n    elif odd_count > 0:\n        return odd_product\n    else:\n        return None\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tup_str):\n    # Remove the parentheses and split the string by comma\n    str_list = tup_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\n    \n    # Convert each string to integer and return as a tuple\n    return tuple(int(i) for i in str_list)"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, val):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "completion": "def text_match_three(text):\n    return text == \"abbb\"\n\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, str):\n    return tuple(lst + [str])"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(t):\n    result = []\n    for item in t:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "completion": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n\n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the midpoint\n        mid = (left + right) // 2\n\n        # If the midpoint is the element we're looking for\n        if arr[mid] == x:\n            # If this is the last occurrence of the element, then the right pointer is the last position\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            # Otherwise, continue the search on the right side\n            else:\n                left = mid + 1\n        # If the midpoint is greater than the element we're looking for\n        elif arr[mid] > x:\n            # If the left pointer is greater than the midpoint, then the element is not in the left half\n            if mid == 0 or arr[mid - 1] < x:\n                return -1\n            # Otherwise, continue the search on the left side\n            else:\n                right = mid - 1\n        # If the midpoint is less than the element we're looking for\n        else:\n            # If the right pointer is less than the midpoint, then the element is not in the right half\n            if mid == len(arr) - 1 or arr[mid + 1] > x:\n                return -1\n            # Otherwise, continue the search on the right side\n            else:\n                left = mid + 1\n\n    # If the element is not in the array\n    return -1"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\n\nassert sum_in_range(2,5) == 8"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    else:\n        root = round(n ** 0.5)\n        return root * root == n"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(tup1, tup2):\n    return all(x < y for x, y in zip(tup1, tup2))"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(s):\n    words = s.split()\n    result = [word for word in words if len(word) >= 4]\n    return result"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return n*(2*n - 1)\n\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, substr):\n    for string in lst:\n        if substr in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    # Convert the number to a string to easily access each digit\n    num_str = str(n)\n    \n    # Check if the first digit is odd or even\n    if int(num_str[0]) % 2 == 0:\n        even_count = 1\n    else:\n        odd_count = 1\n    \n    # Check the rest of the digits\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # If the number of odd and even digits is not the same, the number is undulating\n    return odd_count != even_count"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/8", "completion": "def square_nums(lst):\n    return [i**2 for i in lst]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lists):\n    freq = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    n = str(n)\n    if n == n[::-1]:\n        return int(n)\n    else:\n        n = str(int(n) + 1)\n        while n != n[::-1]:\n            n = str(int(n) + 1)\n        return int(n)"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\nassert snake_to_camel('python_program')=='PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    return (n + 1) * (m ** (n + 1))"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(lst)"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    if s == s[::-1]:\n        return 0\n    else:\n        for i in range(len(s)):\n            if s == s[i:] + s[:i]:\n                return i\n        return len(s)"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tup):\n    return tup + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, rotations):\n    binary_string = binary_string[rotations:] + binary_string[:rotations]\n    odd_count = sum(int(bit) for bit in binary_string)\n    return odd_count\n\nassert odd_Equivalent(\"011001\",6) == 3"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_list):\n    # Flatten the nested list\n    flat_list = [item for sublist in nested_list for item in sublist]\n    # Use set to find common elements\n    common_elements = set(flat_list)\n    return common_elements\n\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "completion": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\nassert tuple_to_int((1,2,3))==123"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(lst):\n    return [(float(x), float(y)) for x, y in lst]"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(s, c):\n    if s.count(c) < 2:\n        return s\n    else:\n        return s.replace(c, '', 1).replace(c, '', -1)\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\""}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    # Flatten the list of tuples\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(flat_list)\n    \n    # Calculate the maximum absolute product\n    max_product = max(sorted_list[-1] * sorted_list[-2], sorted_list[0] * sorted_list[1])\n    \n    return max_product\n\n# Test the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": "Mbpp/123", "completion": "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if sum_divisors(i) == i and i != sum_divisors(i):\n            sum += i\n    return sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "completion": "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    max_diff = 0\n    current_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    for char in binary_string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        current_diff = abs(zero_count - one_count)\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(num1, num2):\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors1 = find_divisors(num1)\n    divisors2 = find_divisors(num2)\n\n    common_divisors = list(set(divisors1) & set(divisors2))\n\n    return sum(common_divisors)\n\nassert sum_common_divisors(10,15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10,20)==200"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]\n\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # Check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Check if the sum of each row is the same\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n\n    # Check if the sum of each column is the same\n    col_sum = sum(matrix[0][i] for i in range(len(matrix)))\n    for col in range(len(matrix)):\n        if sum(matrix[row][col] for row in range(len(matrix))) != col_sum:\n            return False\n\n    # Check if the sum of the diagonals is the same\n    if sum(matrix[i][i] for i in range(len(matrix))) != row_sum:\n        return False\n\n    if sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix))) != row_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    max_count = max(list(counter.values()))\n    max_items = [k for k, v in counter.items() if v == max_count]\n    return max_items"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i, j = i + 1, j - 1\n    return ''.join(s_list)\n\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    sums = [sum(row) for row in matrix]\n    # Sort the matrix based on the sums\n    sorted_matrix = [row for _, row in sorted(zip(sums, matrix))]\n    return sorted_matrix\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(num_list):\n    return sum(num for num in num_list if num < 0)"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2*n - 1)"}
{"task_id": "Mbpp/137", "completion": "import math\n\ndef zero_count(arr):\n    zero_count = sum(x == 0 for x in arr)\n    non_zero_count = sum(x != 0 for x in arr)\n    return zero_count / non_zero_count\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            if i % 2 == 0:\n                return False\n            n = n // i\n    if n > 1:\n        return False\n    return True"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(lst):\n    for i in range(len(lst) - 1, 0, -1):\n        # Find the maximum number in the unsorted sublist\n        max_idx = i\n        for j in range(i):\n            if lst[j] > lst[max_idx]:\n                max_idx = j\n\n        # If the maximum number is not the first element, we need to flip it to the first position\n        if max_idx != i - 1:\n            # Flip the sublist to put the maximum number at the end\n            lst = lst[:max_idx+1][::-1] + lst[max_idx+1:]\n            # Flip the whole list to put the maximum number at the beginning\n            lst = lst[:i][::-1] + lst[i:]\n\n    return lst\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "completion": "def find_lists(tup):\n    return len(tup)"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    return (base * height * length) / 3"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n / b)\n    if b == 0:\n        return (n / a, 0)\n    if n == 0:\n        return (0, 0)\n    if a * b < 0:\n        return None\n    if abs(a) > abs(n):\n        return None\n    if abs(b) > abs(n):\n        return None\n    x = (n - b) // a\n    if x * a + b != n:\n        return None\n    return (x, (n - x * a) // b)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "completion": "def divisors(n):\n    divs = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef are_equivalent(a, b):\n    return sum(divisors(a)) == sum(divisors(b))"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == alphabet[i].lower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
