{"task_id": "Mbpp/301", "completion": "\n    ```python\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        max_depth = 0\n        for value in d.values():\n            max_depth = max(max_depth, dict_depth(value))\n        return 1 + max_depth\n```\n\nThe `dict_depth` function takes a dictionary `d` as input and returns the depth of the dictionary. It first checks if the input is not a dictionary, in which case it returns 0. Otherwise, it iterates through the values of the dictionary and recursively calculates the depth of each value, keeping track of the maximum depth encountered. Finally, it returns the depth of the input dictionary plus 1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the depth of a dictionary. Your code should satisfy the following assertion:\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\n    ### Response:\n    ```python\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        max_depth = 0\n        for value in d.values():\n            max_depth = max(max_depth, dict_depth(value))\n        return 1 + max_depth\n```\n\nThe `dict_depth` function takes a dictionary `d` as input and returns the depth of the dictionary. It first checks if the input is not a dictionary, in which case it returns 0. Otherwise, it iterates through the values of the dictionary and recursively calculates the depth of each value, keeping track of the maximum depth encountered. Finally, it returns the depth of the input dictionary plus 1."}
