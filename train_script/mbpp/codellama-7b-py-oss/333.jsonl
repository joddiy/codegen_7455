{"task_id": "Mbpp/733", "completion": "\n    ```python\ndef find_first_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n\nThe `find_first_occurrence` function uses binary search to find the index of the first occurrence of a given number in a sorted array. It iterates through the array, updating the search range based on the comparison of the middle element with the target number. If the middle element is equal to the target number and it's not the first occurrence, it updates the right boundary to search the left half of the array. If the middle element is less than the target number, it updates the left boundary to search the right half of the array. If the target number is not found, it returns -1.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following assertion:\n```python\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n    ### Response:\n    ```python\ndef find_first_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n\nThe `find_first_occurrence` function uses binary search to find the index of the first occurrence of a given number in a sorted array. It iterates through the array, updating the search range based on the comparison of the middle element with the target number. If the middle element is equal to the target number and it's not the first occurrence, it updates the right boundary to search the left half of the array. If the middle element is less than the target number, it updates the left boundary to search the right half of the array. If the target number is not found, it returns -1."}
