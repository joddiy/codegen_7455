{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    shared_elements = set(list1) & set(list2)\n    return shared_elements"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    import re\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(input_string):\n    return input_string.count('std')"}
{"task_id": "Mbpp/222", "completion": "def check_type(tup):\n    return len(set(type(x) for x in tup)) == 1"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(input_string):\n    result = ''\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            result += input_string[i]\n    return result"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\nassert min_of_three(10,20,0)==0"}
{"task_id": "Mbpp/229", "completion": "def re_arrange_array(arr, n):\n    left, right = 0, n - 1\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n    return arr"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/233", "completion": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Test the function\nassert math.isclose(lateralsuface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    return n | (1 << (n.bit_length() - 1))"}
{"task_id": "Mbpp/237", "completion": "def check_occurences(lst):\n    occurences = {}\n    for tup in lst:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (m - 1) * (m - 2) // 2"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "completion": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(num):\n    # Find the next perfect square greater than the given number\n    while True:\n        num += 1\n        root = int(num ** 0.5)\n        if root * root == num:\n            return num"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                max_sum = max(max_sum, sum_bitonic(arr, i, j))\n    return max_sum\n\ndef sum_bitonic(arr, i, j):\n    return arr[j] - arr[i] + 1"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    for char in str2:\n        str1 = str1.replace(char, '')\n    return str1\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "completion": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    intersection = list(set1.intersection(set2))\n    return intersection"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    result = [element]\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "completion": "import cmath\n\ndef convert(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "completion": "def combinations_colors(colors, n):\n    import itertools\n    return list(itertools.product(colors, repeat=n))"}
{"task_id": "Mbpp/256", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i][1] > tuple2[i][1]:\n            result.append(tuple1[i])\n        else:\n            result.append(tuple2[i])\n    return tuple(result)\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/260", "completion": "\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_prime_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    def newman_williams_prime(n):\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 13\n        if n == 7:\n            return 17\n        if n == 8:\n            return 19\n        if n == 9:\n            return 23\n        if n == 10:\n            return 29\n        if n == 11:\n            return 31\n        if n == 12:\n            return 37\n        if n == 13:\n            return 41\n        if n == 14:\n            return 43\n        if n == 15:\n            return 47\n        if n == 16:\n            return 53\n        if n == 17:\n            return 59\n        if n == 18:\n            return 61\n        if n == 19:\n            return 67\n        if n == 20:\n            return 71\n        if n == 21:\n            return 73\n        if n == 22:\n            return 79\n        if n == 23:\n            return 83\n        if n == 24:\n            return 89\n        if n == 25:\n            return 97\n        if n == 26:\n            return 101\n        if n == 27:\n            return 103\n        if n == 28:\n            return 107\n        if n == 29:\n            return 109\n        if n == 30:\n            return 113\n        if n == 31:\n            return 127\n        if n == 32:\n            return 131\n        if n == 33:\n            return 137\n        if n == 34:\n            return 139\n        if n == 35:\n            return 149\n        if n == 36:\n            return 151\n        if n == 37:\n            return 157\n        if n == 38:\n            return 163\n        if n == 39:\n            return 167\n        if n == 40:\n            return 173\n        if n == 41:\n            return 179\n        if n == 42:\n            return 181\n        if n == 43:\n            return 191\n        if n == 44:\n            return 193\n        if n == 45:\n            return 197\n        if n == 46:\n            return 199\n        if n == 47:\n            return 211\n        if n == 48:\n            return 223\n        if n == 49:\n            return 227\n        if n == 50:\n            return 229\n        if n == 51:\n            return 233\n        if n =="}
{"task_id": "Mbpp/261", "completion": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result_tuple = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result_tuple"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_age):\n    return human_age * 7\n\nassert dog_age(12)==61"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 6 * side_length ** 2\n\n# Test the function\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    # Initialize the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate through the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Add the square of the current odd number to the sum\n        sum_of_squares += i**2\n    \n    return sum_of_squares"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    # Define the sequence of star numbers\n    star_numbers = [1, 2, 3, 4, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]\n    \n    # Return the n'th star number\n    return star_numbers[n-1]"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(numbers):\n    even_numbers = [num for index, num in enumerate(numbers) if index % 2 == 0 and num % 2 == 0]\n    return sum(even_numbers)\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(num):\n    # Check if the number is woodball\n    if num % 3 == 0 and num % 8 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += i**5\n    return total_sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(lst):\n    return [tup[-1] for tup in lst]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    ans = 0\n    for i in range(0, n+1, 2):\n        ans += binomial_Coeff(n, i)\n    return ans\n\ndef binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    else:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "Mbpp/276", "completion": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {key: value for key, value in d.items() if value >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if not isinstance(element, tuple):\n            count += 1\n        else:\n            count += len(element)\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return n * (2 * n - 1)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/56", "completion": "def check(num):\n    num_str = str(num)\n    num_reverse = int(num_str[::-1])\n    return num == num_reverse - 2"}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    assert len(list1) == len(list2), \"Lists must be of equal length\"\n    return [list1[i] - list2[i] for i in range(len(list1))]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    num_str = str(n)\n    for digit in num_str:\n        count = num_str.count(digit)\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(text):\n    return (text.count('a') == 1) and (text.count('b') in [2, 3])"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k, m):\n    n = len(arr)\n    modified_arr = [0] * (n * k)\n    for i in range(n):\n        modified_arr[i * k] = arr[i]\n    max_sum = float('-inf')\n    for i in range(n * k - m + 1):\n        current_sum = 0\n        for j in range(i, i + m):\n            current_sum += modified_arr[j]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst):\n    max_length = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_length, max_list\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "completion": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "completion": "import math\n\ndef otherside_rightangle(a,b):\n    c = math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.pi/2))\n    return c\n\n# Test the function\nassert otherside_rightangle(7,8)==10.63014581273465"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    max_val = float('-inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if item > max_val:\n                max_val = item\n    return max_val"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    max_num = 0\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            for k in range(len(digits)):\n                num = int(str(digits[i]) + str(digits[j]) + str(digits[k]))\n                max_num = max(max_num, num)\n    return max_num"}
{"task_id": "Mbpp/295", "completion": "def sum_div(n):\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)\n\n# Test the function\nassert sum_div(8) == 7"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    def merge_and_count_inv(arr, left, mid, right):\n        inv_count = 0\n        L = arr[left:mid+1]\n        R = arr[mid+1:right+1]\n        i, j, k = 0, 0, left\n        while i < len(L) and j < len(R):\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n                inv_count += (mid + 1) - (left + i)\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n        return inv_count\n\n    def merge_sort_and_count_inv(arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count_inv(arr, left, mid)\n            inv_count += merge_sort_and_count_inv(arr, mid + 1, right)\n            inv_count += merge_and_count_inv(arr, left, mid, right)\n        return inv_count\n\n    return merge_sort_and_count_inv(arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(tuples):\n    max_name = ''\n    max_value = 0\n    aggregate = 0\n    name_dict = {}\n    \n    for name, value in tuples:\n        if name in name_dict:\n            name_dict[name] += value\n        else:\n            name_dict[name] = value\n    \n    for name, value in name_dict.items():\n        if value > max_value:\n            max_value = value\n            max_name = name\n    \n    return (max_name, max_value)"}
{"task_id": "Mbpp/300", "completion": "import math\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        if len(binary_str) == n:\n            if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\n                count += 1\n    return count"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        max_depth = 0\n        for value in d.values():\n            max_depth = max(max_depth, dict_depth(value))\n        return 1 + max_depth"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            words = word.split()\n            return words[0], words[1]\n    return None"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, i, k, x):\n    if i == k:\n        return arr[i]\n    elif i > k:\n        return max(max_sum_increasing_subseq(arr, i - 1, k, x), max_sum_increasing_subseq(arr, i - 1, k - 1, x - 1))\n    else:\n        return max_sum_increasing_subseq(arr, i - 1, k, x)\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, num):\n    products = []\n    for i in range(num):\n        factor1 = list1[i]\n        factor2 = list2[i]\n        product = factor1 * factor2\n        products.append(product)\n    products.sort(reverse=True)\n    return products"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    return max(a, b)"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    return n | (1 << (n.bit_length()))"}
{"task_id": "Mbpp/312", "completion": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 2, 1\n        for _ in range(2, n + 1):\n            prev, curr = curr, prev + curr\n        return curr"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, format_string):\n    return [format_string.format(x) for x in lst]\n\n# Test the function\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(student_ids, student_names, student_scores):\n    result = []\n    for i in range(len(student_ids)):\n        temp = {student_ids[i]: {student_names[i]: student_scores[i]}}\n        result.append(temp)\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    char_index = {}\n    for index, char in enumerate(s):\n        if char in char_index:\n            char_index[char].append(index)\n        else:\n            char_index[char] = [index]\n\n    for char in char_index:\n        if len(char_index[char]) == 1:\n            return s[char_index[char][0]]\n\n    return None"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n * (2 * n - 1)\n\ndef find_nth_octagonal_number(n):\n    return is_octagonal(n)\n\n# Test the function\nassert find_nth_octagonal_number(5) == 65"}
{"task_id": "Mbpp/396", "completion": "def check_char(s):\n    if len(s) < 2:\n        return \"Invalid\"\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "completion": "def median_numbers(num1, num2, num3):\n    sorted_list = sorted([num1, num2, num3])\n    median = sorted_list[1]\n    return median\n\nassert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        num_str = str(num)\n        for digit in num_str:\n            total_sum += int(digit)\n    return total_sum\n\n# Test the function\nassert sum_of_digits([10,2,56])==14"}
{"task_id": "Mbpp/400", "completion": "def extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n\n# Test the function\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    return min(a, b)"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tup, element):\n    return element in tup\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(num):\n    return num % 2 != 0"}
{"task_id": "Mbpp/407", "completion": "def rearrange_bigger(num):\n    num_str = str(num)\n    digits = sorted(num_str, reverse=True)\n    next_bigger = int(''.join(digits))\n    return next_bigger"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    min_val = lst[0]\n    for i in lst:\n        if isinstance(i, (int, float)) and i < min_val:\n            min_val = i\n    return min_val"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(data, n):\n    return [row[n] for row in data]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    return any(elem in seq2 for elem in seq1)"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    max_product = 0\n    max_pair = ()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    max_length = 0\n    max_element = []\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    total_sum = 0\n    for num in numbers:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    return total_sum * len(numbers)\n\n# Test the function with the provided assertion\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(elem) for elem in tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total / (n ** 3)"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return [elem[-1] for elem in tup]"}
{"task_id": "Mbpp/4", "completion": "import heapq\n\ndef heap_queue_largest(nums, n):\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, -num)  # Push negated num to maintain max heap\n        else:\n            if num > -max_heap[0]:  # Check if the new num is larger than the smallest in the heap\n                heapq.heappop(max_heap)  # Remove the smallest element from the heap\n                heapq.heappush(max_heap, -num)  # Push the new num to the heap\n    return [-x for x in max_heap]  # Return the negated elements as the result"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(nums):\n    return min(nums)\n\n# Test the function\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(t1[i] & t2[i] for i in range(len(t1)))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n\nassert parabola_directrix(5,3,2)==-198"}
{"task_id": "Mbpp/431", "completion": "def common_element(list1, list2):\n    return any(elem in list1 for elem in list2) or any(elem in list2 for elem in list1)"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(a, b, c):\n    return (a + b + c) / 2\n\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuples):\n    min_val = float('inf')\n    max_diff = 0\n    for a, b in tuples:\n        if a < min_val:\n            min_val = a\n        max_diff = max(max_diff, b - min_val)\n    return max_diff"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(nums):\n    return [num for num in nums if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    return ''.join(filter(lambda x: x.isalpha(), s))"}
{"task_id": "Mbpp/438", "completion": "def count_bidirectional(tuples):\n    count = 0\n    seen = set()\n    for t in tuples:\n        if t[1] in seen:\n            count += 1\n        seen.add(t[0])\n    return count"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(lst):\n    result = 0\n    for num in lst:\n        result = result * 10 + num\n    return result\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence):\n    adverbs = ['clearly', 'quickly', 'slowly', 'softly', 'hardly', 'easily', 'slowly', 'quickly', 'slowly', 'quickly']\n    for adverb in adverbs:\n        if adverb in sentence:\n            return (sentence.index(adverb), len(adverb), adverb)\n    return None"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/442", "completion": "def positive_count(arr):\n    positive_count = sum(1 for num in arr if num > 0)\n    total_count = len(arr)\n    ratio = positive_count / total_count\n    return ratio"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tuple1, tuple2):\n    result = ()\n    for i in range(len(tuple1)):\n        result += (tuple1[i] * tuple2[i],)\n    return result"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tuple_input, list_input):\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num**3 for num in nums]"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return cal_sum(n-1) + n"}
{"task_id": "Mbpp/450", "completion": "def extract_string(input_list, size):\n    return input_list[-size:]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    factors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors_sum += i\n            if i != n // i:\n                factors_sum += n // i\n    return factors_sum\n\n# Test the function\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(input_list):\n    return [s[::-1] for s in input_list]\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    min_length = len(lst[0])\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    return lst[min_index]"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    return ''.join(char.lower() if char.isupper() else char for char in s)"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/461", "completion": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the function\nassert upper_ctr('PYthon') == 1"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    else:\n        head = lst[0]\n        tail = lst[1:]\n        combs = combinations_list(tail)\n        return combs + [comb + [head] for comb in combs]\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here * x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {key: value for key, value in d.items() if value is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    max_ending_here = max_so_far = arr[0]\n    \n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    result = ()\n    for i in range(len(tup) - 1):\n        result += (tup[i] + tup[i + 1],)\n    return result"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test the function\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) == 9"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    consecutive_count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] + 1:\n            consecutive_count += 1\n        else:\n            consecutive_count = 1\n        if consecutive_count == 3:\n            return True\n    return False"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = set(tuple_list1)\n    set2 = set(tuple_list2)\n    intersection = set1.intersection(set2)\n    return intersection\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/66", "completion": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/474", "completion": "def replace_char(input_string, char_to_replace, replacement_char):\n    return input_string.replace(char_to_replace, replacement_char)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(counter):\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(input_str):\n    return input_str.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i == 0 or s[i].isupper() or s[i-1].isupper():\n            result += s[i]\n    return result\n\nassert remove_lowercase(\"PYTHon\") == ('PYTH')"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(num):\n    return num // 10**(len(str(num))-1)"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) & 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n - i) for i in range(1, n))\n\ndef count_partitions(n):\n    return bell_number(n)\n\nassert count_partitions(2) == 2"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    total_sum = 0\n    for i in range(max(len(num1_str), len(num2_str))):\n        digit1 = int(num1_str[i]) if i < len(num1_str) else 0\n        digit2 = int(num2_str[i]) if i < len(num2_str) else 0\n        total_sum += abs(digit1 - digit2)\n    return total_sum"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i >= k:\n            current_sum -= arr[i - k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/560", "completion": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1) | set(tuple2)\n    return tuple(sorted(union_set))\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(input_string):\n    values = []\n    start_index = 0\n    while True:\n        start_index = input_string.find('\"', start_index)\n        if start_index == -1:\n            break\n        end_index = input_string.find('\"', start_index + 1)\n        if end_index == -1:\n            break\n        values.append(input_string[start_index + 1:end_index])\n        start_index = end_index + 1\n    return values"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n# Test the function\nassert sum_digits(345) == 12"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n# Test the function\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True"}
{"task_id": "Mbpp/568", "completion": "def empty_list(N):\n    return [{}]*N"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    unique_nums = []\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_nums = list(set(lst))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"}
{"task_id": "Mbpp/574", "completion": "import math\n\ndef surfacearea_cylinder(radius, height):\n    area = 2 * math.pi * radius * (radius + height)\n    return area\n\n# Test the function with the provided assertion\nassert surfacearea_cylinder(10,5)==942.45"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(arr, sub_arr):\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial *= i\n        return int(str(factorial)[-1])"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    assert len(list1) == len(list2) == len(list3)\n    result = [None] * (len(list1) * 3)\n    result[::3] = list1\n    result[1::3] = list2\n    result[2::3] = list3\n    return result\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(tuple1, tuple2):\n    dissimilar_elements = tuple(set(tuple1) - set(tuple2)) + tuple(set(tuple2) - set(tuple1))\n    return dissimilar_elements"}
{"task_id": "Mbpp/580", "completion": "def extract_even(nested_tuple):\n    if isinstance(nested_tuple, tuple):\n        return tuple(extract_even(item) if isinstance(item, tuple) else item for item in nested_tuple if item % 2 == 0)\n    else:\n        return nested_tuple"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base, height):\n    return 2 * base * height\n\n# Test the function with the provided assertion\nassert surface_Area(3,4) == 33"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(lst, sublst):\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False\n\nassert is_sublist([2,4,3,5,7],[3,7])==False"}
{"task_id": "Mbpp/582", "completion": "def is_dict_empty(dictionary):\n    return len(dictionary) == 0\n\n# Test the function\nassert is_dict_empty({10}) == False"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    result = 0\n    for i in range(n):\n        result += catalan_number(i) * catalan_number(n - i - 1)\n    return result\n\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\n# Test the function\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    perfect_squares_list = []\n    for num in range(start, end + 1):\n        root = num ** 0.5\n        if root == int(root):\n            perfect_squares_list.append(num)\n    return perfect_squares_list"}
{"task_id": "Mbpp/590", "completion": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "completion": "def swap_List(lst):\n    if len(lst) < 2:\n        return lst\n    else:\n        return [lst[-1], *lst[1:-1], lst[0]]"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i * (i-1)\n    return s\n\n# Test the function\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    return all(len(t) == len(tuples[0]) for t in tuples)"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip_address):\n    parts = ip_address.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(numbers):\n    even_index = 0\n    odd_index = 0\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            even_index = i\n            break\n    for i in range(even_index + 1, len(numbers)):\n        if numbers[i] % 2 != 0:\n            odd_index = i\n            break\n    return numbers[odd_index] - numbers[even_index]"}
{"task_id": "Mbpp/595", "completion": "def min_Swaps(s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    s1_set = set(s1)\n    s2_set = set(s2)\n    s1_map = {c: i for i, c in enumerate(s1)}\n    s2_map = {c: i for i, c in enumerate(s2)}\n    s1_set = set(s1)\n    s2_set = set(s2)\n    s1_map = {c: i for i, c in enumerate(s1)}\n    s2_map = {c: i for i, c in enumerate(s2)}\n\n    def count_swaps(s1, s2):\n        count = 0\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                count += 1\n                if s1[i] in s2_set:\n                    s2[s2_map[s1[i]]] = s1[i]\n                else:\n                    s2[s2_map[s2[i]]] = s1[i]\n        return count\n\n    return count_swaps(s1, s2)"}
{"task_id": "Mbpp/596", "completion": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n    if m == 0:\n        return arr2[k - 1]\n    if n == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1, mid2 = m // 2, n // 2\n    pivot1, pivot2 = arr1[mid1], arr2[mid2]\n\n    if pivot1 < pivot2:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2[mid2 + 1:], k - mid1 - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2[mid2 + 1:], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2[:mid2], k - mid1 - mid2 - 1)"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    sum_of_powers = 0\n    for digit in num_str:\n        sum_of_powers += int(digit) ** num_len\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    total_sum = (n * (n + 1)) // 2\n    average = total_sum / n\n    return total_sum, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "completion": "def is_Even(num):\n    return num % 2 == 0"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludics = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            ludics.append(num)\n    return ludics"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(arr):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    n = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    index = 0\n    while not sorted:\n        swaps = 0\n        sorted = True\n        index = 0\n        while index + 1 < n:\n            if arr[index] > arr[index + 1]:\n                swap(index, index + 1)\n                swaps += 1\n            index += 1\n        if swaps == 0:\n            sorted = True\n        else:\n            n = int(n / shrink_factor)\n    return arr"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "completion": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "completion": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)"}
{"task_id": "Mbpp/607", "completion": "import re\n\ndef find_literals(input_string, pattern):\n    match = re.search(pattern, input_string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                bell[i] += bell[i - j - 1] * j\n        return bell[n]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lists):\n    merged_list = []\n    for sublist in lists:\n        merged_list.append(sublist[0])\n        merged_list.append(sublist[1])\n    return [merged_list[::2], merged_list[1::2]]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuple_list):\n    cumulative_sum = 0\n    for tup in tuple_list:\n        cumulative_sum += sum(tup)\n    return cumulative_sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tup):\n    avg_list = []\n    for t in tup:\n        avg_list.append(sum(t) / len(t))\n    return avg_list\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    diff = num1 ^ num2  # Calculate the bitwise XOR of num1 and num2\n    count_set_bits = 0  # Initialize the count of set bits\n    while diff:\n        count_set_bits += diff & 1  # Count the number of set bits in diff\n        diff >>= 1  # Right shift diff to check the next bit\n    return count_set_bits == 1  # Return True if the count is 1, False otherwise"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if i*i == n:\n            return False\n    return True"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(tup1, tup2):\n    return tuple(a % b for a, b in zip(tup1, tup2))\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]\n\n# Test the function\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = [c for c in s if c.isdigit()]\n    alphas = [c for c in s if not c.isdigit()]\n    return ''.join(alphas) + ''.join(nums)"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(numbers):\n    numbers.sort()\n    max_size = 0\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            max_size = max(max_size, i + 1)\n        else:\n            break\n    return max_size"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, k):\n    m, n = len(list1), len(list2)\n    if m > n:\n        list1, list2, m, n = list2, list1, n, m\n    total_len = m + n\n    half_len = total_len // 2\n    imin, imax, half_key = 0, m, 0\n    while imin <= imax:\n        i = (imin + imax) // 2\n        j = half_len - i\n        if i < m and list1[i] < list2[j-1]:\n            imin = i + 1\n        elif i > 0 and list1[i-1] > list2[j]:\n            imax = i - 1\n        else:\n            if i < m:\n                half_key = list1[i]\n            else:\n                half_key = list2[j]\n            break\n    if total_len % 2 == 0:\n        return (half_key + list2[j]) / 2\n    else:\n        return half_key"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num**n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "completion": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        side_length = 2 * radius * math.tan(math.pi / 6)  # Calculate the length of the side of the largest triangle\n        area = (side_length ** 2) / (4 * math.tan(math.pi / 6))  # Calculate the area of the largest triangle\n        return area\n\n# Test the function\nassert triangle_area(-1) == None"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "completion": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(patterns, colors):\n    if len(patterns) != len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != colors[i] and patterns[i] != colors[i].upper():\n            return False\n    return True"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    x, y = coord\n    coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coord:\n                coordinates.append([i, j])\n    return coordinates"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    return s.replace(' ', '_')"}
{"task_id": "Mbpp/632", "completion": "def move_zero(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    non_zero_arr = [x for x in arr if x != 0]\n    zero_arr = [0] * zero_count\n    return non_zero_arr + zero_arr"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(nums, k):\n    ans = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            ans += nums[i] ^ nums[j]\n    return ans"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(amount1, amount2):\n    return amount1 == amount2"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_velocity ** 0.16) + 0.4275 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "completion": "def remove_parenthesis(input_list):\n    result = []\n    for item in input_list:\n        start_index = item.find(\"(\")\n        end_index = item.find(\")\")\n        if start_index != -1 and end_index != -1:\n            result.append(item[:start_index] + item[end_index + 1:])\n    return result"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return int((n * (2 * n - 1)) ** 0.5)"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples, k):\n    result = []\n    for tup in tuples:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    if 'z' in text[1:-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dict_val):\n    return tup + (dict_val,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[N-1][N-1] / (N * N)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(data, minimal_height, minimal_weight):\n    filtered_data = {}\n    for student, (height, weight) in data.items():\n        if height > minimal_height and weight > minimal_weight:\n            filtered_data[student] = (height, weight)\n    return filtered_data\n\n# Test the function\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = 0\n    for _ in range(power):\n        result += sum(int(digit) for digit in str(base))\n        base *= base\n    return result"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(s):\n    result = []\n    start = 0\n    while True:\n        start = s.find('\"', start)\n        if start == -1:\n            break\n        end = s.find('\"', start + 1)\n        if end == -1:\n            break\n        result.append(s[start + 1:end])\n        start = end + 1\n    return result"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(num):\n    return num % 11 == 0"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or result[-1] != i:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/731", "completion": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            ans += prod(arr[i:j])\n    return ans\n\ndef prod(arr):\n    result = 1\n    for num in arr:\n        result *= num\n    return result\n\n# Test the function\nassert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    # Toggle the bits of the number except the first and the last bit\n    return (n & 0b1111111011111111) ^ 0b0000000100000000"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "completion": "import re\n\ndef check_str(s):\n    vowels = \"aeiou\"\n    if re.match(f\"^{vowels}\", s):\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "completion": "import math\n\ndef area_tetrahedron(side_length):\n    volume = (math.sqrt(3) / 12) * side_length ** 3\n    area = (volume * 5) / (3 * math.sqrt(2))\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    return lst[n:] + lst[:n]\n\n# Test the function with the provided assertion\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    def has_divisible_numbers(num):\n        for digit in str(num):\n            if num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if has_divisible_numbers(num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "completion": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return radius ** 2 * math.tan(math.radians(angle / 2))"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i > 0 and s[i].isupper() and s[i-1].islower():\n            result += \" \" + s[i]\n        else:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    lst.sort(key=lambda x: (int(x) if x.replace('-', '', 1).isdigit() else float('inf'), x))\n    return lst"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    def is_min_heap(arr, start, end):\n        if start >= end:\n            return True\n        root = start\n        left = 2 * root + 1\n        right = 2 * root + 2\n        if left < end and arr[root] > arr[left]:\n            return False\n        if right < end and arr[root] > arr[right]:\n            return False\n        return is_min_heap(arr, left, end) and is_min_heap(arr, right, end)\n\n    return is_min_heap(arr, 0, len(arr))"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1)**2 + jacobsthal_num(n-2)**2"}
{"task_id": "Mbpp/753", "completion": "def min_k(tuple_list, k):\n    return sorted(tuple_list, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i+1, len(str_list)):\n            if str_list[i][::-1] == str_list[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    sublists = [tuple(sublist) for sublist in lst]\n    unique_sublists = {sublist: sublists.count(sublist) for sublist in set(sublists)}\n    return unique_sublists"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    try:\n        num = float(s)\n        if num.is_integer():\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(nums):\n    return len(nums) == len(set(nums))"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n    return min_diff"}
{"task_id": "Mbpp/82", "completion": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    if n == 1:\n        return 1\n    else:\n        return n * is_polite(n - 1)\n\ndef nth_polite_number(n):\n    return is_polite(n)\n\n# Test the function\nassert nth_polite_number(7) == 11"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(numbers, sum):\n    count = 0\n    seen = set()\n    for num in numbers:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    opening_brackets = set(['(', '[', '{'])\n    closing_brackets = set([')', ']', '}'])\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    return not stack"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    result = ' '.join([word for word in words if len(word) != k])\n    return result"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    if substring in string:\n        return (substring, string.index(substring), string.index(substring) + len(substring))\n    else:\n        return None"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 1:\n            return False\n    return True"}
{"task_id": "Mbpp/83", "completion": "def get_Char(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    total = total % 26\n    return chr(total + 96) if total < 26 else chr(total - 26 + 96)"}
{"task_id": "Mbpp/777", "completion": "def find_sum(arr):\n    seen = set()\n    total = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            total += num\n    return total"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    packed_list = []\n    temp_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            temp_list.append(lst[i])\n        else:\n            if lst[i] == lst[i-1]:\n                temp_list.append(lst[i])\n            else:\n                packed_list.append(temp_list)\n                temp_list = [lst[i]]\n    packed_list.append(temp_list)\n    return packed_list"}
{"task_id": "Mbpp/780", "completion": "from itertools import combinations, chain\n\ndef find_combinations(tuple_list):\n    result = []\n    for i in range(1, len(tuple_list) + 1):\n        for comb in combinations(tuple_list, i):\n            sums = list(chain.from_iterable(comb))\n            for j in range(1, len(comb) + 1):\n                for c in combinations(comb, j):\n                    result.append(tuple(chain.from_iterable(c)))\n    return result"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i + 1 % 2 != 0:\n                odd_sum += sum(arr[i:j+1])\n    return odd_sum"}
{"task_id": "Mbpp/783", "completion": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (g - b) / df + (6 if g < b else 0)\n    elif mx == g:\n        h = (b - r) / df + 2\n    elif mx == b:\n        h = (r - g) / df + 4\n    h *= 60\n    if h < 0:\n        h += 360\n    s = 0 if mx == 0 else df / mx\n    v = mx\n    return int(h), round(s*100, 1), round(v*100, 1)"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_product *= lst[i]\n        else:\n            odd_product *= lst[i]\n    return even_product * odd_product\n\n# Test the function\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tuple_str):\n    # Remove the parentheses and split the string by comma to get a list of strings\n    tuple_str = tuple_str.strip('()').split(',')\n    \n    # Convert each string to integer and append to a new list\n    int_tuple = tuple(int(x.strip()) for x in tuple_str)\n    \n    return int_tuple"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, val):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "completion": "def text_match_three(text):\n    return \"a\" in text and \"bbb\" in text"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(list1, string):\n    return tuple(list1 + [string])"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"}
{"task_id": "Mbpp/792", "completion": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "completion": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right + 1"}
{"task_id": "Mbpp/794", "completion": "import re\n\ndef text_starta_endb(s):\n    return bool(re.match(r'a.*b$', s))\n\n# Test the function\nassert text_starta_endb(\"aabbbb\")"}
{"task_id": "Mbpp/796", "completion": "def return_sum(dictionary):\n    total_sum = 0\n    for item in dictionary.values():\n        total_sum += item\n    return total_sum"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(num, d):\n    return (num << d) | (num >> (32 - d))\n\n# Test the function\nassert left_rotate(16, 2) == 64"}
{"task_id": "Mbpp/85", "completion": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    elif num == 0 or num == 1:\n        return True\n    else:\n        start = 1\n        end = num // 2\n        while start <= end:\n            mid = start + (end - start) // 2\n            square = mid * mid\n            if square == num:\n                return True\n            elif square < num:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return False"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_sum_list = []\n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = sublist\n    return max_sum_list"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None  # If no odd number is found"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    return k in tup\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(tup1, tup2):\n    if len(tup1) != len(tup2):\n        return False  # If the tuples are not of equal length, return False\n    for i in range(len(tup1)):\n        if tup1[i] > tup2[i]:\n            return False  # If any element of tup1 is greater than its corresponding element in tup2, return False\n    return True  # If all elements are smaller, return True"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return ((2 * n - 1) ** 2) // 3"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1\n\n# Test the function\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "completion": "def len_log(lst):\n    return max(len(word) for word in lst)"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, sub):\n    for i in lst:\n        if sub in i:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    s = str(n)\n    return s == s[::-1]"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    else:\n        min_length = len(list_of_lists[0])\n        for lst in list_of_lists:\n            if len(lst) < min_length:\n                min_length = len(lst)\n        return min_length"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    squares = [num ** 2 for num in nums]\n    return squares\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "completion": "import math\n\ndef multiply_num(nums):\n    result = 1\n    for num in nums:\n        result *= num\n    return result / len(nums)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary_digits = []\n    while decimal_number > 0:\n        binary_digits.append(str(decimal_number % 2))\n        decimal_number //= 2\n    return ''.join(binary_digits[::-1])\n\n# Test the function\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "completion": "\ndef next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    if n % 10 == 0:\n        return n + 1\n    if n < 100:\n        return n + 2\n    if n < 1000:\n        return n + 11\n    if n < 10000:\n        return n + 22\n    if n < 100000:\n        return n + 111\n    if n < 1000000:\n        return n + 222\n    if n < 10000000:\n        return n + 1111\n    if n < 100000000:\n        return n + 2222\n    if n < 1000000000:\n        return n + 11111\n    if n < 10000000000:\n        return n + 22222\n    if n < 100000000000:\n        return n + 111111\n    if n < 1000000000000:\n        return n + 222222\n    if n < 10000000000000:\n        return n + 1111111\n    if n < 100000000000000:\n        return n + 2222222\n    if n < 1000000000000000:\n        return n + 11111111\n    if n < 10000000000000000:\n        return n + 22222222\n    if n < 100000000000000000:\n        return n + 111111111\n    if n < 1000000000000000000:\n        return n + 222222222\n    if n < 10000000000000000000:\n        return n + 1111111111\n    if n < 100000000000000000000:\n        return n + 2222222222\n    if n < 1000000000000000000000:\n        return n + 11111111111\n    if n < 10000000000000000000000:\n        return n + 22222222222\n    if n < 100000000000000000000000:\n        return n + 111111111111\n    if n < 1000000000000000000000000:\n        return n + 222222222222\n    if n < 10000000000000000000000000:\n        return n + 1111111111111\n    if n < 100000000000000000000000000:\n        return n + 22222222"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(s):\n    words = s.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n# Test the function\nassert snake_to_camel('python_program')=='PythonProgram'"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    # Your implementation of the function goes here\n    pass"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(1 for x in lst if x is True)"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 0\n    else:\n        for i in range(len(s)):\n            if s[i:] == s[:i]:\n                return len(s) // len(s[:i])\n        return 0"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    list1_index = 0\n    list2_index = 0\n    list3_index = 0\n\n    while list1_index < len(list1) and list2_index < len(list2) and list3_index < len(list3):\n        if list1[list1_index] < list2[list2_index] and list1[list1_index] < list3[list3_index]:\n            merged_list.append(list1[list1_index])\n            list1_index += 1\n        elif list2[list2_index] < list1[list1_index] and list2[list2_index] < list3[list3_index]:\n            merged_list.append(list2[list2_index])\n            list2_index += 1\n        else:\n            merged_list.append(list3[list3_index])\n            list3_index += 1\n\n    while list1_index < len(list1):\n        merged_list.append(list1[list1_index])\n        list1_index += 1\n\n    while list2_index < len(list2):\n        merged_list.append(list2[list2_index])\n        list2_index += 1\n\n    while list3_index < len(list3):\n        merged_list.append(list3[list3_index])\n        list3_index += 1\n\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(binary_string, rotations):\n    binary_string = binary_string[rotations:] + binary_string[:rotations]\n    odd_count = sum(int(bit) for bit in binary_string)\n    return odd_count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "completion": "def empty_dit(list_of_dicts):\n    return all(not d for d in list_of_dicts)"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    result = 0\n    for num in tup:\n        result = result * 10 + num\n    return result\n\n# Test the function\nassert tuple_to_int((1,2,3))==123"}
{"task_id": "Mbpp/117", "completion": "def list_to_float(lst):\n    result = []\n    for sublist in lst:\n        subresult = []\n        for item in sublist:\n            try:\n                subresult.append(float(item))\n            except ValueError:\n                subresult.append(item)\n        result.append(tuple(subresult))\n    return result"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] if arr[0] == arr[1] else arr[0]\n\n    mid = len(arr) // 2\n    if mid > 0 and arr[mid] == arr[mid - 1]:\n        return search(arr[:mid])\n    else:\n        return search(arr[mid:])"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(s, c):\n    first = s.find(c)\n    last = s.rfind(c)\n    if first != -1 and last != -1:\n        return s[:first] + s[first+1:last] + s[last+1:]\n    else:\n        return s"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "completion": "def sum_divisors(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(n):\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        if sum_divisors(i) == i and sum_divisors(sum_divisors(i)) == i:\n            amicable_sum += i\n    return amicable_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "completion": "import math\n\ndef angle_complex(a, b):\n    return math.atan2(b.imag, b.real)\n\n# Test the function\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "def find_length(s):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for c in s:\n        if c == '0':\n            count_0 += 1\n        elif c == '1':\n            count_1 += 1\n            max_diff = max(max_diff, count_0)\n    return max_diff"}
{"task_id": "Mbpp/126", "completion": "def sum_of_common_divisors(num1, num2):\n    divisors_num1 = [i for i in range(1, num1 + 1) if num1 % i == 0]\n    divisors_num2 = [i for i in range(1, num2 + 1) if num2 % i == 0]\n    common_divisors = list(set(divisors_num1) & set(divisors_num2))\n    return sum(common_divisors)\n\nassert sum_of_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    n = len(matrix)\n    s = sum(range(1, n**2 + 1))  # Sum of all numbers from 1 to n^2\n\n    # Check if the sum of each row, column, and diagonal is the same\n    for i in range(n):\n        if sum(matrix[i]) != s or sum(matrix[j][i] for j in range(n)) != s:\n            return False\n\n    if sum(matrix[i][i] for i in range(n)) != s or sum(matrix[i][n-1-i] for i in range(n)) != s:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(arr):\n    frequency = {}\n    max_freq = 0\n    max_item = None\n    \n    for item in arr:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n        \n        if frequency[item] > max_freq:\n            max_freq = frequency[item]\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n# Test the function with the provided assertion\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Create a dictionary to store the row index and its sum\n    row_sum_dict = {i: row_sums[i] for i in range(len(row_sums))}\n    \n    # Sort the row indices based on their sums\n    sorted_indices = sorted(row_sum_dict, key=lambda k: row_sum_dict[k])\n    \n    # Sort the matrix based on the sorted row indices\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "completion": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / (zero_count + non_zero_count)"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0 or n == 1:\n        return True\n    if n % 2 == 1:\n        return False\n    n = n // 2\n    return is_Sum_Of_Powers_Of_Two(n)"}
{"task_id": "Mbpp/139", "completion": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        max_index = i\n        for j in range(0, i):\n            if arr[j] > arr[max_index]:\n                max_index = j\n        if max_index != i:\n            arr = arr[:max_index+1] + list(reversed(arr[:max_index+1])) + arr[max_index+1:]\n    return arr"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "completion": "def find_lists(tup):\n    return len(tup)\n\n# Test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(length, width, height):\n    return length * width * height / 3\n\n# Test the function\nassert find_Volume(10,8,6) == 240"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    if a == 0:\n        return (0, n)\n    x, y = find_solution(b % a, a, n)\n    return x, y - (b // a) * x\n\ndef find_solution_naive(a, b, n):\n    for x in range(n + 1):\n        y = n * a - b * x\n        if y >= 0 and y % b == 0:\n            return x, y // b\n    return None\n\n# Test the function\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum"}
{"task_id": "Mbpp/164", "completion": "def divisors_sum(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef are_equivalent(a, b):\n    return divisors_sum(a) == divisors_sum(b)"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == chr(97 + i % 26).lower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(numbers, start, end):\n    return sum(numbers[start:end+1])\n\n# Test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
