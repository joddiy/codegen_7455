{"task_id": "Mbpp/605", "completion": "\n    ```python\ndef prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```\nThe `prime_num` function takes an integer `num` as input and checks if it is a prime number. It first handles the case when `num` is less than 2, returning `False` in such cases. Then, it iterates through the range from 2 to the square root of `num` and checks if `num` is divisible by any of these numbers. If it finds a divisor, it returns `False`, indicating that the number is not prime. If no divisors are found, it returns `True`, indicating that the number is prime.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to check if the given integer is a prime number. Your code should satisfy the following assertion:\n```python\nassert prime_num(13)==True\n```\n\n    ### Response:\n    ```python\ndef prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```\nThe `prime_num` function takes an integer `num` as input and checks if it is a prime number. It first handles the case when `num` is less than 2, returning `False` in such cases. Then, it iterates through the range from 2 to the square root of `num` and checks if `num` is divisible by any of these numbers. If it finds a divisor, it returns `False`, indicating that the number is not prime. If no divisors are found, it returns `True`, indicating that the number is prime."}
