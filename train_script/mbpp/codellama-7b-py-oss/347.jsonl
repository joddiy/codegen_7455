{"task_id": "Mbpp/749", "completion": "\n    ```python\ndef sort_numeric_strings(lst):\n    lst.sort(key=lambda x: (int(x) if x.replace('-', '', 1).isdigit() else float('inf'), x))\n    return lst\n```\n\nThe `sort_numeric_strings` function takes a list of strings as input and sorts them numerically. It uses the `sort` method with a custom key function that converts each string to an integer if possible, and otherwise to `float('inf')` to ensure that non-numeric strings are sorted last. The sorted list is then returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/. Your code should satisfy the following assertion:\n```python\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n```\n\n    ### Response:\n    ```python\ndef sort_numeric_strings(lst):\n    lst.sort(key=lambda x: (int(x) if x.replace('-', '', 1).isdigit() else float('inf'), x))\n    return lst\n```\n\nThe `sort_numeric_strings` function takes a list of strings as input and sorts them numerically. It uses the `sort` method with a custom key function that converts each string to an integer if possible, and otherwise to `float('inf')` to ensure that non-numeric strings are sorted last. The sorted list is then returned."}
