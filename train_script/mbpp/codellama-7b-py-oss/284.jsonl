{"task_id": "Mbpp/597", "completion": "\n    ```python\ndef find_kth(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n    if m == 0:\n        return arr2[k - 1]\n    if n == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1, mid2 = m // 2, n // 2\n    pivot1, pivot2 = arr1[mid1], arr2[mid2]\n\n    if pivot1 < pivot2:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2[mid2 + 1:], k - mid1 - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2[mid2 + 1:], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2[:mid2], k - mid1 - mid2 - 1)\n```\n\nThe solution uses a recursive approach to find the kth element from the given two sorted arrays. It efficiently handles the case where the arrays are not of equal length and returns the kth element in O(log(m + n)) time complexity.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find kth element from the given two sorted arrays. Your code should satisfy the following assertion:\n```python\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n```\n\n    ### Response:\n    ```python\ndef find_kth(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n    if m == 0:\n        return arr2[k - 1]\n    if n == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1, mid2 = m // 2, n // 2\n    pivot1, pivot2 = arr1[mid1], arr2[mid2]\n\n    if pivot1 < pivot2:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2[mid2 + 1:], k - mid1 - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2[mid2 + 1:], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2[:mid2], k - mid1 - mid2 - 1)\n```\n\nThe solution uses a recursive approach to find the kth element from the given two sorted arrays. It efficiently handles the case where the arrays are not of equal length and returns the kth element in O(log(m + n)) time complexity."}
