{"task_id": "Mbpp/247", "completion": "\n    ```python\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n```\n\nThe `lps` function uses dynamic programming to find the length of the longest palindromic subsequence in the given string. It initializes a 2D array `dp` to store the lengths of the longest palindromic subsequence ending at each index. It then iterates through the string to fill in the `dp` array based on the lengths of palindromic substrings ending at each index. Finally, it returns the length of the longest palindromic subsequence in the given string.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the length of the longest palindromic subsequence in the given string. Your code should satisfy the following assertion:\n```python\nassert lps(\"TENS FOR TENS\") == 5\n```\n\n    ### Response:\n    ```python\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n```\n\nThe `lps` function uses dynamic programming to find the length of the longest palindromic subsequence in the given string. It initializes a 2D array `dp` to store the lengths of the longest palindromic subsequence ending at each index. It then iterates through the string to fill in the `dp` array based on the lengths of palindromic substrings ending at each index. Finally, it returns the length of the longest palindromic subsequence in the given string."}
