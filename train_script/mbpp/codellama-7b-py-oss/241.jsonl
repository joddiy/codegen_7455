{"task_id": "Mbpp/475", "completion": "\n    ```python\ndef sort_counter(counter):\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter\n```\n\nThe `sort_counter` function takes a dictionary `counter` as input and uses the `sorted` function to sort the dictionary items based on the value in descending order. The `key` parameter of the `sorted` function specifies the sorting criterion, in this case, the value of the dictionary items. The `reverse=True` parameter ensures that the sorting is in descending order. The sorted dictionary items are then returned as a list of tuples.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a dictionary by value. Your code should satisfy the following assertion:\n```python\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\n    ### Response:\n    ```python\ndef sort_counter(counter):\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter\n```\n\nThe `sort_counter` function takes a dictionary `counter` as input and uses the `sorted` function to sort the dictionary items based on the value in descending order. The `key` parameter of the `sorted` function specifies the sorting criterion, in this case, the value of the dictionary items. The `reverse=True` parameter ensures that the sorting is in descending order. The sorted dictionary items are then returned as a list of tuples."}
