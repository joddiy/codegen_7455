{"task_id": "Mbpp/12", "completion": "\n    ```python\ndef sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Create a dictionary to store the row index and its sum\n    row_sum_dict = {i: row_sums[i] for i in range(len(row_sums))}\n    \n    # Sort the row indices based on their sums\n    sorted_indices = sorted(row_sum_dict, key=lambda k: row_sum_dict[k])\n    \n    # Sort the matrix based on the sorted row indices\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    \n    return sorted_matrix\n```\n\nThe `sort_matrix` function first calculates the sum of each row in the input matrix. Then, it creates a dictionary to store the row index and its sum. After sorting the row indices based on their sums, it sorts the matrix based on the sorted row indices and returns the sorted matrix. This solution satisfies the given assertion and correctly sorts the matrix according to the sum of its rows.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy the following assertion:\n```python\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n    ### Response:\n    ```python\ndef sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Create a dictionary to store the row index and its sum\n    row_sum_dict = {i: row_sums[i] for i in range(len(row_sums))}\n    \n    # Sort the row indices based on their sums\n    sorted_indices = sorted(row_sum_dict, key=lambda k: row_sum_dict[k])\n    \n    # Sort the matrix based on the sorted row indices\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    \n    return sorted_matrix\n```\n\nThe `sort_matrix` function first calculates the sum of each row in the input matrix. Then, it creates a dictionary to store the row index and its sum. After sorting the row indices based on their sums, it sorts the matrix based on the sorted row indices and returns the sorted matrix. This solution satisfies the given assertion and correctly sorts the matrix according to the sum of its rows."}
