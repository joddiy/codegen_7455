{"task_id": "Mbpp/622", "completion": "\n    ```python\ndef get_median(list1, list2, k):\n    m, n = len(list1), len(list2)\n    if m > n:\n        list1, list2, m, n = list2, list1, n, m\n    total_len = m + n\n    half_len = total_len // 2\n    imin, imax, half_key = 0, m, 0\n    while imin <= imax:\n        i = (imin + imax) // 2\n        j = half_len - i\n        if i < m and list1[i] < list2[j-1]:\n            imin = i + 1\n        elif i > 0 and list1[i-1] > list2[j]:\n            imax = i - 1\n        else:\n            if i < m:\n                half_key = list1[i]\n            else:\n                half_key = list2[j]\n            break\n    if total_len % 2 == 0:\n        return (half_key + list2[j]) / 2\n    else:\n        return half_key\n```\n\nThe `get_median` function takes two sorted lists `list1` and `list2` and their lengths `m` and `n` as input. It then iterates through the lists to find the median value. The function returns the median value as a float.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the median of two sorted lists of same size. Your code should satisfy the following assertion:\n```python\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\n    ### Response:\n    ```python\ndef get_median(list1, list2, k):\n    m, n = len(list1), len(list2)\n    if m > n:\n        list1, list2, m, n = list2, list1, n, m\n    total_len = m + n\n    half_len = total_len // 2\n    imin, imax, half_key = 0, m, 0\n    while imin <= imax:\n        i = (imin + imax) // 2\n        j = half_len - i\n        if i < m and list1[i] < list2[j-1]:\n            imin = i + 1\n        elif i > 0 and list1[i-1] > list2[j]:\n            imax = i - 1\n        else:\n            if i < m:\n                half_key = list1[i]\n            else:\n                half_key = list2[j]\n            break\n    if total_len % 2 == 0:\n        return (half_key + list2[j]) / 2\n    else:\n        return half_key\n```\n\nThe `get_median` function takes two sorted lists `list1` and `list2` and their lengths `m` and `n` as input. It then iterates through the lists to find the median value. The function returns the median value as a float."}
