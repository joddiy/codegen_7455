{"task_id": "Mbpp/395", "completion": "\n    ```python\ndef first_non_repeating_character(s):\n    char_index = {}\n    for index, char in enumerate(s):\n        if char in char_index:\n            char_index[char].append(index)\n        else:\n            char_index[char] = [index]\n\n    for char in char_index:\n        if len(char_index[char]) == 1:\n            return s[char_index[char][0]]\n\n    return None\n```\n\nThe `first_non_repeating_character` function initializes a dictionary `char_index` to store the index of each character in the input string `s`. It then iterates through the string, updating the index of each character in the dictionary. After that, it iterates through the dictionary to find the first non-repeated character and returns its index. If no non-repeated character is found, it returns `None`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the first non-repeated character in a given string. Your code should satisfy the following assertion:\n```python\nassert first_non_repeating_character(\"abcabc\") == None\n```\n\n    ### Response:\n    ```python\ndef first_non_repeating_character(s):\n    char_index = {}\n    for index, char in enumerate(s):\n        if char in char_index:\n            char_index[char].append(index)\n        else:\n            char_index[char] = [index]\n\n    for char in char_index:\n        if len(char_index[char]) == 1:\n            return s[char_index[char][0]]\n\n    return None\n```\n\nThe `first_non_repeating_character` function initializes a dictionary `char_index` to store the index of each character in the input string `s`. It then iterates through the string, updating the index of each character in the dictionary. After that, it iterates through the dictionary to find the first non-repeated character and returns its index. If no non-repeated character is found, it returns `None`."}
