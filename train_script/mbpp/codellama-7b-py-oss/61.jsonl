{"task_id": "Mbpp/108", "completion": "\n    ```python\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    list1_index = 0\n    list2_index = 0\n    list3_index = 0\n\n    while list1_index < len(list1) and list2_index < len(list2) and list3_index < len(list3):\n        if list1[list1_index] < list2[list2_index] and list1[list1_index] < list3[list3_index]:\n            merged_list.append(list1[list1_index])\n            list1_index += 1\n        elif list2[list2_index] < list1[list1_index] and list2[list2_index] < list3[list3_index]:\n            merged_list.append(list2[list2_index])\n            list2_index += 1\n        else:\n            merged_list.append(list3[list3_index])\n            list3_index += 1\n\n    while list1_index < len(list1):\n        merged_list.append(list1[list1_index])\n        list1_index += 1\n\n    while list2_index < len(list2):\n        merged_list.append(list2[list2_index])\n        list2_index += 1\n\n    while list3_index < len(list3):\n        merged_list.append(list3[list3_index])\n        list3_index += 1\n\n    return merged_list\n```\n\nThe `merge_sorted_list` function takes three lists as input and merges them into a single sorted list. It iterates through the input lists, comparing elements and adding the smallest one to the merged list. Finally, it appends any remaining elements from the input lists to the merged list. The function returns the merged and sorted list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to merge three lists into a single sorted list. Your code should satisfy the following assertion:\n```python\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n```\n\n    ### Response:\n    ```python\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    list1_index = 0\n    list2_index = 0\n    list3_index = 0\n\n    while list1_index < len(list1) and list2_index < len(list2) and list3_index < len(list3):\n        if list1[list1_index] < list2[list2_index] and list1[list1_index] < list3[list3_index]:\n            merged_list.append(list1[list1_index])\n            list1_index += 1\n        elif list2[list2_index] < list1[list1_index] and list2[list2_index] < list3[list3_index]:\n            merged_list.append(list2[list2_index])\n            list2_index += 1\n        else:\n            merged_list.append(list3[list3_index])\n            list3_index += 1\n\n    while list1_index < len(list1):\n        merged_list.append(list1[list1_index])\n        list1_index += 1\n\n    while list2_index < len(list2):\n        merged_list.append(list2[list2_index])\n        list2_index += 1\n\n    while list3_index < len(list3):\n        merged_list.append(list3[list3_index])\n        list3_index += 1\n\n    return merged_list\n```\n\nThe `merge_sorted_list` function takes three lists as input and merges them into a single sorted list. It iterates through the input lists, comparing elements and adding the smallest one to the merged list. Finally, it appends any remaining elements from the input lists to the merged list. The function returns the merged and sorted list."}
