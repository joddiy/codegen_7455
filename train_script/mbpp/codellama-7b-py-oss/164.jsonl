{"task_id": "Mbpp/300", "completion": "\n    ```python\nimport math\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        if len(binary_str) == n:\n            if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\n                count += 1\n    return count\n```\n\nThe `count_binary_seq` function iterates through all binary sequences of length 2n and checks if the sum of the first n bits is equal to the sum of the last n bits. It then increments the count for each sequence that satisfies the condition. Finally, it returns the total count of such sequences. The provided assertion ensures that the function returns the correct result for the given input.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should satisfy the following assertion:\n```python\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\n    ### Response:\n    ```python\nimport math\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        if len(binary_str) == n:\n            if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\n                count += 1\n    return count\n```\n\nThe `count_binary_seq` function iterates through all binary sequences of length 2n and checks if the sum of the first n bits is equal to the sum of the last n bits. It then increments the count for each sequence that satisfies the condition. Finally, it returns the total count of such sequences. The provided assertion ensures that the function returns the correct result for the given input."}
