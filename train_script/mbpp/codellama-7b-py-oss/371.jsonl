{"task_id": "Mbpp/778", "completion": "\n    ```python\ndef pack_consecutive_duplicates(lst):\n    packed_list = []\n    temp_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            temp_list.append(lst[i])\n        else:\n            if lst[i] == lst[i-1]:\n                temp_list.append(lst[i])\n            else:\n                packed_list.append(temp_list)\n                temp_list = [lst[i]]\n    packed_list.append(temp_list)\n    return packed_list\n```\n\nThe `pack_consecutive_duplicates` function iterates through the input list `lst` and packs consecutive duplicates into sublists. It initializes an empty `packed_list` and a temporary list `temp_list` to store the current consecutive duplicates. It then iterates through the input list, comparing each element with the previous one. If the current element is the same as the previous one, it appends the current element to the `temp_list`. If the current element is different, it appends the `temp_list` to the `packed_list` and resets the `temp_list` to store the current consecutive duplicates. Finally, it appends the remaining `temp_list` to the `packed_list` and returns the packed list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following assertion:\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n    ### Response:\n    ```python\ndef pack_consecutive_duplicates(lst):\n    packed_list = []\n    temp_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            temp_list.append(lst[i])\n        else:\n            if lst[i] == lst[i-1]:\n                temp_list.append(lst[i])\n            else:\n                packed_list.append(temp_list)\n                temp_list = [lst[i]]\n    packed_list.append(temp_list)\n    return packed_list\n```\n\nThe `pack_consecutive_duplicates` function iterates through the input list `lst` and packs consecutive duplicates into sublists. It initializes an empty `packed_list` and a temporary list `temp_list` to store the current consecutive duplicates. It then iterates through the input list, comparing each element with the previous one. If the current element is the same as the previous one, it appends the current element to the `temp_list`. If the current element is different, it appends the `temp_list` to the `packed_list` and resets the `temp_list` to store the current consecutive duplicates. Finally, it appends the remaining `temp_list` to the `packed_list` and returns the packed list."}
