{"task_id": "Mbpp/566", "completion": "\n    ```python\ndef sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n# Test the function\nassert sum_digits(345) == 12\n```\n\nThe `sum_digits` function takes a non-negative integer `n` as input and returns the sum of its digits. It first checks if `n` is 0, in which case it returns 0. Otherwise, it calculates the sum of the last digit of `n` and the sum of the digits of `n` without the last digit by recursively calling `sum_digits` and adding the last digit to the result. The provided assertion ensures that the function behaves as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to get the sum of the digits of a non-negative integer. Your code should satisfy the following assertion:\n```python\nassert sum_digits(345)==12\n```\n\n    ### Response:\n    ```python\ndef sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n# Test the function\nassert sum_digits(345) == 12\n```\n\nThe `sum_digits` function takes a non-negative integer `n` as input and returns the sum of its digits. It first checks if `n` is 0, in which case it returns 0. Otherwise, it calculates the sum of the last digit of `n` and the sum of the digits of `n` without the last digit by recursively calling `sum_digits` and adding the last digit to the result. The provided assertion ensures that the function behaves as expected."}
