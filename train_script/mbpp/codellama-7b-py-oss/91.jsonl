{"task_id": "Mbpp/160", "completion": "\n    ```python\ndef find_solution(a, b, n):\n    if a == 0:\n        return (0, n)\n    x, y = find_solution(b % a, a, n)\n    return x, y - (b // a) * x\n\ndef find_solution_naive(a, b, n):\n    for x in range(n + 1):\n        y = n * a - b * x\n        if y >= 0 and y % b == 0:\n            return x, y // b\n    return None\n\n# Test the function\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\nThe `find_solution` function uses a recursive approach to find the solution to the equation ax + by = n. The `find_solution_naive` function provides a naive approach to finding the solution, but it is not as efficient as the recursive approach.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. Your code should satisfy the following assertion:\n```python\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\n    ### Response:\n    ```python\ndef find_solution(a, b, n):\n    if a == 0:\n        return (0, n)\n    x, y = find_solution(b % a, a, n)\n    return x, y - (b // a) * x\n\ndef find_solution_naive(a, b, n):\n    for x in range(n + 1):\n        y = n * a - b * x\n        if y >= 0 and y % b == 0:\n            return x, y // b\n    return None\n\n# Test the function\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\nThe `find_solution` function uses a recursive approach to find the solution to the equation ax + by = n. The `find_solution_naive` function provides a naive approach to finding the solution, but it is not as efficient as the recursive approach."}
