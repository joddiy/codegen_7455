{"task_id": "Mbpp/99", "completion": "\n ```python\ndef decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary_digits = []\n    while decimal_number > 0:\n        binary_digits.append(str(decimal_number % 2))\n        decimal_number //= 2\n    return ''.join(binary_digits[::-1])\n\n# Test the function\nassert decimal_to_binary(8) == '1000'\n```\n\nThe `decimal_to_binary` function takes a decimal number as input and returns its binary representation as a string with no leading zeros. It iteratively divides the decimal number by 2 and appends the remainder to the binary representation. Finally, it returns the joined binary digits as the result. The provided assertion ensures that the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros. Your code should satisfy the following assertion:\n```python\nassert decimal_to_binary(8) == '1000'\n```\n\n    ### Response:\n ```python\ndef decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary_digits = []\n    while decimal_number > 0:\n        binary_digits.append(str(decimal_number % 2))\n        decimal_number //= 2\n    return ''.join(binary_digits[::-1])\n\n# Test the function\nassert decimal_to_binary(8) == '1000'\n```\n\nThe `decimal_to_binary` function takes a decimal number as input and returns its binary representation as a string with no leading zeros. It iteratively divides the decimal number by 2 and appends the remainder to the binary representation. Finally, it returns the joined binary digits as the result. The provided assertion ensures that the function works as expected."}
