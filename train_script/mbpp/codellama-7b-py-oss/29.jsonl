{"task_id": "Mbpp/71", "completion": "\n    ```python\ndef comb_sort(arr):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    n = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    index = 0\n    while not sorted:\n        swaps = 0\n        sorted = True\n        index = 0\n        while index + 1 < n:\n            if arr[index] > arr[index + 1]:\n                swap(index, index + 1)\n                swaps += 1\n            index += 1\n        if swaps == 0:\n            sorted = True\n        else:\n            n = int(n / shrink_factor)\n    return arr\n```\n\nThe `comb_sort` function first defines a helper function `swap` to exchange elements in the array. It then initializes variables and enters a while loop to perform the sorting process. Inside the loop, it compares adjacent elements and swaps them if they are in the wrong order. After each pass, it updates the `shrink_factor` and checks if any swaps occurred. If no swaps occurred, the sorting process is considered complete, and the function returns the sorted array.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n    ### Response:\n    ```python\ndef comb_sort(arr):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    n = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    index = 0\n    while not sorted:\n        swaps = 0\n        sorted = True\n        index = 0\n        while index + 1 < n:\n            if arr[index] > arr[index + 1]:\n                swap(index, index + 1)\n                swaps += 1\n            index += 1\n        if swaps == 0:\n            sorted = True\n        else:\n            n = int(n / shrink_factor)\n    return arr\n```\n\nThe `comb_sort` function first defines a helper function `swap` to exchange elements in the array. It then initializes variables and enters a while loop to perform the sorting process. Inside the loop, it compares adjacent elements and swaps them if they are in the wrong order. After each pass, it updates the `shrink_factor` and checks if any swaps occurred. If no swaps occurred, the sorting process is considered complete, and the function returns the sorted array."}
