{"task_id": "Mbpp/229", "completion": "\n    ```python\ndef re_arrange_array(arr, n):\n    left, right = 0, n - 1\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n    return arr\n```\n\nThe `re_arrange_array` function takes an array `arr` and an integer `n` as input. It uses two pointers, `left` and `right`, to traverse the array and re-arrange the first `n` elements. If a negative element is found on the left side, it is swapped with the corresponding positive element on the right side. This process continues until the left pointer reaches the right pointer. The function then returns the re-arranged array. The provided assertion ensures that the function correctly re-arranges the array as specified.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. Your code should satisfy the following assertion:\n```python\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n```\n\n    ### Response:\n    ```python\ndef re_arrange_array(arr, n):\n    left, right = 0, n - 1\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n    return arr\n```\n\nThe `re_arrange_array` function takes an array `arr` and an integer `n` as input. It uses two pointers, `left` and `right`, to traverse the array and re-arrange the first `n` elements. If a negative element is found on the left side, it is swapped with the corresponding positive element on the right side. This process continues until the left pointer reaches the right pointer. The function then returns the re-arranged array. The provided assertion ensures that the function correctly re-arranges the array as specified."}
