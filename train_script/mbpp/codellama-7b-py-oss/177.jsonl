{"task_id": "Mbpp/392", "completion": "\n    ```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106\n```\n\nThe `get_max_sum` function recursively calculates the maximum sum possible by using the given equation. It first checks if the input `n` is less than or equal to 1, in which case it returns `n`. Otherwise, it calculates the maximum sum by comparing the sum obtained from the equation with the value of `n` and returns the maximum sum. The provided assertion ensures that the function returns the correct result for the given input.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should satisfy the following assertion:\n```python\nassert get_max_sum(60) == 106\n```\n\n    ### Response:\n    ```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106\n```\n\nThe `get_max_sum` function recursively calculates the maximum sum possible by using the given equation. It first checks if the input `n` is less than or equal to 1, in which case it returns `n`. Otherwise, it calculates the maximum sum by comparing the sum obtained from the equation with the value of `n` and returns the maximum sum. The provided assertion ensures that the function returns the correct result for the given input."}
