{"task_id": "Mbpp/119", "completion": "\n    ```python\ndef search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] if arr[0] == arr[1] else arr[0]\n\n    mid = len(arr) // 2\n    if mid > 0 and arr[mid] == arr[mid - 1]:\n        return search(arr[:mid])\n    else:\n        return search(arr[mid:])\n```\n\nThe `search` function takes a sorted array as input and recursively finds the element that appears only once in the array. It uses the concept of binary search to efficiently find the element. If the array has only one element, it returns that element. If the array has two elements and they are equal, it returns the second element. Otherwise, it recursively calls the function on the left or right half of the array based on the comparison with the middle element. If the middle element is equal to the previous element, it recursively calls the function on the right half of the array. Otherwise, it recursively calls the function on the left half of the array. This process continues until the element that appears only once is found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n    ### Response:\n    ```python\ndef search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] if arr[0] == arr[1] else arr[0]\n\n    mid = len(arr) // 2\n    if mid > 0 and arr[mid] == arr[mid - 1]:\n        return search(arr[:mid])\n    else:\n        return search(arr[mid:])\n```\n\nThe `search` function takes a sorted array as input and recursively finds the element that appears only once in the array. It uses the concept of binary search to efficiently find the element. If the array has only one element, it returns that element. If the array has two elements and they are equal, it returns the second element. Otherwise, it recursively calls the function on the left or right half of the array based on the comparison with the middle element. If the middle element is equal to the previous element, it recursively calls the function on the right half of the array. Otherwise, it recursively calls the function on the left half of the array. This process continues until the element that appears only once is found."}
