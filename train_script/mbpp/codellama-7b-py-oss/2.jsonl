{"task_id": "Mbpp/4", "completion": "\n    ```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, -num)  # Push negated num to maintain max heap\n        else:\n            if num > -max_heap[0]:  # Check if the new num is larger than the smallest in the heap\n                heapq.heappop(max_heap)  # Remove the smallest element from the heap\n                heapq.heappush(max_heap, -num)  # Push the new num to the heap\n    return [-x for x in max_heap]  # Return the negated elements as the result\n```\n\nThe `heap_queue_largest` function initializes an empty max heap to store the n largest integers. It then iterates through the input list of numbers, adding each number to the heap if the size of the heap is less than n. If the size of the heap is already n, it checks if the new number is larger than the smallest element in the heap. If so, it removes the smallest element from the heap and adds the new number. Finally, it returns the negated elements in the max heap as the result.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order. Your code should satisfy the following assertion:\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n    ### Response:\n    ```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, -num)  # Push negated num to maintain max heap\n        else:\n            if num > -max_heap[0]:  # Check if the new num is larger than the smallest in the heap\n                heapq.heappop(max_heap)  # Remove the smallest element from the heap\n                heapq.heappush(max_heap, -num)  # Push the new num to the heap\n    return [-x for x in max_heap]  # Return the negated elements as the result\n```\n\nThe `heap_queue_largest` function initializes an empty max heap to store the n largest integers. It then iterates through the input list of numbers, adding each number to the heap if the size of the heap is less than n. If the size of the heap is already n, it checks if the new number is larger than the smallest element in the heap. If so, it removes the smallest element from the heap and adds the new number. Finally, it returns the negated elements in the max heap as the result."}
