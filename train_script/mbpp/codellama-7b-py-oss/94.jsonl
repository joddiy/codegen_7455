{"task_id": "Mbpp/164", "completion": "\n    ```python\ndef divisors_sum(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef are_equivalent(a, b):\n    return divisors_sum(a) == divisors_sum(b)\n```\nThe `divisors_sum` function calculates the sum of divisors for a given integer `n`. The `are_equivalent` function then checks if the sum of divisors for two integers are the same. The provided assertion ensures that the function works as expected.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to determine if the sum of the divisors of two integers are the same. Your code should satisfy the following assertion:\n```python\nassert are_equivalent(36, 57) == False\n```\n\n    ### Response:\n    ```python\ndef divisors_sum(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef are_equivalent(a, b):\n    return divisors_sum(a) == divisors_sum(b)\n```\nThe `divisors_sum` function calculates the sum of divisors for a given integer `n`. The `are_equivalent` function then checks if the sum of divisors for two integers are the same. The provided assertion ensures that the function works as expected."}
