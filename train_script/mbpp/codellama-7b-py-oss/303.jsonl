{"task_id": "Mbpp/620", "completion": "\n    ```python\ndef largest_subset(numbers):\n    numbers.sort()\n    max_size = 0\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            max_size = max(max_size, i + 1)\n        else:\n            break\n    return max_size\n```\n\nThe `largest_subset` function first sorts the input list of numbers. Then, it iterates through the sorted list, finding the largest subset size where every pair is divisible. The function returns the maximum subset size found.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n    ### Instruction:\n    Create a Python script for this problem:\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n    ### Response:\n    ```python\ndef largest_subset(numbers):\n    numbers.sort()\n    max_size = 0\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            max_size = max(max_size, i + 1)\n        else:\n            break\n    return max_size\n```\n\nThe `largest_subset` function first sorts the input list of numbers. Then, it iterates through the sorted list, finding the largest subset size where every pair is divisible. The function returns the maximum subset size found."}
